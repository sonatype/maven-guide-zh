<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="lifecycle">
  <title>构建生命周期</title>

  <section id="lifecycle-structure">
    <title>简介</title>

    <para>Maven使用<acronym>POM</acronym>描述项目，将其建模成一些名词。<acronym>POM</acronym>记录了一个项目的定义：项目包含什么？需要怎样的打包类型？是否包含一个父项目？它的依赖是什么？我们已经在前面的章节展示了如何描述一个项目，但还没有介绍一种允许Maven针对这些对象进行操作的机制。在Maven中这些“动词”是由Maven插件包装的一些目标，它们绑定到一个构建生命周期的阶段中。一个Maven生命周期包含了一些有序的命名阶段：prepare-resources，compile，package，和install以及其它。有个阶段抽象了编译过程，有个阶段抽象了打包过程。而那些pre-和post-阶段可以用来注册一些必须在某些特定阶段之前或之后运行的目标。当你让Maven构建一个项目的时候，你其实是让它一步步通过那些预定义的有序的阶段，并且运行所有注册到某个特定阶段的目标。</para>

    <para>一个构建生命周期是一组精心组织的有序的阶段，它的存在能使所有注册的目标变得有序运行。这些目标根据项目的打包类型被选择并绑定。Maven中有三种标准的生命周期：清理（clean），默认（default）(有时候也称为构建)，和站点（site）。本章，我们将学习Maven如何将目标绑定到生命周期，生命周期如何自定义。你同时也会学到默认生命周期阶段的知识。</para>

    <section>
      <title>清理生命周期 (clean)</title>

      <para>第一个你将感兴趣的生命周期是Maven中最简单的生命周期。运行<command>mvn
      clean</command>将调用清理生命周期，它包含了三个生命周期阶段：</para>

      <itemizedlist>
        <listitem>
          <para><varname>pre-clean</varname></para>
        </listitem>

        <listitem>
          <para><varname>clean</varname></para>
        </listitem>

        <listitem>
          <para><varname>post-clean</varname></para>
        </listitem>
      </itemizedlist>

      <para>在清理生命周期中最有意思的阶段是<varname>clean</varname>阶段。Clean插件的clean目标（<varname>clean:clean</varname>）被绑定到清理生命周期中的<varname>clean</varname>阶段。目标<varname>clean:clean</varname>通过删除构建目录删除整个构建的输出。如果你没有自定义构建目录位置，那么构建目录就是定义在超级<acronym>POM</acronym>中的<filename>${basedir}/target</filename>。当你运行<varname>clean:clean</varname>目标的时候你并不是直接运行<command>mvn
      clean:clean</command>，你可以通过执行清理生命周期的<varname>clean</varname>阶段运行该目标。运行<varname>clean</varname>阶段能让Maven有机会执行其它可能被绑定到<varname>pre-clean</varname>阶段的目标。</para>

      <para>例如，假设你想要在<varname>pre-clean</varname>的时候触发一个<varname>antrun:run</varname>目标任务来输出一个通知，或者需要在项目构建目录被删除之前将其归档。简单的运行<varname>clean:clean</varname>目标不会完整的执行该生命周期，但是指定<varname>clean</varname>阶段就能使用<varname>clean</varname>生命周期，并且逐个的经过生命周期阶段，直到到达<varname>clean</varname>阶段。<xref
      linkend="ex-trigger-pre-clean" />展示了一个样例，在它的构建配置中，绑定了<varname>antrun:run</varname>至<varname>pre-clean</varname>阶段，输出一个警告告诉用户项目构件即将被删除。该例中，<varname>antrun:run</varname>目标被用来执行一些随意的Ant命令来检查项目的构件。如果项目的构件将要被删除，它会打印该信息至屏幕。</para>

      <example id="ex-trigger-pre-clean">
        <title>在pre-clean阶段触发一个目标</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;... &lt;plugin&gt;
    &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;id&gt;file-exists&lt;/id&gt;
        &lt;phase&gt;pre-clean&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;run&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
          &lt;tasks&gt;
            &lt;!-- adds the ant-contrib tasks (if/then/else used below) --&gt;
            &lt;taskdef resource="net/sf/antcontrib/antcontrib.properties" /&gt;
            &lt;available 
              file="${project.build.directory}/${project.build.finalName}.${project.packaging}"
              property="file.exists" value="true" /&gt;

            &lt;if&gt;
              &lt;not&gt;
                &lt;isset property="file.exists" /&gt;
              &lt;/not&gt;
              &lt;then&gt;
                &lt;echo&gt;No
                  ${project.build.finalName}.${project.packaging} to
                  delete&lt;/echo&gt;
              &lt;/then&gt;
              &lt;else&gt;
                &lt;echo&gt;Deleting
                  ${project.build.finalName}.${project.packaging}&lt;/echo&gt;
              &lt;/else&gt;
            &lt;/if&gt;
          &lt;/tasks&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;ant-contrib&lt;/groupId&gt;
        &lt;artifactId&gt;ant-contrib&lt;/artifactId&gt;
        &lt;version&gt;1.0b2&lt;/version&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/plugin&gt;
  &lt;/plugins&gt;
  &lt;/build&gt; 
&lt;/project&gt;
</programlisting>

        <para>在带有如上构建配置的项目中运行<command>mvn clean</command>会生成如下的输出：</para>
      </example>

      <screen>[INFO] Scanning for projects...
[INFO] ----------------------------------------------------------------------
[INFO] Building Your Project
[INFO]    task-segment: [clean]
[INFO] ----------------------------------------------------------------------
[INFO] [antrun:run {execution: file-exists}]
[INFO] Executing tasks
     [echo] Deleting your-project-1.0-SNAPSHOT.jar
[INFO] Executed tasks
[INFO] [clean:clean]
[INFO] Deleting directory ~/corp/your-project/target
[INFO] Deleting directory ~/corp/your-project/target/classes
[INFO] Deleting directory ~/corp/your-project/target/test-classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Wed Nov 08 11:46:26 CST 2006
[INFO] Final Memory: 2M/5M
[INFO] ------------------------------------------------------------------------
</screen>

      <para>除了在<varname>pre-clean</varname>阶段配置Maven去运行一个目标，你也可以自定义Clean插件去删除构建输出目录以外的文件。你可以配置该插件去删除那些在<sgmltag>fileSet</sgmltag>中指定的文件。下面的样例配置了Clean插件，使用标准的Ant文件通配符：*和**，删除所有<filename>target-other/</filename>目录中的<filename>.class</filename>文件。</para>

      <para><example>
          <title>自定义Clean插件的行为</title>

          <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;filesets&gt;
            &lt;fileset&gt;
              &lt;directory&gt;target-other&lt;/directory&gt;
              &lt;includes&gt;
                &lt;include&gt;*.class&lt;/include&gt;
              &lt;/includes&gt;
            &lt;/fileset&gt;
          &lt;/filesets&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
        </example></para>
    </section>

    <section>
      <title>默认生命周期 (default)</title>

      <para>大部分Maven用户将会对默认生命周期十分熟悉。它是一个软件应用程序构建过程的总体模型。第一个阶段是<varname>validate</varname>，最后一个阶段是<varname>deploy</varname>。这些默认Maven生命周期的阶段如<xref
      linkend="tbl-default-lifecycle" />所示：</para>

      <table id="tbl-default-lifecycle">
        <title>Maven默认生命周期阶段</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>描述</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>validate</entry>

              <entry>验证项目是否正确，以及所有为了完整构建必要的信息是否可用</entry>
            </row>

            <row>
              <entry>generate-sources</entry>

              <entry>生成所有需要包含在编译过程中的源代码</entry>
            </row>

            <row>
              <entry>process-sources</entry>

              <entry>处理源代码，比如过滤一些值</entry>
            </row>

            <row>
              <entry>generate-resources</entry>

              <entry>生成所有需要包含在打包过程中的资源文件</entry>
            </row>

            <row>
              <entry>process-resources</entry>

              <entry>复制并处理资源文件至目标目录，准备打包</entry>
            </row>

            <row>
              <entry>compile</entry>

              <entry>编译项目的源代码</entry>
            </row>

            <row>
              <entry>process-classes</entry>

              <entry>后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）</entry>
            </row>

            <row>
              <entry>generate-test-sources</entry>

              <entry>生成所有包含在测试编译过程中的测试源码</entry>
            </row>

            <row>
              <entry>process-test-sources</entry>

              <entry>处理测试源码，比如过滤一些值</entry>
            </row>

            <row>
              <entry>generate-test-resources</entry>

              <entry>生成测试需要的资源文件</entry>
            </row>

            <row>
              <entry>process-test-resources</entry>

              <entry>复制并处理测试资源文件至测试目标目录</entry>
            </row>

            <row>
              <entry>test-compile</entry>

              <entry>编译测试源码至测试目标目录</entry>
            </row>

            <row>
              <entry>test</entry>

              <entry>使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布</entry>
            </row>

            <row>
              <entry>prepare-package</entry>

              <entry>在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本（将会在Maven
              2.1+中实现）</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>将编译好的代码打包成可分发的格式，如<acronym>JAR</acronym>，<acronym>WAR</acronym>，或者<acronym>EAR</acronym></entry>
            </row>

            <row>
              <entry>pre-integration-test</entry>

              <entry>执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境</entry>
            </row>

            <row>
              <entry>integration-test</entry>

              <entry>如果有必要的话，处理包并发布至集成测试可以运行的环境</entry>
            </row>

            <row>
              <entry>post-integration-test</entry>

              <entry>执行一些在集成测试运行之后需要的动作。如清理集成测试环境。</entry>
            </row>

            <row>
              <entry>verify</entry>

              <entry>执行所有检查，验证包是有效的，符合质量规范</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>安装包至本地仓库，以备本地的其它项目作为依赖使用</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>站点生命周期 (site)</title>

      <para>Maven不仅仅能从一个项目构建软件构件，它还能为一个或者一组项目生成项目文档和报告。项目文档和站点生成有一个专有的生命周期，它包含了四个阶段：</para>

      <orderedlist>
        <listitem>
          <para>pre-site</para>
        </listitem>

        <listitem>
          <para>site</para>
        </listitem>

        <listitem>
          <para>post-site</para>
        </listitem>

        <listitem>
          <para>site-deploy</para>
        </listitem>
      </orderedlist>

      <para>默认绑定到站点生命周期的目标是：</para>

      <orderedlist>
        <listitem>
          <para>site - site:site</para>
        </listitem>

        <listitem>
          <para>site-deploy -site:deploy</para>
        </listitem>
      </orderedlist>

      <para>打包类型通常不更改此生命周期，因为打包类型主要和构件创建有关，和站点生成没有太大的关系。Site插件触发<ulink
      url="http://maven.apache.org/doxia/">Doxia</ulink>执行文档生成，以及执行其它报告生成插件。你可以通过运行如下命令从一个Maven项目生成一个站点：</para>

      <screen>$ <command>mvn site</command>
</screen>

      <para>有关更多的Maven站点生成信息，查看<xref linkend="site-generation" />。</para>
    </section>
  </section>

  <section>
    <title>打包相关生命周期</title>

    <para>绑定到每个阶段的特定目标默认根据项目的打包类型设置。一个打包类型为<varname>jar</varname>的项目和一个打包类型为<varname>war</varname>的项目拥有不同的两组默认目标。<sgmltag>packaging</sgmltag>元素影响构建一个项目需要的步骤。举个打包如何影响构建的例子，考虑有两个项目：一个打包类型是<varname>pom</varname>，另外一个是<varname>jar</varname>。在<varname>package</varname>阶段，打包类型为<varname>pom</varname>的项目会运行<varname>site:attach-descriptor</varname>目标，而打包类型为<varname>jar</varname>的项目会运行<varname>jar:jar</varname>目标。</para>

    <para>下面的小节描述了Maven中内建打包类型的生命周期。可以使用这些小节来找出哪些默认目标映射到了哪些默认生命周期阶段。</para>

    <section>
      <title>JAR</title>

      <para><acronym>JAR</acronym>是默认的打包类型，是最常用的，因此也就是生命周期配置中最经常遇到的打包类型。<acronym>JAR</acronym>生命周期默认的目标如<xref
      linkend="tbl-jar-lifecycle" />所示：</para>

      <table id="tbl-jar-lifecycle">
        <title>JAR打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>process-resources</entry>

              <entry>resources:resources</entry>
            </row>

            <row>
              <entry>compile</entry>

              <entry>compiler:compile</entry>
            </row>

            <row>
              <entry>process-test-resources</entry>

              <entry>resources:testResources</entry>
            </row>

            <row>
              <entry>test-compile</entry>

              <entry>compiler:testCompile</entry>
            </row>

            <row>
              <entry>test</entry>

              <entry>surefire:test</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>jar:jar</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>POM</title>

      <para><acronym>POM</acronym>是最简单的打包类型。不像一个<acronym>JAR</acronym>，<acronym>SAR</acronym>，或者<acronym>EAR</acronym>，它生成的构件只是它本身。没有代码需要测试或者编译，也没有资源需要处理。打包类型为<acronym>POM</acronym>的项目的默认目标如<xref
      linkend="tbl-pom-lifecycle" />所示：</para>

      <table id="tbl-pom-lifecycle">
        <title>POM打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>package</entry>

              <entry>site:attach-descriptor</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="sect-plugin-lifecycle">
      <title>Maven Plugin</title>

      <para>该打包类型和<acronym>JAR</acronym>打包类型类似，除了三个目标：<varname>plugin:descriptor</varname>，<varname>plugin:addPluginArtifactMetadata</varname>，和<varname>plugin:updateRegistry</varname>。这些目标生成一个描述文件，对仓库数据执行一些修改。打包类型为maven-plugin的项目的默认目标如<xref
      linkend="tbl-plugin-lifecycle" />所示。</para>

      <table id="tbl-plugin-lifecycle">
        <title>maven-plugin打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>generate-resources</entry>

              <entry>plugin:descriptor</entry>
            </row>

            <row>
              <entry>process-resources</entry>

              <entry>resources:resources</entry>
            </row>

            <row>
              <entry>compile</entry>

              <entry>compiler:compile</entry>
            </row>

            <row>
              <entry>process-test-resources</entry>

              <entry>resources:testResources</entry>
            </row>

            <row>
              <entry>test-compile</entry>

              <entry>compiler:testCompile</entry>
            </row>

            <row>
              <entry>test</entry>

              <entry>surefire:test</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>jar:jar, plugin:addPluginArtifactMetadata</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install, plugin:updateRegistry</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>EJB</title>

      <para><acronym>EJB</acronym>，或者说企业Java
      Bean，是企业级Java中模型驱动开发的常见数据访问机制。Maven提供了对<acronym>EJB</acronym>
      2和3的支持。你必须配置<acronym>EJB</acronym>插件来为<acronym>EJB3</acronym>指定打包类型，否则该插件默认认为<acronym>EJB</acronym>为2.1，并寻找某些<acronym>EJB</acronym>配置文件是否存在。打包类型为<acronym>EJB</acronym>的项目的默认目标如<xref
      linkend="tbl-ejb-lifecycle" />所示。</para>

      <table id="tbl-ejb-lifecycle">
        <title>EJB打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>process-resources</entry>

              <entry>resources:resources</entry>
            </row>

            <row>
              <entry>compile</entry>

              <entry>compiler:compile</entry>
            </row>

            <row>
              <entry>process-test-resources</entry>

              <entry>resources:testResources</entry>
            </row>

            <row>
              <entry>test-compile</entry>

              <entry>compiler:testCompile</entry>
            </row>

            <row>
              <entry>test</entry>

              <entry>surefire:test</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>ejb:ejb</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>WAR</title>

      <para><acronym>WAR</acronym>打包类型和<acronym>JAR</acronym>以及<acronym>EJB</acronym>类似。例外是这里的<varname>package</varname>目标是<varname>war:war</varname>。注意<varname>war:war</varname>插件需要一个<filename>web.xml</filename>配置文件在项目的<filename>src/main/webapp/WEB-INF</filename>目录中。打包类型为<acronym><acronym>WAR</acronym></acronym>的项目的默认目标如<xref
      linkend="tbl-war-lifecycle" />所示。</para>

      <table id="tbl-war-lifecycle">
        <title>WAR打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>process-resources</entry>

              <entry>resources:resources</entry>
            </row>

            <row>
              <entry>compile</entry>

              <entry>compiler:compile</entry>
            </row>

            <row>
              <entry>process-test-resources</entry>

              <entry>resources:testResources</entry>
            </row>

            <row>
              <entry>test-compile</entry>

              <entry>compiler:testCompile</entry>
            </row>

            <row>
              <entry>test</entry>

              <entry>surefire:test</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>war:war</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>EAR</title>

      <para><acronym>EAR</acronym>可能是最简单的Java
      EE结构体，它主要包含一个部署描述符<filename>application.xml</filename>文件，一些资源和一些模块。<acronym>EAR</acronym>插件有个名为<varname>generate-application-xml</varname>的目标，它根据<acronym>EAR</acronym>项目<acronym>POM</acronym>的配置生成<filename>application.xml</filename>。打包类型为<acronym><acronym><acronym>EAR</acronym></acronym></acronym>的项目的默认目标如<xref
      linkend="tbl-ear-lifecycle" />所示。</para>

      <table id="tbl-ear-lifecycle">
        <title>EAR打包默认的目标</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>generate-resources</entry>

              <entry>ear:generate-application-xml</entry>
            </row>

            <row>
              <entry>process-resources</entry>

              <entry>resources:resources</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>ear:ear</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install:install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy:deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>其它打包类型</title>

      <para>以上列表并非是Maven中所有可用打包类型。有许多打包格式在外部的项目和插件中可用：<acronym>NAR</acronym>（本地归档）打包类型，用来生成Adobe
      Flash和Flex内容的项目的<acronym>SWF</acronym>和<acronym>SWC</acronym>打包类型，以及很多其它类型。你也可以自定义打包类型，定制默认的生命周期目标来适应你自己项目的打包需求。</para>

      <para>为了使用自定义的打包类型，你需要两样东西：一个定义了定制打包类型生命周期的插件，和一个包含该插件的仓库。有些定制打包类型是由中央Maven仓库中可用的插件定义的。这里有一个样例项目，它引用了Israfil
      Flex插件，使用自定义打包类型<acronym>SWF</acronym>根据Adobe Flex生成输出。</para>

      <para><example>
          <title>为Adobe Flex (SWF)定制打包类型</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;packaging&gt;swf&lt;/packaging&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;net.israfil.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;maven-flex2-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.4-SNAPSHOT&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;configuration&gt;
          &lt;debug&gt;true&lt;/debug&gt;
          &lt;flexHome&gt;${flex.home}&lt;/flexHome&gt;
          &lt;useNetwork&gt;true&lt;/useNetwork&gt;
          &lt;main&gt;org/sonatype/mavenbook/Main.mxml&lt;/main&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>在<xref
      linkend="sect-plugins-lifecycle" />中，我们向你展示了如何使用自定义的生命周期创建你自己的打包类型。该样例应该能让你了解到，引用一个定制的打包类型你需要做些什么。你需要做的只是引用那个提供定制打包类型的插件。Israfil
      Flex插件是托管在Google Code的第三方Maven插件，要了解更多的关于此插件的信息，以及如何使用Maven编译Adobe
      Flex，访问<ulink
      url="http://code.google.com/p/israfil-mojo">http://code.google.com/p/israfil-mojo</ulink>。该插件为<acronym>SWF</acronym>打包类型提供了如下的生命周期。</para>

      <table>
        <title>SWF打包的默认生命周期</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>生命周期阶段</entry>

              <entry>目标</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>compile</entry>

              <entry>flex2:compile-swc</entry>
            </row>

            <row>
              <entry>install</entry>

              <entry>install</entry>
            </row>

            <row>
              <entry>deploy</entry>

              <entry>deploy</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>通用生命周期目标</title>

    <para>很多打包类型的生命周期有类似的目标。如果你看一下绑定到<acronym>WAR</acronym>和<acronym>JAR</acronym>生命周期的目标，你会发现它们只有在<varname>package</varname>阶段有区别。<acronym>WAR</acronym>生命周期的<varname>package</varname>阶段调用了<varname>war:war</varname>，而<acronym>JAR</acronym>生命周期的<varname>package</varname>阶段调用了<varname>jar:jar</varname>。大部分你将要接触的生命周期共享一些通用生命周期目标，用来管理资源，运行测试，以及编译源代码。本节，我们会详细讨论这些通用的生命周期目标。</para>

    <section>
      <title>Process Resources</title>

      <para>大部分生命周期将<varname>resources:resources</varname>目标绑定到<varname>process-resources</varname>阶段。<varname>process-resources</varname>阶段处理资源并将资源复制到输出目录。如果你没有自己自定义超级<acronym>POM</acronym>中的默认目录位置，Maven就会将<filename>${basedir}/src/main/resources</filename>中的文件复制到<filename>${basedir}/target/classes</filename>，或者是由<filename>${project.build.outputDirectory}</filename>定义的目录。除了复制资源文件至输出目录，Maven同时也会在资源上应用过滤器，能让你替换资源文件中的一些符号。就像在<acronym>POM</acronym>中我们通过<varname>${...}</varname>标记引用变量一样，你也可以使用同样的语法在你项目的资源文件中引用变量。与profile联系起来，这样的特性就能用来生成针对不同部署平台的构件。当我们需要为同一个项目的开发，测试，staging，以及产品平台环境生成输出的时候，该特性就十分有用。要了解更多的关于构建profile的信息，查看<xref
      linkend="profiles" />。</para>

      <para>为了阐述资源过滤，假设你有个带有<acronym>XML</acronym>文件<filename>src/main/resources/META-INF/service.xml</filename>的项目。你想要提取出一些配置变量至一个属性文件。换句话说，你可能想要为你的数据库引用<acronym>JDBC</acronym>
      <acronym>URL</acronym>，用户名和密码，并且你不想将这些值直接放到<filename>service.xml</filename>文件里，而是想要使用一个属性文件来存储你程序中的所有配置点。这么做能让你将所有配置信息固定到单独的一个属性文件中，当你需要面对一个新的部署环境的时候，就很容易更改配置的值。首先，看一下<filename><filename>src/main/resources/META-INF/service.xml</filename></filename>的内容。</para>

      <para><example>
          <title>在项目资源中使用属性</title>

          <programlisting language="xml">&lt;service&gt;
  &lt;!-- This URL was set by project version ${project.version} --&gt;
  &lt;url&gt;${jdbc.url}&lt;/url&gt;
  &lt;user&gt;${jdbc.username}&lt;/user&gt;
  &lt;password&gt;${jdbc.password}&lt;/password&gt;
&lt;/service&gt;
</programlisting>
        </example></para>

      <para>该<acronym>XML</acronym>文件使用你在<acronym>POM</acronym>中用到的同样的属性引用语法，第一个引用的变量是<varname>project</varname>，它同时也是<acronym>POM</acronym>中的隐式变量。<varname>project</varname>变量提供了对<acronym>POM</acronym>信息的访问。接下来的三个变量引用是，<varname>jdbc.url</varname>，<varname>jdbc.username</varname>和<varname>jdbc.password</varname>。这些自定义的变量在一个属性文件<filename>src/main/filters/default.properties</filename>中定义。</para>

      <example>
        <title>src/main/filters中的default.properties</title>

        <programlisting>jdbc.url=jdbc:hsqldb:mem:mydb
jdbc.username=sa
jdbc.password=
</programlisting>
      </example>

      <para>要配置使用该<filename>default.properties</filename>文件的资源过滤，我们需要在这个项目的<acronym>POM</acronym>中指定两样东西：构建配置的<sgmltag>filters</sgmltag>元素中的属性文件列表，以及一个标记告诉Maven资源目录需要过滤。默认的Maven行为会跳过过滤，只是将资源复制到输出目录；你需要显式的配置资源过滤，否则Maven就会置之不理。这种Maven资源过滤的默认行为是为了确保不让Maven替换掉一些你不想替换的<varname>${...}</varname>引用。</para>

      <para><example>
          <title>过滤资源 (替换属性)</title>

          <programlisting language="xml">&lt;build&gt;
  &lt;filters&gt;
    &lt;filter&gt;src/main/filters/default.properties&lt;/filter&gt;
  &lt;/filters&gt;
  &lt;resources&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/resources&lt;/directory&gt;
      &lt;filtering&gt;true&lt;/filtering&gt;
    &lt;/resource&gt;
  &lt;/resources&gt;
&lt;/build&gt;
</programlisting>
        </example></para>

      <para>正如Maven中所有目录一样，资源目录并非一定要在<filename>src/main/resources</filename>。这只是定义在超级<acronym>POM</acronym>中的默认值。你应该也注意到你不需要将你所有的资源合并到一个单独的目录中。你可以将资源分离至<filename>src/main</filename>目录下的独立的目录中。假设你有个项目包含了数百个<acronym>XML</acronym>文档和数百个图片。你可能希望创建两个目录<filename>src/main/xml</filename>和<filename>src/main/images</filename>来存储这些内容，而不是将它们混合在<filename>src/main/resources</filename>目录中。为了添加资源目录列表，你需要在你的构建配置中加入如下的<sgmltag>resource</sgmltag>元素：</para>

      <example>
        <title>配置额外的资源目录</title>

        <programlisting language="xml">&lt;build&gt;
  ...
  &lt;resources&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/resources&lt;/directory&gt;
    &lt;/resource&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/xml&lt;/directory&gt;
    &lt;/resource&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/images&lt;/directory&gt;
    &lt;/resource&gt;
  &lt;/resources&gt;
  ...
&lt;/build&gt;</programlisting>
      </example>

      <para>当你构建一个项目用来生成控制台程序或者命令行工具的时候，你通常发现自己正编写一个shell脚本，需要引用构建生成的<acronym>JAR</acronym>。当你使用assembly插件为一个应用程序生成如<acronym>ZIP</acronym>或<acronym>TAR</acronym>的分发包的时候，你可能会将所有的脚本放到如<filename>src/main/command</filename>的目录下。在下面的<acronym>POM</acronym>资源配置中，你会看到我们如何使用资源过滤器和一个对项目变量的引用，生成<acronym>JAR</acronym>的最终名称。要了解更多的关于Maven
      Assembly插件的信息，参考<xref linkend="assemblies" />。</para>

      <para><example id="ex-filter-script">
          <title>过滤脚本资源</title>

          <programlisting language="xml">&lt;build&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;simple-cmd&lt;/artifactId&gt;
  &lt;version&gt;2.3.1&lt;/version&gt;
  ...
  &lt;resources&gt;
    &lt;resource&gt;
      &lt;filtering&gt;true&lt;/filtering&gt;
      &lt;directory&gt;${basedir}/src/main/command&lt;/directory&gt;
      &lt;includes&gt;
        &lt;include&gt;run.bat&lt;/include&gt;
        &lt;include&gt;run.sh&lt;/include&gt;
      &lt;/includes&gt;
      &lt;targetPath&gt;${basedir}&lt;/targetPath&gt;
    &lt;/resource&gt;
    &lt;resource&gt;
      &lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt;
    &lt;/resource&gt;
  &lt;/resources&gt;
  ...
&lt;/build&gt;</programlisting>
        </example></para>

      <para>如果你在该项目中运行<filename>mvn
      process-resources</filename>，最后你会在<varname>${basedir}</varname>中得到两个文件，<filename>run.sh</filename>和<filename>run.bat</filename>，我们在<sgmltag>resource</sgmltag>元素中挑选出这两个文件，配置过滤器，然后设置<sgmltag>targetPath</sgmltag>为<varname>${basedir}</varname>。在第二个<sgmltag>resource</sgmltag>元素中，我们配置了默认资源路径，使其在不做过滤的情况下被复制到默认输出目录。<xref
      linkend="ex-filter-script" />告诉你如何声明两个资源目录，如何给它们提供不同的过滤配置和目标目录配置。<xref
      linkend="ex-filter-script" />项目的<filename>src/main/command</filename>目录下包含了一个含有如下内容的<filename>run.bat</filename>文件。</para>

      <programlisting>@echo off
java -jar ${project.build.finalName}.jar %*
</programlisting>

      <para>在运行了<command>mvn
      process-resources</command>之后，目录<varname>${basedir}</varname>下会有一个含有如下内容的名为<filename>run.bat</filename>的文件：</para>

      <programlisting>@echo off
java -jar simple-cmd-2.3.1.jar %*
</programlisting>

      <para>在带有很多不同种类资源的复杂的项目中，我们会发现将资源分离到多个目录下十分有利，原因之一就是我们可以为特定的资源子集自定义过滤器。针对不同的过滤需求，除了将资源存储到不同的目录下，我们还可以使用更复杂的一组包含/排除模式来匹配那些符合模式的资源文件。</para>
    </section>

    <section>
      <title>Compile</title>

      <para>大部分生命周期将Compiler插件的<varname>compile</varname>目标绑定到<varname>compile</varname>阶段。该阶段会调用<varname>compile:compile</varname>，后者被配置成编译所有的源码并复制到构建输出目录。如果你没有自定义超级<acronym>POM</acronym>中的值，<varname>compile:compile</varname>将会编译<filename>src/main/java</filename>中的所有内容至<filename>target/classes</filename>。Compiler插件调用<filename>javac</filename>，使用的source设置为1.3，默认target设置为1.1。换句话说，Compiler插件会假设你所有的Java源代码遵循Java
      1.3，目标为Java 1.1
      JVM。如果你想要更改这些设置，你需要在<acronym>POM</acronym>中为Compiler插件提供source和target配置，如<xref
      linkend="ex-compilesrc-target" />所示。</para>

      <para><example id="ex-compilesrc-target">
          <title>为Compiler插件设置source和target版本</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    ...
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
    ...
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>要注意我们配置的是Compiler插件，而不是<varname>compile:compile</varname>目标。如果我们只要为<varname>compile:compile</varname>目标配置source和target，就要将<sgmltag>configuration</sgmltag>元素放到<varname>compile:compile</varname>目标的<sgmltag>execution</sgmltag>元素下。我们为整个插件配置source和target，是因为<varname>compile:compile</varname>并不是我们唯一我们感兴趣配置的目标。当Maven使用<varname>compile:testCompile</varname>目标编译测试代码的时候，Compiler插件会被重用，因此在插件级别配置source和target，一次就能配置该插件所有的目标。</para>

      <para>如果你想要自定义源码的位置，你也可以更改构建配置。如果你想要存储项目的源码至<filename>src/java</filename>而非<filename>src/main/java</filename>，让构建输出至<filename>classes</filename>而非<filename>target/classes</filename>，你可以覆盖定义在超级<acronym>POM</acronym>中的<sgmltag>sourceDirectory</sgmltag>的默认值。</para>

      <example>
        <title>覆盖默认的源码和输出目录</title>

        <programlisting language="xml">&lt;build&gt;
  ...
  &lt;sourceDirectory&gt;src/java&lt;/sourceDirectory&gt;
  &lt;outputDirectory&gt;classes&lt;/outputDirectory&gt;
  ...
&lt;/build&gt;</programlisting>
      </example>

      <warning>
        <para>虽然让Maven屈服于你自己的项目目录结构可能看起来很有必要，但我们还是要不断强调你应该牺牲自己关于目录结构的想法，而遵循Maven的默认值。这不是说我们要给你洗脑，要你接受Maven的方式，这是因为如果你的项目遵循大部分的约定，别人会很容易理解你的项目。因此忘掉你自己的想法，别那样做。</para>
      </warning>
    </section>

    <section>
      <title>Process Test Resources</title>

      <para><varname>process-test-resources</varname>阶段最难和<varname>process-resources</varname>阶段区别。在<acronym>POM</acronym>中它们有一些微小的差别，但大部分是一样的。你可以像过滤一般的资源那样过滤测试资源。测试资源的默认位置定义在超级<acronym>POM</acronym>中，为<filename>src/test/resources</filename>，默认的输出目录为<filename>target/test-classes</filename>，由<varname>${project.build.testOutputDirectory}</varname>定义。</para>
    </section>

    <section>
      <title>Test Compile</title>

      <para><varname>test-compile</varname>阶段基本上和<varname>compile</varname>阶段一致。唯一的不同是会调用<varname>compile:testCompile</varname>编译测试源代码目录至测试构建构建输出目录。如果你没有在超级<acronym>POM</acronym>中自定义默认目录，<varname>compile:testCompile</varname>将会编译<filename>src/test/java</filename>中的源码至<filename>target/test-classes</filename>目录。</para>

      <para>类似源代码目录，如果你想要自定义测试源码目录和测试编译输出目录的位置，你可以覆盖<varname>testSourceDirectory</varname>和<varname>testOutputDirectory</varname>。如果你想要将测试源代码存储在<filename>src-test/</filename>而非<filename>src/test/java</filename>，保存测试字节码至<filename>classes-test/</filename>而非<filename>target/test-classes</filename>，你可以使用如下的配置：</para>

      <example>
        <title>覆盖测试源码和输出的位置</title>

        <programlisting language="xml">&lt;build&gt;
  ...
  &lt;testSourceDirectory&gt;src-test&lt;/testSourceDirectory&gt;
  &lt;testOutputDirectory&gt;classes-test&lt;/testOutputDirectory&gt;
  ...
&lt;/build&gt;</programlisting>
      </example>
    </section>

    <section>
      <title>Test</title>

      <para>大部分生命周期绑定Surefire插件的test目标至test阶段。Surefire插件是Maven的单元测试插件，Surefire默认的行为是寻找测试源码目录下所有以*Test结尾的类，以<ulink
      url="http://www.junit.org">JUnit</ulink>测试的形式运行它们。Surefire插件也可以配置成运行<ulink
      url="http://www.testng.org">TestNG</ulink>单元测试。</para>

      <para>运行过<command>mvn
      test</command>之后，你应该注意到Surefire在<filename>target/surefire-reports</filename>目录生成了许多报告。该目录内每个Surefire插件运行过的测试都会有相关的两个文件：一个是包含测试运行信息的<acronym>XML</acronym>文档，另一个是包含单元测试输出的文本文件。如果测试阶段有问题，单元测试失败了，你可以使用Maven的输出以及该目录下的内容来追查测试失败的原因。在站点生成的时候，<filename>surefire-reports/</filename>目录的内容会被用来创建报告，使项目所有单元测试的总体情况清晰明了。</para>

      <para>如果你工作的项目有一些失败的单元测试，同时你想让项目生成输出，你需要配置Surefire插件在遇到失败的情况下继续一个构建。当遇到单元测试失败的时候，默认行为是停止构建。要覆盖这种行为，你需要设置Surefire插件的<varname>testFailureIgnore</varname>配置属性为true。</para>

      <example>
        <title>配置Surefire忽略单元测试失败</title>

        <programlisting language="xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
     &lt;configuration&gt;
       &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
     &lt;/configuration&gt;
    &lt;/plugin&gt;
    ...
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>
      </example>

      <para>如果你想要整个的跳过测试，你可以运行如下的命令：</para>

      <screen>$ mvn install -Dmaven.test.skip=true</screen>

      <para><varname>maven.test.skip</varname>变量同时控制Compiler和Surefire插件，如果你传入<varname>maven.test.skip</varname>，就等于告诉Maven整个的跳过测试。</para>
    </section>

    <section>
      <title>Install</title>

      <para>Install插件的<varname>install</varname>目标基本上都是绑定到<varname>install</varname>生命周期阶段。<varname>install:install</varname>目标只不过是将项目的主要构件安装到本地仓库。如果你有一个项目，<sgmltag>groupId</sgmltag>是<package>org.sonatype.mavenbook</package>，<sgmltag>artifactId</sgmltag>是<varname>simple-test</varname>，<sgmltag>version</sgmltag>是1.0.2，那么<varname>install:install</varname>目标就会从<filename>target/simple-test-1.0.2.jar</filename>复制<acronym>JAR</acronym>文件至<filename>~/.m2/repository/org/sonatype/mavenbook/simple-test/1.0.2/simple-test-1.0.2.jar</filename>。如果这个项目的打包类型是<acronym>POM</acronym>，那么该目标就仅仅复制<acronym>POM</acronym>到本地仓库。</para>
    </section>

    <section>
      <title>Deploy</title>

      <para>Deploy插件的<varname>deploy</varname>目标通常绑定到<varname>deploy</varname>生命周期阶段。该阶段用来将一个构件部署到远程Maven仓库，当你执行一次发布的时候通常需要更新远程仓库。一次部署过程可以简单到复制一个文件至另外一个目录，或者复杂到使用公钥通过<acronym>SCP</acronym>传送一个文件。部署设置通常包含远程仓库的证书，并且，这样的部署设置通常不会存储在<filename>pom.xml</filename>中。部署设置通常可以在用户单独的<filename>~/.m2/settings.xml</filename>中找到。到现在为止，你要知道的是<varname>deploy:deploy</varname>被绑定到<varname>deploy</varname>阶段，它会处理传送一个构件至发布仓库，更新一些可能被此次部署影响的仓库信息。</para>
    </section>
  </section>
</chapter>
