<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="multimodule">
  <title>一个多模块项目</title>

  <section id="multi-intro">
    <title>简介</title>

    <para>本章，我们创建一个结合了前两章样例的多模块项目。<xref
    linkend="customizing" />中开发的simple-weather代码将会与<xref
    linkend="web" />中定义的simple-webapp结合以创建一个新的web应用，它获取天气预报信息然后显示在web页面上。本章最后，你能将够使用Maven开发复杂的，多模块项目。</para>

    <section>
      <title>下载本章样例</title>

      <para>该样例中开发的多模块项目包含了<xref linkend="customizing" />和<xref
      linkend="web" />中项目的修改的版本，我们不会再使用Maven
      Archetype插件来生成这个多模块项目。我们强烈建议当你在阅读本章内容的时候，下载样例代码作为一个补充参考。本章的样例项目包含在本书的样例代码中，你可以从两个地方下载，<ulink
      url="http://www.sonatype.com/book/mvn-examples-1.0.zip">http://www.sonatype.com/book/mvn-examples-1.0.zip</ulink>或者<ulink
      url="http://www.sonatype.com/book/mvn-examples-1.0.tar.gz">http://www.sonatype.com/book/mvn-examples-1.0.tar.gz</ulink>。解开存档文件至任意目录，然后到<filename>ch06/</filename>目录。在<filename>ch06/</filename>目录你会看到一个名为<filename>simple-parent/</filename>的目录，它包含了本章开发出来的多模块Maven项目。在这个<filename>simple-parent/</filename>项目目录中，你会看到一个<filename>pom.xml</filename>，以及两个子模块目录<filename>simple-weather/</filename>和<filename>simple-webapp/</filename>。如果你想要在浏览器里看样例代码，访问<ulink
      url="http://www.sonatype.com/book/examples-1.0">http://www.sonatype.com/book/examples-1.0</ulink>，然后点击<filename>ch06/</filename>目录。
      </para>
    </section>
  </section>

  <section>
    <title>simple-parent 项目</title>

    <para>一个多模块项目通过一个父<acronym>POM</acronym>引用一个或多个子模块来定义。在<filename>simple-parent/</filename>目录中你能找到一个父<acronym>POM</acronym>（也称为顶层<acronym>POM</acronym>）为<filename>simple-parent/pom.xml</filename>。</para>

    <example id="ex-multimodule-parent-pom">
      <title>simple-parent 项目的 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 6 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;

</programlisting>
    </example>

    <para>注意simple-parent定义了一组Maven坐标：<varname>groupId</varname>是<varname>org.sonatype.mavenbook</varname>，<varname>artifactId</varname>是<varname>simple-parent</varname>，<varname>version</varname>是<varname>1.0</varname>。这个父项目不像之前的项目那样创建一个<acronym>JAR</acronym>或者一个<acronym>WAR</acronym>，它仅仅是一个引用其它Maven项目的<acronym>POM</acronym>。像<varname>simple-parent</varname>这样仅仅提供项目对象模型的项目，正确的的打包类型是<varname>pom</varname>。<filename>pom.xml</filename>中下一部分列出了项目的子模块。这些模块在<sgmltag>modules</sgmltag>元素中定义，每个<sgmltag>modules</sgmltag>元素对应了一个<filename>simple-parent/</filename>目录下的子目录。Maven知道去这些子目录寻找<filename>pom.xml</filename>文件，并且，在构建的simp-parent的时候，它会将这些子模块包含到要构建的项目中。</para>

    <para>最后，我们定义了一些将会被所有子模块继承的设置。<varname>simple-parent</varname>的build部分配置了所有Java编译的目标是Java
    5
    <acronym>JVM</acronym>。因为compiler插件默认绑定到了生命周期，我们就可以使用<sgmltag>pluginManagement</sgmltag>部分来配置。我们将会在后面的章节详细讨论<sgmltag>pluginManagement</sgmltag>，区分为默认的插件提供配置和真正的绑定插件是很容易的。dependencies元素将JUnit
    3.8.1添加为一个全局的依赖。build配置和dependencies都会被所有的子模块继承。使用POM继承允许你添加一些全局的依赖如JUnit和Log4J。</para>
  </section>

  <section>
    <title>simple-weather 模块</title>

    <para>我们要看的第一个子模块是<varname>simple-weather</varname>子模块。这个子模块包含了所有用来与Yahoo!
    weather信息源交互的类。</para>

    <example>
      <title>simple-weather 模块的 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 6 Simple Weather API&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
      &lt;version&gt;1.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>在<varname>simple-weather</varname>的<filename>pom.xml</filename>文件中我们看到该模块使用一组Maven坐标引用了一个父POM。<varname>simple-weather</varname>的父POM通过一个值为<varname>org.sonatype.mavenbook</varname>的<varname>groupId</varname>，一个值为<varname>simple-parent</varname>的<varname>artifactId</varname>，以及一个值为<varname>1.0</varname>的<varname>version</varname>来定义。注意子模块中我们不再需要重新定义groupId和version，它们都从父项目继承了。</para>

    <example id="multimodule-weather-service">
      <title>WeatherService 类</title>

      <programlisting language="java">package org.sonatype.mavenbook.weather;

import java.io.InputStream;

public class WeatherService {

    public WeatherService() {}

    public String retrieveForecast( String zip ) throws Exception {
        // Retrieve Data
        InputStream dataIn = new YahooRetriever().retrieve( zip );

        // Parse Data
        Weather weather = new YahooParser().parse( dataIn );

        // Format (Print) Data
        return new WeatherFormatter().format( weather );
    }
}
</programlisting>
    </example>

    <para><classname>WeatherService</classname>类在<filename>src/main/java/org/sonatype/mavenbook/weather</filename>中定义，它简单的调用<xref
    linkend="customizing" />中定义的三个对象。在本章的样例中，我们正创建一个单独的项目，它包含了将会在web应用项目中被引用的service对象。这是一个在企业级Java开发中常见的模型，通常一个复杂的应用包含了不止一个的简单web应用。你可能拥有一个企业应用，它包含了多个web应用，以及一些命令行应用。通常你会想要重构那些通用的逻辑至一个service类，以被很多项目重用。这就是我们创建<classname>WeatherService</classname>类的理由，在此之后，你就能看到<varname>simple-webapp</varname>项目是如何引用在<varname>simple-weather</varname>中定义的service对象。</para>

    <para><methodname>retrieveForecast()</methodname>方法接受一个包含邮政编码的<classname>String</classname>。之后这个邮政编码参数被传给<classname>YahooRetriever</classname>的<methodname>retrieve()</methodname>方法，后者从Yahoo!
    Weather获取<acronym>XML</acronym>。从<classname>YahooRetriever</classname>返回的<acronym>XML</acronym>被传给<classname>YahooParser</classname>的<methodname>parse()</methodname>方法，后者继而又返回一个<classname>Weather</classname>对象。之后这个<classname>Weather</classname>对象被<classname>WeatherFormatter</classname>格式化成一个像样的<classname>String</classname>。</para>
  </section>

  <section>
    <title>simple-webapp 模块</title>

    <para><varname>simple-webapp</varname>模块是在<varname>simple-parent</varname>项目中引用的第二个子模块。这个web项目依赖于<varname>simple-weather</varname>模块，并且包含了一些用来展示从Yahoo!
    Weather服务查询到的结果的servlet。</para>

    <example>
      <title>simple-webapp 模块的 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-servlet_2.4_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.mavenbook.ch06&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para><varname>simple-weather</varname>模块定义了一个十分简单的servlet，它从HTTP请求读取一个邮政编码，调用<xref
    linkend="multimodule-weather-service" />中展示的<classname>WeatherService</classname>，然后将结果打印至HTTP响应的<classname>Writer</classname>。</para>

    <example>
      <title>simple-webapp 的 WeatherServlet</title>

      <programlisting language="java">package org.sonatype.mavenbook.web;

import org.sonatype.mavenbook.weather.WeatherService;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class WeatherServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws ServletException, IOException {
        String zip = request.getParameter("zip" );
        WeatherService weatherService = new WeatherService();
        PrintWriter out = response.getWriter();
        try {
            out.println( weatherService.retrieveForecast( zip ) );
        } catch( Exception e ) {
            out.println( "Error Retrieving Forecast: " + e.getMessage() );
        }
        out.flush();
        out.close();
    }
}</programlisting>
    </example>

    <para>在<classname>WeatherServlet</classname>中，我们初始化了一个在<varname>simple-weather</varname>中定义的<classname>WeatherService</classname>类的实例。在请求参数中提供的邮政编码被传给<methodname>retrieveForecast()</methodname>方法，并且返回结果被打印至HTTP响应的<classname>Writer</classname>。</para>

    <para>最后，<filename>src/main/webapp/WEB-INF</filename>目录下的<filename>web.xml</filename>将所有这一切绑在一起。<filename>web.xml</filename>中的<sgmltag>servlet</sgmltag>和<sgmltag>servlet-mapping</sgmltag>元素将路径<filename>/weather</filename>匹配至<classname>WeatherServlet</classname>。</para>

    <example>
      <title>simple-webapp 的 web.xml</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.WeatherServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;weather&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/weather&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</programlisting>
    </example>
  </section>

  <section>
    <title>构建这个多模块项目</title>

    <para>既然<varname>simple-weather</varname>项目包含了所有与Yahoo!
    Weather服务交互的代码，以及<varname>simple-webapp</varname>项目包含了一个简单的servlet，是时间将这个应用编译并打包成一个<acronym>WAR</acronym>文件了。为此，你会想要以合适的顺序编译并安装这两个项目；以为<varname>simple-webapp</varname>依赖于<varname>simple-weather</varname>，<varname>simple-weather</varname>的<acronym>JAR</acronym>需要在<varname>simple-webapp</varname>项目被编译之前就被创建好。为此，你需要从<varname>simple-parent</varname>项目运行<command>mvn
    clean install</command>命令。</para>

    <screen>~/examples/ch06/simple-parent$ <command>mvn clean install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Simple Parent Project
[INFO]   simple-weather
[INFO]   simple-webapp Maven Webapp
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-weather
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-weather-1.0.jar to simple-weather-1.0.jar
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [clean, install]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [install:install]
[INFO] Installing simple-webapp.war to simple-webapp-1.0.war
[INFO] 
[INFO] ----------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ----------------------------------------------------------------------
[INFO] Simple Parent Project ............................... SUCCESS [3.041s]
[INFO] simple-weather ...................................... SUCCESS [4.802s]
[INFO] simple-webapp Maven Webapp .......................... SUCCESS [3.065s]
[INFO] ----------------------------------------------------------------------
</screen>

    <para>当Maven执行一个带有子模块的项目的时候，Maven首先载入父<acronym>POM</acronym>，然后定位所有的子模块<acronym>POM</acronym>。Maven然后将所有这些项目的POM放入到一个称为Maven
    反应堆（Reactor）的东西中，由它负责分析模块之间的依赖关系。这个反应堆处理组件的排序，以确保相互独立的模块能以适当的顺序被编译和安装。</para>

    <note>
      <para>除非需要做更改，反应堆一直维持定义在POM中的模块的顺序。为此一个有帮助的思维模型是，那些依赖于兄弟项目的项目在列表中被“向下按”，直到依赖顺序被满足。在很少的情况下，重新安排你构建的模块顺序可能很方便——例如你想要一个频繁的不稳定的模块接近构建的开端。</para>
    </note>

    <para>一旦反应堆解决了项目构建的顺序，Maven就会在多模块构建中为每个模块执行特定的目标。本例中，你能看到Maven在<varname>simple-webapp</varname>之前构建了<varname>simple-weather</varname>，为每个子模块执行了<command>mvn
    clean install</command>。</para>

    <note>
      <para>当你在命令行运行Maven的时候你经常会在任何其它生命周期阶段前指定<varname>clean</varname>生命周期阶段。当你指定<varname>clean</varname>，你就确认了在编译和打包一个应用之前，Maven会移除旧的输出。运行<varname>clean</varname>不是必要的，但这是一个确保你正执行“干净构建”的十分有用的预防措施。</para>
    </note>
  </section>

  <section>
    <title>运行Web应用</title>

    <para>一旦这个多模块项目已经通过从父项目<varname>simple-project</varname>执行<command>mvn
    clean
    install</command>行安装好了，你可以切换目录至<varname>simple-webapp</varname>项目，然后运行Jetty插件的Run目标。</para>

    <screen>~/examples/ch06/simple-parent/simple-webapp $ <command>mvn jetty:run</command>
[INFO] ----------------------------------------------------------------------
[INFO] Building simple-webapp Maven Webapp
[INFO]    task-segment: [jetty:run]
[INFO] ----------------------------------------------------------------------
[...]
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: simple-webapp Maven Webapp
[...]
[INFO] Webapp directory = ~/examples/ch06/simple-parent/\
                          simple-webapp/src/main/webapp
[INFO] Starting jetty 6.1.6rc1 ...
2007-11-18 1:58:26.980::INFO:  jetty-6.1.6rc1
2007-11-18 1:58:26.125::INFO:  No Transaction manager found
2007-11-18 1:58:27.633::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>Jetty启动之后，在浏览器载入<ulink
    url="http://localhost:8080/simple-webapp/weather?zip=01201">http://localhost:8080/simple-webapp/weather?zip=01201</ulink>，你应该看到格式化的天气输出。</para>
  </section>
</chapter>
