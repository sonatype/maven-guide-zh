<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="optimizing">
  <title>优化和重构POM</title>

  <section id="multimodule-web-optimizing-intro">
    <title>简介</title>

    <para>在<xref linkend="multimodule-web-spring" />中，我们展示了很多Maven
    POM文件结合起来生成一个功能齐全的多模块构建。虽然那一章的样例想要表现一个真实的应用——与数据库交互，与web服务交互，本身又暴露两个接口：一个web应用，还有一个命令行；但这毕竟是我们杜撰出来的样例。要表现一个真实项目的复杂度可远远超出了你正阅读的本书的能力范围。真实生活中的项目往往经历了很多年的发展，由很多关注点不同的不同组的开发者维护。现实项目中，你通常会评价由其它人所做的决定或者设计。本章，我们回头看一下<xref
    linkend="part-example" />中的样例，问问我们自己，基于我们对Maven的了解，能否对该样例做更合理的优化。Maven很强大，能根据你的需要变得很简单或者很复杂。因此，通常完成同样一个任务有很多种方法，而且通常没有一个“最正确”的方式来配置你的Maven项目。</para>

    <para>别误解最后一句话，认为它批准你可以要求Maven做一些本非它设计目的的事情。虽然Maven允许多样的方式，但当然也有“一种Maven的方式”，如此使用Maven你将能够有更高的生产效率，因为Maven本身就是被设计成这么用的。本章要做的就是传达一些能在已有项目上进行的优化手段。为什么我们不在一开始就介绍一个优化的<acronym>POM</acronym>呢？为教育而设计的<acronym>POM</acronym>与为了效率而设计的<acronym>POM</acronym>有着不同的需求。虽然在你的<filename>~/.m2/settings.xml</filename>中定义一些设置比在<filename>pom.xml</filename>中声明一个profile简单得多，但写书及读书主要的还是一步一步来，确保没有在你没准备的好情况下就介绍新的概念。在<xref
    linkend="part-example" />中，我们也花力气避免让太多的信息淹没读者，这样，我们就跳过了一些很重要的概念，如将在本章介绍的<sgmltag>dependencyManagement</sgmltag>。</para>

    <para>在<xref
    linkend="part-example" />中有一些例子，本书的作者通过捷径掩盖了一些重要的细节，以带你关注那些特定章节的重点。你学习了如何创建一个Maven项目，不用去辛苦的读完几百页的所有原理介绍，就能编译并安装它。这么做是因为我们相信对于新的Maven用户来说，快速的呈现结果比在一个持续过长的故事中迂回更重要。在你开始使用Maven之后，你应该知道如何分析项目和的<acronym>POM</acronym>。本章，我们回头看看<xref
    linkend="multimodule-web-spring" />中所留下的样例。</para>
  </section>

  <section>
    <title>POM清理</title>

    <para>优化一个多模块项目的<acronym>POM</acronym>最好通过几步来做，因为我们需要关注很多区域。总的来说，我们是寻找一个<acronym>POM</acronym>中的重复，或者多个兄弟<acronym>POM</acronym>中的重复。当你开始一个项目，或者项目进化得很快，有一些依赖和插件的重复是可以接受的，但随着项目的成熟以及模块的增多，你会需要花一些时间来重构共同的依赖和配置点。随着项目的变大，使你的<acronym>POM</acronym>更高效能很大程度的帮助你管理复杂度。不管什么时候遇到一些重复的信息片段，通常都有更好的配置方式。</para>
  </section>

  <section>
    <title>优化依赖</title>

    <para>如果你仔细看一下<xref
    linkend="multimodule-web-spring" />中创建的不同<acronym>POM</acronym>，就会注意到几种重复模式。我们能看到的第一种模式是：一些依赖如<varname>spring</varname>和<varname>hibernate-annotations</varname>在多个模块中被声明。每个hibernate依赖都重复排除了<package>javax.transaction</package>。第二种重复模式是：有一些依赖是关联的，共享同样的版本。这种情况通常是因为某个项目的发布版本中包含了多个紧密关联的组件。例如，看一下依赖<varname>hibernate-annotations</varname>和<varname>hibernate-commons-annotations</varname>，两者的版本都是3.3.0.ga，而且我们可以预料这两个依赖的版本只会一起向前改变。<varname>hibernate-annotations</varname>和<varname>hibernate-commons-annotations</varname>都是JBoss发布的同一个项目的组件，当有新的版本发布的时候，两个依赖都会改变。最后的重复模式是：兄弟模块依赖和兄弟模块版本的重复。Maven提供的简单机制能让你将所有这些依赖重构到一个父<acronym>POM</acronym>。</para>

    <para>就像你项目的源码一样，任何时候你在<acronym>POM</acronym>中有重复，你就开启了通往麻烦之路的大门。重复依赖声明使得很难保证一个大项目中的版本一致性。当你只有两个或者三个模块的时候，可能这不是一个大问题，但当你的组织正使用一个大型的，多模块Maven构建来管理分布于很多部门的数百个组件，一个依赖间的版本不匹配能够造成混乱。项目中一个对于名为<acronym>ASM</acronym>的字节码操作包的依赖版本不一致，即使处于项目层次的三层以下，如果该模块被依赖，还是可以影响到由另一个完全不同的开发组维护的web应用。单元测试会通过因为它们是基于一个版本的依赖运行的，但产品可能会灾难性的失败，原因是包（比如这里是war）里存在有不同版本的类库。如果你拥有数十个项目使用比如Hibernate这样的东西，每个项目重复那些依赖和排除配置，那么有人搞坏构建的平均发生时间就会很短。由于你的Maven项目变得很复杂，依赖列表也会增大，你需要在父<acronym>POM</acronym>中巩固版本和依赖声明。</para>

    <para>兄弟模块版本的重复可以造成一个特殊的令人讨厌的问题，该问题不是直接由Maven造成的，只有在你多次遇到这个问题之后你才会有认识。如果你使用Maven
    Release插件来运行你的发布，所有这些兄弟依赖版本都会被自动更新，因此维护它们就不是什么问题。如果<varname>simple-web</varname>版本<varname>1.3-SNAPSHOT</varname>依赖于<varname>simple-persist</varname>版本<varname>1.3-SNAPSHOT</varname>，并且你正执行一次对于两个项目的版本<varname>1.3</varname>发布，Maven
    Release插件很聪明，能够自动更改整个多模块项目中的所有<acronym>POM</acronym>。使用Realse插件来运行发布能够自动将你构建的所有版本增加到<varname>1.4-SNAPSHOT</varname>，并且release插件会将代码变更提交至代码库。发布一个大型的多模块项目会变得更简单，直到……</para>

    <para>当开发人员将更改合并到<acronym>POM</acronym>中并影响了一个正进行的版本发布的时候，问题就产生了。通常一个开发人员合并更改并偶然的错误处理了对于兄弟依赖的冲突，不注意的回退到了前一个发布的版本。由于同一个依赖的连续版本通常是相互兼容的，当开发人员构建的时候，问题不会出现，甚至暂时在持续构建系统也不会发现。想像一下一个十分复杂的构建，主干上都是<varname>1.4-SNAPSHOT</varname>的组件，现在有一个开发人员A，将项目层次深处的组件A更新至依赖于组件B的<varname>1.3-SNAPSHOT</varname>版本。虽然大部分开发者都使用<varname>1.4-SNAPSHOT</varname>了，如果组件B的<varname>1.3-SNAPSHOT</varname>和<varname>1.4-SNAPSHOT</varname>相互兼容的话，该构建还是会成功。Maven会继续使用从开发者本地仓库获取的组件B的<varname>1.3-SNAPSHOT</varname>版本构建该项目。所有事情开起来都很流畅，项目构建，持续集成构建都没问题，有人可能有一个关于组件B的诡异的bug，我们也暂时将其认为是一个小问题记下来，然后继续下面的事情。</para>

    <para>有个人，让我们称其为马虎先生，在组件A中有一个合并冲突，然后错误的将组件A对于组件B的依赖设为了<varname>1.3-SNAPSHOT</varname>，而项目的其它部分继续向前推进。一堆开发人员试图修复组件B的bug，诡异的是他们在产品环境中看不到bug被修复了。偶然间有人看了下组件A然后意识到这个依赖指向了一个错误的版本。幸运的是，这个bug还没有大到要消耗很多钱或时间，但是马虎先生感到自己十分愚蠢，由于这次的兄弟依赖关系混乱问题，人们也没以前那么信任他了。（还好，马虎先生意识到这是一个用户行为错误而非Maven的错，但可能它会写一个糟糕的博客去无休止的抱怨Maven来使自己好受一点。）</para>

    <para>幸运的是，只要你做一些微小的更改，依赖重复和兄弟依赖不匹配问题就能简单的预防。我们要做的第一件事是找出所有被用于一个以上模块的依赖，然后将其向上移到父<acronym>POM</acronym>的<sgmltag>dependencyManagement</sgmltag>片段。我们先不管兄弟依赖。<varname>simple-parent</varname>的<acronym>POM</acronym>现在包含内容如下：</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;3.3.0.ga&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>在这些依赖配置被上移之后，我们需要为每个<acronym>POM</acronym>移除这些依赖的版本，否则它们会覆盖定义在父项目中的<sgmltag>dependencyManagement</sgmltag>。这里我只是简单展示一下<varname>simple-model</varname>：</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>下一步我们应该做的是修复<varname>hibernate-annotations</varname>和<varname>hibernate-commons-annotations</varname>的版本重复问题，因为这两个版本应该是一致的，我们通过创建一个称为<varname>hibernate-annotations-version</varname>的属性。结果<varname>simple-parent</varname>的片段看起来这样：</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
  &lt;/properties&gt;

  &lt;dependencyManagement&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencyManagement&gt;
  ...
&lt;/project</programlisting>

    <para>我们需要处理的最后一个问题是兄弟依赖。一种方案是像其它依赖一样将它们移到父项目的<sgmltag>dependencyManagement</sgmltag>中，在最顶层的父项目中定义所有兄弟项目的版本。这样做当然是可以的，但我们也可以使用内建属性<varname>${project.groupId}</varname>和<varname>${project.version}</varname>来解决这个版本问题。由于它们是兄弟依赖，在父项目中枚举它们也不能获得更多的价值，因此我们依赖于内置的<varname>${project.version}</varname>属性。由于我们都共享一个共同的组，因此，通过使用内置的<varname>${project.groupId}</varname>属性引用当前<acronym>POM</acronym>的组，我们能够提前保证这些声明是正确的。<varname>simple-command</varname>依赖片段现在变成了这样：</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>总结一下我们为了降低依赖重复而完成的两项优化：</para>

    <variablelist>
      <varlistentry>
        <term>上移共同的依赖至<sgmltag>dependencyManagement</sgmltag></term>

        <listitem>
          <para>如果多于一个项目依赖于一个特定的依赖，你可以在<sgmltag>dependencyManagement</sgmltag>中列出这个依赖。父<acronym>POM</acronym>包含一个版本和一组排除配置，所有的子<acronym>POM</acronym>需要使用<varname>groupId</varname>和<varname>artifactId</varname>引用这个依赖。如果依赖已经在<sgmltag>dependencyManagement</sgmltag>中列出，子项目可以忽略版本和排除配置。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>为兄弟项目使用内置的项目version和groupId</term>

        <listitem>
          <para>使用<varname>{project.version}</varname>和<varname>${project.groupId}</varname>来引用兄弟项目。兄弟项目基本上一直共享同样的groupId，也基本上一直共享同样的发布版本。使用<varname>${project.version}</varname>可以帮你避免前面提到的兄弟版本不一致问题。</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>优化插件</title>

    <para>如果我们看一下不同的插件配置，就能看到<acronym>HSQLDB</acronym>依赖在很多地方有重复。不幸的是，<sgmltag>dependencyManagement</sgmltag>不适用于插件依赖，但我们仍然可以使用属性来巩固版本。大部分复杂的Maven多模块项目倾向于在顶层<acronym>POM</acronym>中定义所有的版本。这个顶层<acronym>POM</acronym>就成了影响整个项目的更改焦点。将版本号看成是Java类中的字符串字面量，如果你经常重复一个字面量，你可能会将它定义为一个变量，当它需要变化的时候，你就只需要在一个地方更改它。将<acronym>HSQLDB</acronym>的版本集中到顶层的<acronym>POM</acronym>中，就产生了如下的属性元素。</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  ...
&lt;/project&gt;</programlisting>

    <para>下一件我们要注意的事情是<varname>hibernate3-maven-plugin</varname>配置在<varname>simple-webapp</varname>和<varname>simple-command</varname>模块中重复了。我们可以在顶层<acronym>POM</acronym>中管理这个插件配置，就像我们在顶层<acronym>POM</acronym>中使用<sgmltag>dependencyManagement</sgmltag>片段管理依赖一样。为此，我们要使用元素顶层<acronym>POM</acronym>
    build元素下的<sgmltag>pluginManagement</sgmltag>元素。</para>

    <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
  </section>

  <section>
    <title>使用Maven Dependency插件进行优化</title>

    <para>在大型的项目中，随着依赖数目的增加，一些额外的依赖会悄悄进入项目的POM中。而当依赖改变的时候，你又常常会留下一些不再被使用的依赖，而又有时候，你会忘记显示声明你需要的类库依赖。由于Maven
    2.x会在编译范围引入传递性依赖，你的项目可能编译没问题，但在产品阶段不能运行。考虑这种情况，当一个项目使用一些被广泛使用的类库如Jakarta
    Commons
    Beanutils。你没有显式的声明对Beanutils的依赖，你的项目依赖于一个项目如Hibernate，而后者有对Beanutils的传递性依赖。你的项目可能编译成功并很好的运行，但当你将Hibernate升级到一个新版本，而它不再依赖于Beantuils，你就会遇到编译和运行错误了，这种情况直到项目不能编译才能显现。同时，由于你没有显式的列出依赖的版本，Maven不能帮你解析可能出现的版本冲突问题。</para>

    <para>一个好的经验方法是，总是为你代码引用的类显式声明依赖。如果你要引入Commons Beanutils类，你应该声明一个对于Commons
    Beanutils的直接依赖。幸运的是，通过字节码分析，Maven
    Dependency插件能够帮助你发现对于依赖的直接引用。使用我们之前优化过的新的POM，让我们看一下是否会有错误突然出现。</para>

    <screen>$ <command>mvn dependency:analyze</command>
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   Chapter 8 Simple Parent Project
[INFO]   Chapter 8 Simple Object Model
[INFO]   Chapter 8 Simple Weather API
[INFO]   Chapter 8 Simple Persistence API
[INFO]   Chapter 8 Simple Command Line Tool
[INFO]   Chapter 8 Simple Web Application
[INFO]   Chapter 8 Parent Project
[INFO] Searching repository for plugin with prefix: 'dependency'.

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    javax.persistence:persistence-api:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[WARNING]    org.hibernate:hibernate:jar:3.2.5.ga:compile
[WARNING]    junit:junit:jar:3.8.1:test

...

[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Web Application
[INFO]    task-segment: [dependency:analyze]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing dependency:analyze
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] No sources to compile
[INFO] [dependency:analyze]
[WARNING] Used undeclared dependencies found:
[WARNING]    org.sonatype.mavenbook.ch08:simple-model:jar:1.0:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.apache.velocity:velocity:jar:1.5:compile
[WARNING]    javax.servlet:jstl:jar:1.1.2:compile
[WARNING]    taglibs:standard:jar:1.1.2:compile
[WARNING]    junit:junit:jar:3.8.1:test</screen>

    <para>在上面截取的输出中，我们能看到运行<varname>dependency:analyze</varname>目标的结果。该目标分析这个项目，查看是否有直接依赖，或者一些引用了但不是直接声明的依赖。在<varname>simple-model</varname>项目中，dependency插件指出有一个对于<varname>javax.persistence:persistence-api</varname>的“使用了但为未声明的依赖”。为了进一步调查，到<varname>simple-model</varname>目录下运行<varname>dependency:tree</varname>目标，该目标会列出项目中所有的直接和传递性依赖。</para>

    <screen>$ <command>mvn dependency:tree</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Chapter 8 Simple Object Model
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.sonatype.mavenbook.ch08:simple-model:jar:1.0
[INFO] +- org.hibernate:hibernate-annotations:jar:3.3.0.ga:compile
[INFO] |  \- javax.persistence:persistence-api:jar:1.0:compile
[INFO] +- org.hibernate:hibernate:jar:3.2.5.ga:compile
[INFO] |  +- net.sf.ehcache:ehcache:jar:1.2.3:compile
[INFO] |  +- commons-logging:commons-logging:jar:1.0.4:compile
[INFO] |  +- asm:asm-attrs:jar:1.5.3:compile
[INFO] |  +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  +- antlr:antlr:jar:2.7.6:compile
[INFO] |  +- cglib:cglib:jar:2.1_3:compile
[INFO] |  +- asm:asm:jar:1.5.3:compile
[INFO] |  \- commons-collections:commons-collections:jar:2.1.1:compile
[INFO] \- junit:junit:jar:3.8.1:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>从上面的输出我们可以看到<varname>persistence-api</varname>依赖来自于<varname>hibernate</varname>。对该模块源码的粗略扫描会展现很多的<varname>javax.persistence</varname>的import语句，这让我们确信直接引用了这个依赖。简单的修复手段是添加对这个依赖的直接引用。该例中，我们将依赖版本放到<varname>simple-parent</varname>的<sgmltag>dependencyManagement</sgmltag>片段中，因为这个依赖链接到Hibernate，而Hiberate的版本是在这里声明的。最终你会想要升级的项目的HIbernate版本，在Hibernate依赖旁边列出<varname>persistence-api</varname>依赖的版本能让你在将来升级父<acronym>POM</acronym>中的Hibernate版本的时候，更明显的看到两者关联。</para>

    <para>如果你查看<varname>simple-web</varname>模块的<varname>dependency:analyze</varname>输出，你会看到这里我们也需要添加对<varname>simple-model</varname>的直接依赖。<varname>simple-webapp</varname>中的代码直接引用<varname>simple-model</varname>中的模型对象，而现在<varname>simple-model</varname>是通过<varname>simple-persist</varname>的传递性依赖暴露给<varname>simple-webapp</varname>的。既然兄弟依赖共享同样的<varname>version</varname>和<varname>groupId</varname>，因此这个依赖可以在<varname>simple-webapp</varname>的<filename>pom.xml</filename>中用<varname>${project.groupId}</varname>和<varname>${project.version}</varname>定义。</para>

    <para>Maven
    Dependency插件是如何发现这些问题的呢？<varname>dependency:analyze</varname>如何知道什么类和依赖是你项目的字节码直接引用的？Dependency插件使用<ulink
    url="http://asm.objectweb.org/">ObjectWeb
    ASM</ulink>工具包来分析字节码。Dependency插件使用ASM来遍历当前项目中的所有类，构建一个所有其它被引用的类的列表。之后它遍历所有的依赖，直接依赖和传递性依赖，然后标记所有在直接依赖中发现的类。任何没有在直接依赖中找到的类会在传递性依赖中被发现，然后，“使用的，但未声明的依赖”列表就产生了。</para>

    <para>相反的，未使用的，但声明的依赖列表就相对比较难验证了，而且该列表没有“使用的，但未声明的依赖”有用。一种情况，一些依赖只在运行时或测试时使用，它们不会在字节码中被发现。你能在输出中很明显的看到它们的存在，例如，JUnit就在这个列表中，但是它是需要的，因为它被用来做单元测试。你也会在simple-web模块中注意到Velocity和Servlet
    API依赖出现在这个列表中，它们也是需要的，因为，虽然项目的类中没有任何对这些依赖的直接引用，但在运行的时候它们是必要的。</para>

    <para>小心移除那些未使用，但声明的依赖，除非你拥有很好的测试覆盖率，否则你很可能引入了一个运行时错误。字节码优化还会突然出现更险恶的问题，例如，编译器可以合法的替换常量的值，优化并移除引用。此时移除依赖会造成编译错误，但是工具却分析显示该依赖未被使用。将来的Maven
    Dependency插件版本会提供个更好的技术来检测或忽略这些类型的问题。</para>

    <para>你应该定期的使用<varname>dependency:analyze</varname>工具来检测你项目中的这些普遍错误。你可以配置它，当一些条件被发现的时候，让构建失败，它也能够用来生成报告。</para>
  </section>

  <section>
    <title>最终的POM</title>

    <para>作为一个最后的总结，最终的<acronym>POM</acronym>文件被列出以作为本章的参考。这是<varname>simple-parent</varname>的顶层<acronym>POM</acronym>.</para>

    <example>
      <title>simple-parent 的最终 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
  &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;Chapter 8 Simple Parent Project&lt;/name&gt;
 
  &lt;modules&gt;
    &lt;module&gt;simple-command&lt;/module&gt;
    &lt;module&gt;simple-model&lt;/module&gt;
    &lt;module&gt;simple-weather&lt;/module&gt;
    &lt;module&gt;simple-persist&lt;/module&gt;
    &lt;module&gt;simple-webapp&lt;/module&gt;
  &lt;/modules&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;source&gt;1.5&lt;/source&gt;
            &lt;target&gt;1.5&lt;/target&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;hibernate3-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.1&lt;/version&gt;
          &lt;configuration&gt;
            &lt;components&gt;
              &lt;component&gt;
                &lt;name&gt;hbm2ddl&lt;/name&gt;
                &lt;implementation&gt;annotationconfiguration&lt;/implementation&gt;
              &lt;/component&gt;
            &lt;/components&gt;
          &lt;/configuration&gt;
          &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;hsqldb&lt;/groupId&gt;
              &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
              &lt;version&gt;${hsqldb.version}&lt;/version&gt;
            &lt;/dependency&gt;
          &lt;/dependencies&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/pluginManagement&gt; 
  &lt;/build&gt;

  &lt;properties&gt;
    &lt;hibernate.annotations.version&gt;3.3.0.ga&lt;/hibernate.annotations.version&gt;
    &lt;hsqldb.version&gt;1.8.0.7&lt;/hsqldb.version&gt;
  &lt;/properties&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring&lt;/artifactId&gt;
        &lt;version&gt;2.0.7&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
        &lt;artifactId&gt;velocity&lt;/artifactId&gt;
        &lt;version&gt;1.5&lt;/version&gt;
      &lt;/dependency&gt;  
      &lt;dependency&gt;
        &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
        &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
        &lt;version&gt;1.0&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.annotations.version}&lt;/version&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
        &lt;version&gt;3.2.5.ga&lt;/version&gt;
        &lt;exclusions&gt;
          &lt;exclusion&gt;
            &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
            &lt;artifactId&gt;jta&lt;/artifactId&gt;
          &lt;/exclusion&gt;
        &lt;/exclusions&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;      </programlisting>
    </example>

    <para>下面是该工具的命令行版本，<varname>simple-command</varname>的最终<acronym>POM</acronym>。</para>

    <example>
      <title>simple-command 的最终 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-command&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Command Line Tool&lt;/name&gt;

  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;archive&gt;
              &lt;manifest&gt;
                &lt;mainClass&gt;org.sonatype.mavenbook.weather.Main&lt;/mainClass&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
              &lt;/manifest&gt;
            &lt;/archive&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;descriptorRefs&gt;
              &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
            &lt;/descriptorRefs&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;    
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>接下来是<varname>simple-model</varname>项目的<acronym>POM</acronym>。<varname>simple-model</varname>包含了所有应用的模型对象。</para>

    <example>
      <title>simple-model 的最终 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Object Model&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.persistence&lt;/groupId&gt;
      &lt;artifactId&gt;persistence-api&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>下一个<acronym>POM</acronym>是<varname>simple-persist</varname>项目的<acronym>POM</acronym>。<varname>simple-persist</varname>项目包含了使用Hibernate实现的所有持久化逻辑。</para>

    <example>
      <title>simple-persist 的最终 POM</title>

      <programlisting format="linespecific" langauge="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Persistence API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate-commons-annotations&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-jta_1.1_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para><varname>simple-weather</varname>项目包含了解析Yahoo! Weather
    <acronym>RSS</acronym>信息源的所有逻辑。该项目依赖于<varname>simple-model</varname>项目。</para>

    <example>
      <title>simple-weather 的最终 POM</title>

      <programlisting format="linespecific" language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;name&gt;Chapter 8 Simple Weather API&lt;/name&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;log4j&lt;/groupId&gt;
      &lt;artifactId&gt;log4j&lt;/artifactId&gt;
      &lt;version&gt;1.2.14&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;dom4j&lt;/groupId&gt;
      &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
      &lt;version&gt;1.6.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;jaxen&lt;/groupId&gt;
      &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
      &lt;version&gt;1.3.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>最后，<varname>simple-webapp</varname>项目与<varname>simple-weather</varname>项目生成的类库交互，同时也将获得的天气预报数据存储至<acronym>HSQLDB</acronym>数据库。</para>

    <example>
      <title>simple-webapp 的最终 POM</title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.sonatype.mavenbook.ch08&lt;/groupId&gt;
    &lt;artifactId&gt;simple-parent&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/parent&gt;

  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;Chapter 8 Simple Web Application&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-servlet_2.4_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-model&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-weather&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;simple-persist&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;taglibs&lt;/groupId&gt;
      &lt;artifactId&gt;standard&lt;/artifactId&gt;
      &lt;version&gt;1.1.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
      &lt;artifactId&gt;velocity&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.9&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;${hsqldb.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>
  </section>

  <section>
    <title>小结</title>

    <para>本章为你展现了一些改进控制你项目依赖和插件的技术，以使你未来的构建维护变得轻松。我们推荐定期的用这种方式复查你的构建以确保重复以及相应的潜在问题能最小化。随着项目的成熟，新的依赖难免被引入，你可能发现之前在一个地方使用的一个依赖现在在10个地方使用了，需要将它上移。使用和未使用的依赖列表不停的在变化，它们也能够使用Maven
    Dependency插件轻松的清理。</para>
  </section>
</chapter>
