<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="installation">
  <title>安装和运行Maven</title>

  <para>本章包含了在许多不同平台上安装Maven的详细指令。我们会介绍得尽可能详细以减少安装过程中可能出现的问题，而不去假设你已经熟悉安装软件和设置环境变量。本章的唯一前提是你已经安装了恰当的<acronym>JDK</acronym>。如果你仅仅对安装感兴趣，读完<xref
  linkend="section-maven-download" xrefstyle="select: title" />和<xref
  linkend="section-maven-install"
  xrefstyle="select: title" />后，你就可以直接去看本书其它的部分。如果你对Maven安装的细节感兴趣，本章将会给你提供一个简要的介绍，以及Apache软件许可证，版本2.0的介绍。</para>

  <section id="section-installation-java">
    <title>验证你的Java安装</title>

    <para>尽管Maven可以运行在Java 1.4上，但本书假设你在至少Java
    5上运行。尽管使用你操作系统上最新的稳定版本的<acronym>JDK</acronym>。本书的例子在Java 5或者Java
    6上都能运行。</para>

    <para><screen><prompt moreinfo="none">% </prompt><command moreinfo="none">java -version</command>
java version "1.6.0_02"
Java(TM) SE Runtime Environment (build 1.6.0_02-b06)
Java HotSpot(TM) Client VM (build 1.6.0_02-b06, mixed mode, sharing)</screen></para>

    <para>Maven能在所有的验证过的Java<superscript>TM</superscript>
    兼容的JDK上工作，也包括一些未被验证JDK实现。本书的所有样例是基于Sun官方的JDK编写和测试的。如果你正在使用Linux，你可能需要自己下载Sun的<acronym>JDK</acronym>，并且确定JDK的版本（运行
    <command>java -version</command>）。目前Sun已经将Java开源，因此这种情况将来有希望得到改进，将来很有可能Sun
    <acronym>JRE</acronym>和<acronym>JDK</acronym>会被默认安装在Linux上。但直到现在为止，你还是需要自己去下载。</para>
  </section>

  <section id="section-maven-download">
    <title>下载Maven</title>

    <para>你可以从Apache Maven项目的web站点下载Maven：<ulink
    url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

    <para>当你下载Maven的时候，确认你选择了最新版本的Apache Maven。本书书写的时候最新版本是Maven 2.0.9
    。如果你不熟悉Apache软件许可证，你需要在使用产品之前去熟悉该许可证的条款。更多的关于Apache软件许可证的信息可以<xref
    linkend="section-installation-license" />找到。</para>
  </section>

  <section id="section-maven-install">
    <title>安装Maven</title>

    <para>操作系统之间有很大的区别，像Mac <acronym>OSX</acronym>
    和微软的Windows，而且不同版本Windows之间也有微妙的差别。幸运的是，在所有操作系统上安装Maven的过程，相对来说还是比较直接的。下面的小节概括了在许多操作系统上安装Maven的最佳实践。</para>

    <section id="section-installation-maven-osx">
      <title>在Mac OSX上安装Maven</title>

      <para>你可以从<ulink
      url="http://maven.apache.org/download.html"><uri>http://maven.apache.org/download.html</uri></ulink>下载Maven的二进制版本。下载最新的，下载格式最方便你使用的版本。找个地方存放它，并把存档文件解开。如果你把存档文件解压到
      /usr/local/maven-2.0.9
      ；你可能会需要创建一个符号链接，那样就能更容易使用，当你升级Maven的时候也不再需要改变环境变量。</para>

      <screen>/usr/local % <command moreinfo="none">ln -s maven-2.0.9 maven
</command>/usr/local % <command>export M2_HOME=/usr/local/maven</command>
/usr/local % <command>export PATH=${M2_HOME}/bin:${PATH}</command></screen>

      <para>将Maven安装好后，你还需要做一些事情以确保它正确工作。你需要将它的 <filename
      moreinfo="none">bin</filename> 目录（该例中为 <filename
      moreinfo="none">/usr/local/maven/bin</filename>）添加到你的命令行路径下。你还需要设置
      <varname>M2_HOME</varname> 环境变量，其对应值为Maven的根目录（该例中为 <filename
      moreinfo="none">/usr/local/maven</filename>）。</para>

      <note>
        <para>在<acronym>OSX</acronym> Tiger和<acronym>OSX</acronym>
        Leopard上安装指令是相同的。有报告称Maven 2.0.6正和XCode的预览版本一起发布。如果你安装了XCode，从命令行运行
        <command>mvn</command> 检查一下它是否可用。
        XCode把Maven安装在了<filename>/usr/share/maven</filename>。我们强烈建议安装最新版本的Maven
        2.0.9，因为随着Maven 2.0.9的发布很多bug被修正了，还有很多改进。</para>
      </note>

      <para>你还需要把 <envar>M2_HOME</envar> 和 <envar>PATH</envar>
      写到一个脚本里，每次登陆的时候运行这个脚本。把下面的几行加入到 <filename>.bash_login</filename>。</para>

      <programlisting>export M2_HOME=/usr/local/maven
export PATH=${M2_HOME}/bin:${PATH}</programlisting>

      <para>一旦你把这几行加入到你的环境中，你就可以在命令行运行Maven了。</para>

      <note>
        <para>这些安装指令假设你正运行bash。</para>
      </note>
    </section>

    <section>
      <title>在Microsoft Windows上安装Maven</title>

      <para>在Windows上安装Maven和在Mac
      <acronym>OSX</acronym>上安装Maven十分类似，最主要的区别在于安装位置和设置环境变量。在这里假设Maven安装目录是
      <filename>c:\Program Files\maven-2.0.9</filename>
      ，但是，只要你设置的正确的环境变量，把Maven安装到其它目录也一样。当你把Maven解压到安装目录后，你需要设置两个环境变量——<envar>PATH</envar>和M2_<envar>M2_HOME</envar>。设置这两个环境变量，键入下面的命令：</para>

      <screen>C:\Users\tobrien &gt; <command>set M2_HOME=c:\Program Files\maven-2.0.9</command>
C:\Users\tobrien &gt; <command>set PATH=%PATH%;%M2_HOME%\bin</command></screen>

      <para>在命令行设置环境变量后，你可以在当前会话使用Maven，但是，除非你通过控制面板把它们加入系统变量，你将需要每次登陆系统的时候运行这两行命令。你应该在Microsoft
      Windows中通过控制面板修改这两个变量。<!--TODO: Document process of setting environment variables in the window control panel system dialog.--></para>
    </section>

    <section id="section-installation-maven-linux">
      <title>在Linux上安装Maven</title>

      <para>遵循<xref
      linkend="section-installation-maven-osx" />的步骤，在Linux机器上安装Maven。</para>
    </section>

    <section>
      <title>在FreeBSD或OpenBSD上安装Maven</title>

      <para>遵循<xref
      linkend="section-installation-maven-osx" />的步骤，在FreeBSD或者OpenBSD机器上安装Maven。T</para>
    </section>
  </section>

  <section id="section-installation-test-install">
    <title>验证Maven安装</title>

    <para>当Maven安装完成后，你可以检查一下它是否真得装好了，通过在命令行运行 <command>mvn
    -v</command>。如果Maven装好了，你应该能看到类似于下面的输出。</para>

    <screen>$ <command>mvn -v</command>
Maven 2.0.9</screen>

    <para>如果你看到了这样的输出，那么Maven已经成功安装了。如果你看不到，而且你的操作系统找不到 <command>mvn</command>
    命令，那么确认一下<envar>PATH</envar>和<envar>M2_HOME</envar>环境变量是否已经正确设置了。</para>
  </section>

  <section id="section-installation-details">
    <title>Maven安装细节</title>

    <para>Maven的下载文件只有大概1.5
    MiB，它能达到如此苗条的大小是因为Maven的内核被设计成根据需要从远程仓库获取插件和依赖。当你开始使用Maven，它会开始下载插件到本地仓库中，就像<xref
    linkend="section-installation-user" />所描述的那样。对此你可能比较好奇，让我们先很快的看一下Maven的安装目录是什么样子。</para>

    <screen>/usr/local/maven $ <command>ls -p1</command>
LICENSE.txt
NOTICE.txt
README.txt
bin/
boot/
conf/
lib/</screen>

    <para><filename>LICENSE.txt</filename> 包含了Apache Maven的软件许可证。<xref
    linkend="section-installation-license" />会详细描述该许可证。<filename>NOTICE.txt</filename>
    包含了一些Maven依赖的类库所需要的通告及权限。<filename>README.txt</filename>包含了一些安装指令。
    <filename>bin/</filename>目录包含了运行Maven的mvn脚本。 <filename>boot/</filename>
    目录包含了一个负责创建Maven运行所需要的类装载器的<acronym>JAR</acronym>文件(<filename>classwords-1.1.jar</filename>)。
    <filename>conf/</filename>
    目录包含了一个全局的<filename>settings.xml</filename>文件，该文件用来自定义你机器上Maven的一些行为。如果你需要自定义Maven，更通常的做法是覆写
    <filename>~/.m2</filename>目录下的<filename>settings.xml</filename>文件，每个用户都有对应的这个目录。<filename>lib/</filename>
    目录有了一个包含Maven核心的JAR文件(<filename>maven-2.0.9-uber.jar</filename>)。</para>

    <section id="section-installation-user">
      <title>用户相关配置和仓库</title>

      <para>当你不再仅仅满足于使用Maven，还想扩展它的时候，你会注意到Maven创建了一些本地的用户相关的文件，还有在你home目录的本地仓库。在<filename>~/.m2</filename>目录下有：</para>

      <variablelist>
        <varlistentry>
          <term>~/.m2/settings.xml</term>

          <listitem>
            <para>该文件包含了用户相关的认证，仓库和其它信息的配置，用来自定义Maven的行为。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>~/.m2/repository/</term>

          <listitem>
            <para>该目录是你本地的仓库。当你从远程Maven仓库下载依赖的时候，Maven在你本地仓库存储了这个依赖的一个副本。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>在Unix(和OSX)上，可以用 ~
        符号来表示你的home目录，（如<filename>~/bin</filename>表示<filename>/home/tobrien/bin</filename>）。在Windows上，我们仍然使用
        ~ 来表示你的home目录。在Windows XP上，你的home目录是 <filename>C:\Documents and
        Settings\tobrien</filename>，在Windows Vista上，你的home目录是
        <filename>C:\Users\tobrien</filename>。从现在开始，你应该能够理解这种路径表示，并翻译成你操作系统上的对应路径。</para>
      </note>
    </section>

    <section id="section-installation-upgrade">
      <title>升级Maven</title>

      <para>如果你遵循<xref lang=""
      linkend="section-installation-maven-osx" />和<xref
      linkend="section-installation-maven-linux" />，在Mac
      OSX或者Unix机器上安装了Maven。那么把Maven升级成较新的版本是很容易的事情。只要在当前版本Maven（<filename>/usr/local/maven-2.0.9</filename>）旁边安装新版本的Maven（<filename>/usr/local/maven-2.future</filename>），然后将符号链接
      <filename>/usr/local/maven</filename> 从
      <filename>/usr/local/maven-2.0.9</filename> 改成
      <filename>/usr/local/maven-2.future</filename>即可。你已经将<varname>M2_HOME</varname>环境变量指向了
      <filename>/usr/local/maven</filename>，因此你不需要更改任何环境变量。</para>

      <para> 如果你在Windows上安装了Maven，将Maven解压到 <filename>c:\Program
      Files\maven-2.future</filename>，然后更新你的<varname>M2_HOME</varname>环境变量。
      </para>
    </section>
  </section>

  <section>
    <title>获得Maven帮助</title>

    <para>虽然本书的目的是作为一本全面的参考手册，但是仍然会有一些主题我们会不小心遗漏，一些特殊情况和技巧我们也覆盖不到。Maven的核心十分简单，它所做的工作其实都交给插件了。插件太多了，以至于不可能在一本书上全部覆盖。你将会碰到一些本书没有涉及的问题，碰到这种情况，我们建议你在下面的地址去寻找答案。</para>

    <variablelist>
      <varlistentry>
        <term><ulink
        url="http://maven.apache.org">http://maven.apache.org</ulink></term>

        <listitem>
          <para>你首先应该看看这里，Maven的web站点包含了丰富的信息及文档。每个插件都有几页的文档，这里还有一系列“快速开始”的文档，它们是本书内容的十分有帮助的补充。虽然Maven站点包含了大量信息，它同时也可能让你迷惑沮丧。那里提供了一个自定义的Google搜索框，以用来搜索已有的Maven站点信息，它能比通用的Google搜索提供更好的结果。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Maven User Mailing List</term>

        <listitem>
          <para>Maven用户邮件列表是用户问问题的地方。在你问问题之前，你可以先搜索一下之前的讨论，有可能找到相关问题。问一个已经问过的问题，而不先查一下该问题是否存在了，这种形式不太好。有很多有用的邮件列表归档浏览器，我们发现Nabble最有用。你可以在这里浏览邮件列表：<ulink
          url="http://www.nabble.com/Maven---Users-f178.html">http://www.nabble.com/Maven---Users-f178.html</ulink>。你也可以按照这里的指令来加入用户邮件列表：<ulink
          url="http://maven.apache.org/mail-lists.html">http://maven.apache.org/mail-lists.html</ulink>。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><ulink
        url="http://www.sonatype.com">http://www.sonatype.com</ulink></term>

        <listitem>
          <para>Sonatype维护了一个本书的在线副本，以及其它Maven相关的指南。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>除去一些专门的Maven贡献者所做的十分优秀的工作，Maven
      web站点组织的比较糟糕，有很多不完整的，甚至有时候有些误导人的文档片段。在整个Maven社区里，插件文档的一般标准十分缺乏，一些插件的文档十分的丰富，但是另外一些连基本的使用命令都没有。通常你最好是在用户邮件列表里面去搜索下解决方案。</para>
    </note>
  </section>

  <section id="sect-help-plugin-install">
    <title>使用Maven Help插件</title>

    <para>本书中，我们将会介绍Maven插件，讲述Maven项目对象模型（<acronym>POM</acronym>）文件，settings文件，还有profile。有些时候，你需要一个工具来帮助你理解一些Maven使用的模型，以及某个插件有什么可用的目标。Maven
    Help插件能让你列出活动的Maven Profile，显示一个实际<acronym>POM</acronym>（effective
    <acronym>POM</acronym>），打印实际settings（effective
    settings），或者列出Maven插件的属性。</para>

    <note>
      <para>如果想看一下POM和插件的概念性介绍，参照第三章：一个简单的Maven项目。</para>
    </note>

    <para>Maven Help 插件有四个目标。前三个目标是—— <varname>active-profiles</varname>,
    <varname>effective-pom</varname> 和 <varname>effective-settings</varname>
    —— 描述一个特定的项目，它们必须在项目的目录下运行。 最后一个目标—— <varname>describe</varname>
    ——相对比较复杂，展示某个插件或者插件目标的相关信息。</para>

    <variablelist>
      <varlistentry>
        <term>help:active-profiles</term>

        <listitem>
          <para>列出当前构建中活动的Profile（项目的，用户的，全局的）。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-pom</term>

        <listitem>
          <para>显示当前构建的实际<acronym>POM</acronym>，包含活动的Profile。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-settings</term>

        <listitem>
          <para>打印出项目的实际settings, 包括从全局的settings和用户级别settings继承的配置。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:describe</term>

        <listitem>
          <para>描述插件的属性。它不需要在项目目录下运行。但是你必须提供你想要描述插件的 groupId 和
          artifactId。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>描述一个Maven插件</title>

      <para>一旦你开始使用Maven，你会花很多时间去试图获得Maven插件的信息：插件如何工作？配置参数是什么？目标是什么？
      你会经常使用<varname>help:describe</varname> 目标来获取这些信息。通过
      <varname>plugin</varname> 参数你可以指定你想要研究哪个插件，你可以传入插件的前缀（如
      <varname>help</varname> 插件就是 <varname>maven-help-plugin</varname>），或者可以是
      <varname>groupId:artifact[:version]</varname> ，这里 version 是可选的。比如，
      下面的命令使用 help 插件的 <varname>describe</varname> 目标来输出 Maven Help
      插件的信息。</para>

      <screen>$ <command>mvn help:describe -Dplugin=help</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to give 
    usage information.
...
</screen>

      <para>通过设置 <varname>plugin</varname> 参数来运行 <varname>describe</varname>
      目标，输出为该插件的Maven坐标，目标前缀，和该插件的一个简要介绍。尽管这些信息非常有帮助，你通常还是需要了解更多的详情。如果你想要 Help
      插件输出完整的带有参数的目标列表，只要运行带有参数 <varname>full</varname> 的
      <varname>help:describe</varname> 目标就可以了，像这样：</para>

      <screen>$ <command>mvn help:describe -Dplugin=help -Dfull</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to give usage 
    information.

Mojos:

===============================================
Goal: 'active-profiles'
===============================================
Description:

Lists the profiles which are currently active for this build.

Implementation: org.apache.maven.plugins.help.ActiveProfilesMojo
Language: java

Parameters:
-----------------------------------------------

[0] Name: output
Type: java.io.File
Required: false
Directly editable: true
Description:

This is an optional parameter for a file destination for the output of this mojo...the 
listing of active profiles per project.

-----------------------------------------------

[1] Name: projects
Type: java.util.List
Required: true
Directly editable: false
Description:

This is the list of projects currently slated to be built by Maven.

-----------------------------------------------

This mojo doesn't have any component requirements.
===============================================

... removed the other goals ...
</screen>

      <para>该选项能让你查看插件所有的目标及相关参数。但是有时候这些信息显得太多了。这时候你可以获取单个目标的信息，设置
      <varname>mojo</varname> 参数和 <varname>plugin</varname> 参数。下面的命令列出了
      Compiler 插件的 <varname>compile</varname> 目标的所有信息</para>

      <screen>$ <command>mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull</command></screen>

      <note>
        <para>什么？ Mojo ？在Maven里面， 一个插件目标也被认为是一个 “Mojo” 。</para>
      </note>
    </section>
  </section>

  <section id="section-installation-license">
    <title>关于Apache软件许可证</title>

    <para>Apache Maven 是基于 Apache 许可证2.0版 发布的。如果你想阅读该许可证，你可以查阅
    <filename>${M2_HOME}/LICENSE.txt</filename> 或者从开源发起组织的网站上查阅 <ulink
    url="http://www.opensource.org/licenses/apache2.0.php">http://www.opensource.org/licenses/apache2.0.php</ulink>。</para>

    <para>很有可能你正在阅读本书但你又不是律师。如果你想知道
    Apache许可证2.0版意味着什么，Apache软件基金会收集了一个很有帮助的，关于许可证的常见问题解答（FAQ）：<ulink
    url="http://www.apache.org/foundation/licence-FAQ.html">http://www.apache.org/foundation/licence-FAQ.html</ulink>。这里是对问题“我不是律师，所有这些是什么意思？”的回答。</para>

    <para><blockquote>
        <para><emphasis>它允许你：</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>• 自由的下载和使用 Apache 软件，无论是软件的整体还是部分，
            也无论是出于个人目的，公司内部目的，还是商业目的。</para>
          </listitem>

          <listitem>
            <para>• 在你创建的类库或分发版本里使用 Apache 软件。</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>它禁止你：</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>在没有正当的权限下重新分发任何源于 Apache 的软件或软件片段。</para>
          </listitem>

          <listitem>
            <para>以任何可能声明或暗示基金会认可你的分发版本的形式下使用 Apache 软件基金会拥有的标志。</para>
          </listitem>

          <listitem>
            <para>以任何可能声明或暗示你创建了 Apache 软件的形式下使用 Apache 软件基金会拥有的标志。</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>它要求你：</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>在你重新分发的包含 Apache 软件的软件里，包含一份该许可证的副本。</para>
          </listitem>

          <listitem>
            <para>对于任何包含 Apache 软件的分发版本，提供给 Apache软件基金会清楚的权限。</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>它不要求你：</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>在任何你再次发布的包含Apache软件的版本里，包含Apache软件本身源代码，或者你做的改动的源码。</para>
          </listitem>

          <listitem>
            <para>提交你对软件的改动至 Apache 软件基金会（虽然我们鼓励这种反馈）。</para>
          </listitem>
        </itemizedlist>
      </blockquote></para>
  </section>
</chapter>
