<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="site-generation">
  <title>站点生成</title>

  <section>
    <title>简介</title>

    <para>成功的软件应用程序很少是由单人团队开发的。在讨论任何一个值得我们写下一笔的软件的时候，这个软件背后通常有一个协作的开发者团队，它们大小不一，可能只是一个很少人组成的小型团队，也可能由一个大型分布式环境中数百数千的程序员组成。大部分开源项目（如Maven）成败的原因之一就是它们是否为广泛分布的潜在用户和开发者提供了良好的文档。软件开发主要还是一个协作与交互的实践活动，而发布一个Maven站点是确保你的项目能与最终用户良好沟通的有效手段。</para>

    <para>一个开源项目的web站点通常是最终用户和开发人员交流的基础平台。最终用户浏览项目web站点以获得教程，用户指南，<acronym>API</acronym>文档，以及邮件列表存档。而开发者浏览项目的web站点获得设计文档，代码报告，问题跟踪（issue
    tracking），以及发布计划。大型的开源项目可能会和wiki，问题跟踪系统，以及持续集成系统相集成，用那些反映当前开发状态的材料来帮助增强在线文档。如果一个新的开源项目的web站点内容匮乏，不能为预期用户覆盖基本信息，那么这通常预示着这个项目有问题，不会被人采用。对于一个开源项目社区的形成，站点文档和代码本身一样重要。</para>

    <para>Maven可被用来创建一个项目web站点，以收集所有与最终用户和开发者相关的信息。不做任何配置，Maven就能生成项目报告，包括单元测试失败，包耦合度，以及代码质量报告。Maven也能让你编写简单的web页面，并基于一致的项目模板呈现这些页面。Maven可以用多种格式发布站点内容，包括<acronym>XHTML</acronym>和<acronym>PDF</acronym>。Maven可以用来生成API文档，也可以在你项目的二进制发布包内嵌入Javadoc和源代码。在你使用Maven生成了所有最终用户和开发者文档之后，你可以使用Maven将站点发布到远程服务器上。</para>
  </section>

  <section id="site-generation-intro">
    <title>使用Maven构建项目站点</title>

    <para>为了展示创建项目站点的过程，使用archetype插件创建一个样例Maven项目：</para>

    <screen>$ mvn archetype:create -DgroupId=org.sonatype.mavenbook -DartifactId=sample-project
</screen>

    <para>该命令创建了一个最简单的Maven项目，只带有一个简单的<acronym>POM</acronym>，以及<filename>src/main/java</filename>目录下一个Java类。你可以通过简单的运行<command>mvn
    site</command>构建Maven站点。要在浏览器中预览结果，你可以运行<command>mvn
    site:run</command>，Maven会构建站点并启动一个内嵌的Jetty容器。</para>

    <screen>$ <command>cd sample-project</command>
$ <command>mvn site:run</command>
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'site'.
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-project
[INFO]    task-segment: [site:run] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] Setting property: classpath.resource.loader.class =&gt; 
       'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on =&gt; 'false'.
[INFO] Setting property: resource.loader =&gt; 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound =&gt; 'false'.
[INFO] [site:run]
2008-04-26 11:52:26.981::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Starting Jetty on http://localhost:8080/
2008-04-26 11:52:26.046::INFO:  jetty-6.1.5
2008-04-26 11:52:26.156::INFO:  NO JSP Support for /, did not find 
         org.apache.jasper.servlet.JspServlet
2008-04-26 11:52:26.244::INFO:  Started SelectChannelConnector@0.0.0.0:8080
</screen>

    <para>一旦Jetty启动并开始监听8080端口，你就可以通过在浏览器中输入<ulink
    url="http://localhost:8080/">http://localhost:8080/</ulink>查看项目站点了。你可以在<xref
    linkend="fig-simple-site" />中看到结果。</para>

    <figure id="fig-simple-site">
      <title>简单生成的Maven站点</title>

      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/site_index.png" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>如果你在这个简单的站点中点击查看，你会发现对于一个真实的项目站点来说它并不是很有帮助。这里几乎没什么东西（而且看起来也不怎么样）。由于<varname>sample-project</varname>并没有配置任何开发者，邮件列表，问题跟踪系统，或者源码仓库，该项目站点的所有这些页面都没有信息。即使是站点状态的首页，“当前没有关于该项目的描述”。要自定义该站点，你需要给该项目及项目<acronym>POM</acronym>添加内容。</para>

    <para>如果你使用Maven
    Site插件来构建你的项目站点，你会想要做一些自定义配置。你会想填充<acronym>POM</acronym>中的一些重要字段来告诉Maven人们是如何参与该项目的，你也会想要自定义左边的导航菜单，以及页面顶部可见的连接。要自定义站点内容和左边导航菜单的内容，你就需要编辑站点描述符。</para>
  </section>

  <section>
    <title>自定义站点描述符</title>

    <para>当你为站点添加内容的时候，你会想要修改站点左边的导航菜单。以下的站点描述符定制了站点左上角的logo。除了站点的顶部，该描述符还为左边的导航菜单添加了一个菜单小节"Sample
    Project"。该菜单包含了一个指向概述页面的链接。</para>

    <para><example>
        <title>一个初始的站点描述符</title>

        <programlisting language="xml">&lt;project name="Sample Project"&gt;
  &lt;bannerLeft&gt;
    &lt;name&gt;Sonatype&lt;/name&gt;
    &lt;src&gt;images/logo.png&lt;/src&gt;
    &lt;href&gt;http://www.sonatype.com&lt;/href&gt;
  &lt;/bannerLeft&gt;
  &lt;body&gt;
    &lt;menu name="Sample Project"&gt;
      &lt;item name="Overview" href="index.html"/&gt;      
    &lt;/menu&gt;
    &lt;menu ref="reports"/&gt;
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
      </example></para>

    <para>该站点描述符引用了一个图片。该图片<filename>logo.png</filename>应该放在<filename>${basedir}/src/site/resources/images</filename>目录下。除了更改站点描述符，你还会想要在<filename>${basedir}/src/site/apt</filename>目录下创建一个简单的<filename>index.apt</filename>页面。将以下的内容写入<filename>index.apt</filename>，它会被转化成<filename>index.html</filename>，当用户访问Maven生成的站点时，他们就会看到这第一个页面。</para>

    <programlisting>  Welcome to the Sample Project, we hope you enjoy your time
  on this project site.  We've tried to assemble some 
  great user documentation and developer information, and 
  we're really excited that you've taken the time to visit
  this site.

What is Sample Project

  Well, it's easy enough to explain.   This sample project is 
  a sample of a project with a Maven-generated site from
  Maven: The Definitive	Guide.   A dedicated team of volunteers
  help maintain this sample site, and so on and so forth.
</programlisting>

    <para>要预览该站点，运行<command>mvn clean site</command>，接着<command>mvn
    site:run</command>：</para>

    <screen>$ mvn clean site
$ mvn site:run</screen>

    <para>在这之后，打开浏览器输入<ulink
    url="http://localhost:8080">http://localhost:8080</ulink>。你应该看到类似于截屏<xref
    linkend="fig-custom-simple" />的页面。</para>

    <figure id="fig-custom-simple">
      <title>定制样例项目的web站点</title>

      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/site_custom-descriptor.png" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <section>
      <title>自定义页面顶端图片</title>

      <para>要自定义显示在页面左上角和右上角的图片，你可以使用站点描述符中的<sgmltag>bannerLeft</sgmltag>和<sgmltag>bannerRight</sgmltag>元素。</para>

      <para><example>
          <title>给站点描述符添加Banner Left和Banner Right</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;

  &lt;bannerLeft&gt;
    &lt;name&gt;Left Banner&lt;/name&gt;
    &lt;src&gt;images/banner-left.png&lt;/src&gt;
    &lt;href&gt;http://www.google.com&lt;/href&gt;
  &lt;/bannerLeft&gt;
  
  &lt;bannerRight&gt;
    &lt;name&gt;Right Banner&lt;/name&gt;
    &lt;src&gt;images/banner-right.png&lt;/src&gt;
    &lt;href&gt;http://www.yahoo.com&lt;/href&gt;
  &lt;/bannerRight&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para><sgmltag>bannerLeft</sgmltag>和<sgmltag>bannerRight</sgmltag>元素都有<sgmltag>name</sgmltag>，<sgmltag>src</sgmltag>，和<sgmltag>href</sgmltag>子元素。在上述的站点描述符中，Maven
      Site插件会生成一个左上角图片为<filename>banner-left.png</filename>，右上角图片为<filename>banner-right.png</filename>的站点。Maven会到<filename>${basedir}/src/site/resources/images</filename>目录寻找这些图片。</para>
    </section>

    <section>
      <title>自定义导航菜单</title>

      <para>要自定义导航菜单的内容，使用<sgmltag>menu</sgmltag>元素及其<sgmltag>item</sgmltag>子元素。<sgmltag>menu</sgmltag>元素为左边的导航菜单添加一个小节。每个<sgmltag>item</sgmltag>元素会被渲染成菜单中的一个链接。</para>

      <para><example>
          <title>在站点描述符中创建菜单项</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;

    &lt;menu name="Sample Project"&gt;
      &lt;item name="Introduction" href="index.html"/&gt;
      &lt;item name="News" href="news.html"/&gt;
      &lt;item name="Features" href="features.html"/&gt;
      &lt;item name="Installation" href="installation.html"/&gt;
      &lt;item name="Configuration" href="configuration.html"/&gt;
      &lt;item name="FAQ" href="faq.html"/&gt;
    &lt;/menu&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>菜单项可以嵌套。如果嵌套了菜单项，你就会在导航菜单中创建一个折叠菜单。下述例子添加了一个指向<filename>/developer/index.html</filename>的"Developer
      Resources"链接。当用户查看这个Developer Resources页面的时候，其下的菜单项会被展开。</para>

      <para><example>
          <title>站点菜单添加链接</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;menu name="Sample Project"&gt;
      ...
      &lt;item name="Developer Resources" href="/developer/index.html" collapse="true"&gt;
        &lt;item name="System Architecture" href="/developer/architecture.html"/&gt;
        &lt;item name="Embedder's Guide" href="/developer/embedding.html"/&gt;
      &lt;/item&gt;
    &lt;/menu&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>当一个菜单项的<sgmltag>collapse</sgmltag>属性被设置成<varname>true</varname>的时候，Maven会折叠该菜单项，直至用户浏览了该特定页面。在前面的例子中，如果用户不查看Developer
      Resources页面，Maven就不会显示System Architecture和Embedder's Guide链接；它只会显示一个指向
      Developer Resources链接的箭头。当用户查看Developer
      Resources页面的时候，其包含的链接会被打开，箭头变成朝下方向。</para>
    </section>
  </section>

  <section>
    <title>站点目录结构</title>

    <para>Maven将所有的站点文档放在<filename>src/site</filename>目录下。同格式的文档则被放在其子目录下。所有的<acronym>APT</acronym>文档应该放到<filename>src/site/apt</filename>下，所有的<abbrev>FML</abbrev>文档应该被放到<filename>src/site/fml</filename>下，所有的XDoc文档应该被放到<filename>src/site/xdoc</filename>下。站点描述符是文件<filename>src/site/site.xml</filename>，所有的资源应该存储在<filename>src/site/resources</filename>。Maven
    Site插件构建web站点的时候，它会从资源目录复制所有文件至站点的根目录。如果你存储了一个文件<filename>src/site/resources/images/test.png</filename>，那么你就能够在你的站点文档中使用相对路径<filename>images/test.png</filename>引用该图片。</para>

    <para>下面的例子展示了一些文件的位置，包含了<acronym>APT</acronym>, <acronym>FML</acronym>,
    <acronym>HTML</acronym>, <acronym>XHTML</acronym>,
    和XDoc。注意<acronym>XHTML</acronym>内容直接存放在<filename>src/site/resources</filename>目录。architecture.html文件不会被Doxia处理，它会被直接复制到输出目录，如果你想要包含不被处理的<acronym>HTML</acronym>内容，你可以使用这种方式，而不使用Doxia和Maven
    Site插件的模板和格式化功能。</para>

    <screen>sample-project
+- src/
   +- site/
      +- apt/
      |  +- index.apt
      |  +- about.apt
      |  |
      |  +- developer/
      |     +- embedding.apt
      |
      +- fml/
      |  +- faq.fml
      |
      +- resources/
      |  +- images/
      |  |  +- banner-left.png
      |  |  +- banner-right.png
      |  |
      |  +- architecture.html
      |  +- jira-roadmap-export-2007-03-26.html
      |
      +- xdoc/
      |  +- xml-example.xml
      |
      +- site.xml
</screen>

    <para>注意开发者文档存储在<filename>src/site/apt/developer/embedding.apt</filename>。<filename>apt</filename>目录下的子目录会被反映到站点中最终<acronym>HTML</acronym>页面的相对位置上。在Site插件渲染目录<filename>src/site/apt</filename>内容的时候，它会对应的在站点根目录生成<acronym>HTML</acronym>输出。如果一个文件在apt目录中，它对应就会生成到web站点的根目录中。如果一个文件在<filename>apt/developer</filename>目录中，它就会被生成到web站点的<filename>developer/</filename>目录下。</para>
  </section>

  <section>
    <title>编写项目文档</title>

    <para>Maven使用一个叫做Doxia的文档处理引擎，它读取多个资源格式至一个一般的文档模型。Doxia之后就可以处理文档并渲染结果至不同的输出格式，如<acronym>PDF</acronym>或者<acronym>XHTML</acronym>。要编写你项目的文档，你需要基于能被Doxia解析的格式编写内容。Doxia现在支持Almost
    Plain Text (<acronym>APT</acronym>), XDoc (一种Maven1的文档格式),
    <acronym>XHTML</acronym>, 和 <acronym>FML</acronym>
    (对<acronym>FAQ</acronym>文档很有用) 格式。</para>

    <para>本章粗略的介绍一下<acronym>APT</acronym>格式。要深入了解<acronym>APT</acronym>格式，或者XDoc和<acronym>FML</acronym>的深入介绍，请访问如下资源：</para>

    <itemizedlist>
      <listitem>
        <para><acronym>APT</acronym>参考: <ulink
        url="http://maven.apache.org/doxia/format.html">http://maven.apache.org/doxia/format.html</ulink></para>
      </listitem>

      <listitem>
        <para>XDoc参考: <ulink
        url="http://jakarta.apache.org/site/jakarta-site2.html">http://jakarta.apache.org/site/jakarta-site2.html</ulink></para>
      </listitem>

      <listitem>
        <para><acronym>FML</acronym>参考: <ulink
        url="http://maven.apache.org/doxia/references/fml-format.html">http://maven.apache.org/doxia/references/fml-format.html</ulink></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>APT样例</title>

      <para><xref
      linkend="ex-apt" />展示了一个简单的APT文档，它带有一段介绍文字和一个简单列表。注意列表通过伪元素“[]”结束。</para>

      <example id="ex-apt">
        <title>APT文档</title>

        <programlisting>---
Introduction to Sample Project
---
Brian Fox
---
26-Mar-2008
---
 
Welcome to Sample Project
 
  This is a sample project, welcome!   We're excited that you've decided to read the
  index page of this Sample Project.  We hope you enjoy the simple sample project
  we've assembled for you.
 
  Here are some useful links to get you started:
 
   * {{{news.html}News}}
 
   * {{{features.html}Features}}
 
   * {{{faq.html}FAQ}}
 
   []
</programlisting>
      </example>

      <para>如果<xref
      linkend="ex-apt" />中的<acronym>APT</acronym>文档位于<filename>src/site/apt/index.apt</filename>，Maven
      Site插件就会使用Doxia解析该<acronym>APT</acronym>，生成对应于<filename>index.html</filename>的<acronym>XHTML</acronym>文档。</para>
    </section>

    <section>
      <title>FML样例</title>

      <para>很多项目维护一个常见问题（<acronym>FAQ</acronym>）页面。<xref
      linkend="ex-fml" />展示了一个<acronym>FML</acronym>文档的例子：</para>

      <para><example id="ex-fml">
          <title>FAQ标记语言文档</title>

          <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;faqs title="Frequently Asked Questions"&gt;
  &lt;part id="General"&gt;
    &lt;faq id="sample-project-sucks"&gt;
      &lt;question&gt;Sample project doesn't work.  Why does sample project suck?&lt;/question&gt;
      &lt;answer&gt;
        &lt;p&gt;
          We resent that question.  Sample wasn't designed to work, it was designed to
          show you how to use Maven.   Is you really think this project sucks, then
          keep it to yourself.   We're not interested in your pestering questions.
        &lt;/p&gt;
      &lt;/answer&gt;
    &lt;/faq&gt;
    &lt;faq id="sample-project-source"&gt;
      &lt;question&gt;I want to put some code in Sample Project, how do I do this?&lt;/question&gt;
      &lt;answer&gt;
        &lt;p&gt;
          If you want to add code to this project, just start putting Java source in
          src/main/java.   If you want to put some source code in this FAQ, use the
          source element:
        &lt;/p&gt;
        &lt;source&gt;
          for( int i = 0; i &lt; 1234; i++ ) {
            // do something brilliant
          }
        &lt;/source&gt;
      &lt;/answer&gt;
    &lt;/faq&gt;
  &lt;/part&gt;
&lt;/faqs&gt;
</programlisting>
        </example></para>
    </section>
  </section>

  <section>
    <title>部署你的项目web站点</title>

    <para>一旦项目文档已经写好，并且你已经创建了一个引以为傲的站点，你会想将其部署到服务器上。要部署你的站点，你需要使用Maven
    Site插件，它会使用很多种方法如<acronym>FTP</acronym>，<acronym>SCP</acronym>，和<acronym>DAV</acronym>，将你的项目站点部署到远程服务器上。要使用<acronym>DAV</acronym>部署站点，在<acronym>POM</acronym>中配置<sgmltag>distributionManagement</sgmltag>小节的site元素，如：</para>

    <para><example>
        <title>配置站点部署</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    &lt;site&gt;
      &lt;id&gt;sample-project.website&lt;/id&gt;
      &lt;url&gt;dav:https://dav.sample.com/sites/sample-project&lt;/url&gt;
    &lt;/site&gt;
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;
</programlisting>
      </example></para>

    <para><sgmltag>distributionManagement</sgmltag>中<sgmltag>url</sgmltag>的值有一个开头标记<varname>dav</varname>，它告诉Maven
    Site插件部署该站点至一个理解<acronym>WebDAV</acronym>的<acronym>URL</acronym>。一旦你已经在我们的<varname>sample-project</varname>
    <acronym>POM</acronym>中添加了该<sgmltag>distributionManagement</sgmltag>小节，我们就可以部署该站点：</para>

    <screen>$ mvn clean site-deploy
</screen>

    <para>如果你有一个正确配置的，并能理解<acronym>WebDAV</acronym>的服务器，Maven就会将项目的web站点部署到远程服务器。如果你正将该项目站点部署到一个公共可见的服务器上，你就会需要配置web服务器的访问证书。比如你的web服务器要求一个用户名和密码（或者其它证书，你可以在你的<filename>~/.m2/settings.xml</filename>中配置它的值）</para>

    <section>
      <title>配置服务器认证</title>

      <para>在站点部署的过程中配置用户名/密码组合，我们在<filename>$HOME/.m2/settings.xml</filename>中包含如下的XML：</para>

      <para><example>
          <title>在用户特定Settings中存储服务器认证信息</title>

          <programlisting language="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;sample-project.website&lt;/id&gt;
      &lt;username&gt;jdcasey&lt;/username&gt;
      &lt;password&gt;b@dp@ssw0rd&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>服务器认证小节可以包含很多认证元素。如果你正使用<acronym>SCP</acronym>进行部署，你可能会希望使用公钥认证。为此，不再使用password元素，而是使用<sgmltag>publicKey</sgmltag>和<sgmltag>passphrase</sgmltag>元素。根据服务器的配置，可能你仍然需要配置username元素。</para>
    </section>

    <section>
      <title>配置文件和目录模式</title>

      <para>如果你在一个很大的开发团队中工作，你会想要确保web站点的文件被发布到远程服务器上之后，拥有正确的用户和组权限。要在站点部署过程
      中为文件和目录配置特定的模式，在<filename>$HOME/.m2/settings.xml</filename>中包含如下配置：</para>

      <para><example>
          <title>在远程服务器上配置文件和目录模式</title>

          <programlisting language="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    ...
    &lt;server&gt;
      &lt;id&gt;hello-world.website&lt;/id&gt;
      ...
      &lt;directoryPermissions&gt;0775&lt;/directoryPermissions&gt;
      &lt;filePermissions&gt;0664&lt;/filePermissions&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>上述设置使所有目录对于所有者和所有者所在用户组可读可写；对于匿名用户则只读，并能列出目录内容。类似的，所有者或所有者所在用户组可以读写任何文件，而其它用户则只有只读访问权限。</para>
    </section>
  </section>

  <section>
    <title>自定义站点外观</title>

    <para>默认的Maven模板可能远不能满足你的期望。如果你想要自定义项目站点，并且不只局限于添加内容，导航元素，和定制logo。Maven提供了很多种方案让你定制web站点，并相继的提供对于内容渲染和站点结构的深入访问。对于小型的，单个项目的站点微调，提供一个定制的<filename>site.css</filename>通常就足够了。然而，如果你想要自己的自定义信息可以在多个项目中被重用，或者该自定义还涉及了更改Maven生成的<acronym>XHTML</acronym>内容，你就应该考虑创建你自己的Maven
    web站点皮肤。</para>

    <section>
      <title>自定义站点CSS</title>

      <para>最简单的影响项目web站点外观和感觉的方法是使用项目的<filename>site.css</filename>。就像你为站点提供的任何图片或<acronym>XHTML</acronym>内容一样，<filename>site.css</filename>也被包含于<filename>src/site/resources</filename>目录中。Maven认为该文件位于<filename>src/site/resources/css</filename>子目录。使用<acronym>CSS</acronym>就可以更改文字风格属性，布局属性，或者甚至添加背景图片和自定义bullet图。例如，如果我们决定让菜单头更显眼一点，就可以在<filename>src/site/resources/css/site.css</filename>中尝试如下风格。</para>

      <screen>#navcolumn h5 {
  font-size: smaller;
  border: 1px solid #aaaaaa;
  background-color: #bbb;
  margin-top: 7px;
  margin-bottom: 2px;
  padding-top: 2px;
  padding-left: 2px;
  color: #000;
}
</screen>

      <para>在你重新生成该站点之后，菜单头应该会有一个灰色背景框，并通过一些额外的边距空间和菜单的其它部分分开。使用该文件，Maven站点的任何结构都可以使用自定义的<acronym>CSS</acronym>装饰。如果你在一个特定项目中更改<filename>site.css</filename>，其变化就至对该项目起作用。如果你想做一些更改并应用到很多个Maven项目中，你可以为Maven
      Site插件创建一个自定义的皮肤。</para>

      <tip>
        <para>对于默认Maven
        Site模板的结构，没有很好的参考材料。如果你尝试自定义你Maven项目的风格，你应该使用一个Firefox插件如Firebug作为一个工具，来浏览项目页面的<acronym>DOM</acronym></para>
      </tip>
    </section>

    <section>
      <title>创建自定义的站点模板</title>

      <para>如果默认的Maven站点结构不符合你的要求，你可以自定义Maven站点模板。自定义该模板让你完全控制Maven
      Site插件的最终输出，也能让你使用非默认的目录结构。</para>

      <para>Site插件使用了叫做Doxia的渲染引擎，而它实际上使用Velocity模板将页面渲染成<acronym>XHTML</acronym>。要更改默认被渲染的页面结构，我们可以在<acronym>POM</acronym>中配置site插件使用自定义的页面模板。site模板相当复杂，你需要有一个关于自定义配置的良好起点。一开始从Doxia的Subversion仓库<ulink
      url="http://svn.apache.org/viewvc/maven/doxia/doxia-sitetools/trunk/doxia-site-renderer/src/main/resources/org/apache/maven/doxia/siterenderer/resources/default-site.vm?revision=595592">default-site.vm</ulink>复制默认的Velocity模板至<filename>src/site/site.vm</filename>。该模板使用Velocity模板语言编写。Velocity是一个简单的模板语言，它支持简单的宏定义，允许你使用简单标记访问对象的方法和属性。全面的介绍超出了本书的范围，要了解更多的关于Velocity的信息级全面介绍，访问Velocity的项目站点<ulink
      url="http://velocity.apache.org">http://velocity.apache.org</ulink>。</para>

      <para><filename>default-site.xml</filename>模板相当复杂，但自定义左边导航菜单相对的比较简单。如果你试图更改一个<sgmltag>menuItem</sgmltag>的外观，找到<sgmltag>menuItem</sgmltag>宏。它位于一个如下的小节中：</para>

      <screen>#macro ( menuItem $item )

  ...
  
#end
</screen>

      <para>如果你使用如下的宏定义替换了默认的宏定义，你将为每个菜单项嵌入Javascript引用，能让用户在不用重新载入整个页面的情况下展开或收缩菜单树。</para>

      <screen>#macro ( menuItem $item $listCount )
  #set ( $collapse = "none" )
  #set ( $currentItemHref = $PathTool.calculateLink( $item.href, $relativePath ) )
  #set ( $currentItemHref = $currentItemHref.replaceAll( "\\", "/" ) )

  #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
    #if ( $item.collapse == false )
      #set ( $collapse = "collapsed" )
    #else
      ## By default collapsed
      #set ( $collapse = "collapsed" )
    #end

    #set ( $display = false )
    #displayTree( $display $item )

    #if ( $alignedFileName == $currentItemHref || $display )
      #set ( $collapse = "expanded" )
    #end
  #end
  &lt;li class="$collapse"&gt;
    #if ( $item.img )
      #if ( ! ( $item.img.toLowerCase().startsWith("http") || $item.img.toLowerCase().startsWith("https") ) )
        #set ( $src = $PathTool.calculateLink( $item.img, $relativePath ) )
        #set ( $src = $item.img.replaceAll( "\\", "/" ) )
        &lt;img src="$src"/&gt;
      #else
        &lt;img src="$item.img" align="absbottom" style="border-width: 0"/&gt;
      #end
    #end
    #if ( $alignedFileName == $currentItemHref )
      &lt;strong&gt;$item.name&lt;/strong&gt;
    #else
      #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
      &lt;a onclick="expand('list$listCount')" style="cursor:pointer"&gt;$item.name&lt;/a&gt;
      #else
      &lt;a href="$currentItemHref"&gt;$item.name&lt;/a&gt;
      #end
    #end
  #if ( $item &amp;&amp; $item.items &amp;&amp; $item.items.size() &gt; 0 )
    #if ( $collapse == "expanded" )
    &lt;ul id="list$listCount" style="display:block"&gt;
    #else
    &lt;ul id="list$listCount" style="display:none"&gt;
      #end
      #foreach( $subitem in $item.items )
        #set ( $listCounter = $listCounter + 1 )
        #menuItem( $subitem $listCounter )
      #end
    &lt;/ul&gt;
  #end
  &lt;/li&gt;
#end
</screen>

      <para>该更改为<varname>menuItem</varname>宏添加了一个新的参数。为了使新功能正确工作，你需要更改所有对于该宏的引用，否则最终的模板可能会生成非预期的或者不一致的<acronym>XHTML</acronym>。要完成这些引用的更改，在<varname>mainMenu</varname>宏中进行一次替换。寻找类似下面模板片段的代码，以找到该宏。</para>

      <screen>#macro ( mainMenu $menus )
  ...
#end
</screen>

      <para>使用如下的实现替换<varname>mainMenu</varname>宏。</para>

      <screen>#macro ( mainMenu $menus )
  #set ( $counter = 0 )
  #set ( $listCounter = 0 )
  #foreach( $menu in $menus )
    #if ( $menu.name )
    &lt;h5 onclick="expand('menu$counter')"&gt;$menu.name&lt;/h5&gt;
    #end
    &lt;ul id="menu$counter" style="display:block"&gt;
      #foreach( $item in $menu.items )
        #menuItem( $item $listCounter )
        #set ( $listCounter = $listCounter + 1 )
      #end
    &lt;/ul&gt;
    #set ( $counter = $counter + 1 )
  #end
#end
</screen>

      <para>这个新的<varname>mainMenu</varname>宏现在和前面的<varname>menuItem</varname>宏匹配了，同时也为顶层的菜单提供了Javascript支持。点击带有子项的顶层菜单，会得到展开的菜单，能让用户在不用等待页面重新载入的情况下查看整个树。</para>

      <para>对于<varname>menuItem</varname>宏的更改引入了一个<methodname>expand()</methodname>
      Javascript函数。该方法需要被加入到模板文件底部的主<acronym>XHTML</acronym>模板中。找到类似于下面的代码片段：</para>

      <screen>  &lt;head&gt;
    ...
    &lt;meta http-equiv="Content-Type" content="text/html; charset=${outputEncoding}" /&gt;
    ...
  &lt;/head&gt;
</screen>

      <para>然后进行如下的替换：</para>

      <screen>  &lt;head&gt;
    ...
    &lt;meta http-equiv="Content-Type" content="text/html; charset=${outputEncoding}" /&gt;
    &lt;script type="text/javascript"&gt;
      function expand( item ) {
        var expandIt = document.getElementById( item );
        if( expandIt.style.display == "block" ) {
          expandIt.style.display = "none";
          expandIt.parentNode.className = "collapsed";
        } else {
          expandIt.style.display = "block";
          expandIt.parentNode.className = "expanded";
        }
      }
    &lt;/script&gt;
    #if ( $decoration.body.head )
      #foreach( $item in $decoration.body.head.getChildren() )
        #if ( $item.name == "script" )
          $item.toUnescapedString()
        #else
          $item.toString()
        #end
      #end
    #end
  &lt;/head&gt;
</screen>

      <para>在修改了默认站点模板之后，你需要配置项目<acronym>POM</acronym>以引用这个新的站点模板。为此，你需要使用Maven
      Site插件的<sgmltag>templateDirectory</sgmltag>和<sgmltag>template</sgmltag>配置属性。</para>

      <para><example>
          <title>在一个项目的POM中自定义页面模板</title>

          <programlisting language="xml">&lt;project&gt;
  ...
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;templateDirectory&gt;src/site&lt;/templateDirectory&gt;
          &lt;template&gt;site.vm&lt;/template&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>现在，你应该能够重新生成你项目的web站点了。这时你可能会注意到maven站点的资源和<acronym>CSS</acronym>丢失了。当一个Maven项目自定义站点模板的时候，Site插件认为该项目会提供所有默认的图片和<acronym>CSS</acronym>。为了提供项目的资源，你可以从默认的Doxia站点渲染项目中复制资源到你项目的资源目录中，运行如下命令：</para>

      <screen>$ <command>svn co \
        http://svn.apache.org/repos/asf/maven/doxia/doxia-sitetools/trunk/doxia-site-renderer</command>
$ <command>rm \
        doxia-site-renderer/src/main/resources/org/apache/maven/doxia/siterenderer/resources/\
        css/maven-theme.css</command>
$ <command>cp -rf \
      doxia-site-renderer/src/main/resources/org/apache/maven/doxia/siterenderer/resources/* \
      sample-project/src/site/resources</command>
</screen>

      <para>签出<varname>doxia-site-renderer</varname>项目，删除默认的<filename>maven-theme.css</filename>文件，然后复制所有的资源到你的<filename>src/site/resources</filename>目录。</para>

      <para>当你重新生成站点的时候，你会注意到一些菜单项看起来像常规未修饰的文本。这是因为站点<acronym>CSS</acronym>和新的自定义页面模板发生了一些诡异的交互。修改<filename>site.css</filename>，为菜单恢复正确的链接颜色后便可修复。只要添加如下配置：</para>

      <screen>li.collapsed, li.expanded, a:link {
  color:#36a;
}
</screen>

      <para>在重新生成站点之后，菜单的链接颜色看起来正确了。如果你将这个新的站点模板应用到本章的sample-project项目中，你会看到菜单现在包含了一棵树。点击“Developer
      Resources”不会再打开“Developer Resources”页面；取而代之的，是展开子菜单。由于你将Developer
      Resources转换成了一个动态折叠的子菜单，你不再可以通过该菜单打开<filename>developer/index.apt</filename>页面。为了对付这种变化，你可以在该子菜单下添加一个Overview链接，指向同样的页面：</para>

      <para><example>
          <title>给站点描述符添加一个菜单项</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;menu name="Main Menu"&gt;
    ...
    &lt;item name="Developer Resources" collapse="true"&gt;
      &lt;item name="Overview" href="/developer/index.html"/&gt;
      &lt;item name="System Architecture" href="/developer/architecture.html"/&gt;
      &lt;item name="Embedder's Guide" href="/developer/embedding.html"/&gt;
    &lt;/item&gt;
  &lt;/menu&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section>
      <title>可重用的web站点皮肤</title>

      <para>如果你的组织创建了很多Maven项目站点，那么你就会想要在整个组织范围内重用站点模板和定制<acronym>CSS</acronym>。如果你想让三十个项目都共享同样的<acronym>CSS</acronym>和站点模板，你可以使用Maven对于皮肤的支持。Maven的站点皮肤允许你将资源和模板打包，以让其它项目重用，而不用为所有需要自定义的项目重复创建模板。</para>

      <para>你可以定义自己的皮肤，但可能你也会想要使用Maven的可选皮肤。你可以选择下面的几个皮肤。每个皮肤都提供了其自己的导航风格，内容，logo，和模板：</para>

      <itemizedlist>
        <listitem>
          <para>Maven经典皮肤 -
          <varname>org.apache.maven.skins:maven-classic-skin:1.0</varname></para>
        </listitem>

        <listitem>
          <para>Maven默认皮肤 -
          <varname>org.apache.maven.skins:maven-default-skin:1.0</varname></para>
        </listitem>

        <listitem>
          <para>Maven Stylus皮肤 -
          <acronym>org.apache.maven.skins:maven-stylus-skin:1.0.1</acronym></para>
        </listitem>
      </itemizedlist>

      <para>你可以在Maven仓库中找到一个最新的皮肤完整列表：</para>

      <para><ulink
      url="http://repo1.maven.org/maven2/org/apache/maven/skins/">http://repo1.maven.org/maven2/org/apache/maven/skins/</ulink></para>

      <para>创建一个自定义的皮肤其实只是简单的将你自定义的<filename>maven-theme.css等内容</filename>封装成一个Maven项目，这样就能根据<varname>groupId</varname>，<varname>artifactId</varname>，和<varname>version</varname>引用它。它可以包含一些资源，如图片，以及用来替换默认模板，生成完全不同<acronym>XHTML</acronym>结构的站点模板（用Velocity编写）。大部分情况下，自定义的<acronym>CSS</acronym>就可以满足你需要的变化。为了演示该功能，让我们为sample-project项目创建一个皮肤，开始先创建一个自定义的<filename>maven-theme.css</filename>。</para>

      <para>在我们开始编写自定义<acronym>CSS</acronym>之前，我们需要创建一个单独的Maven项目，以便让<varname>sample-project</varname>的站点描述符引用它。首先，使用Maven的archetype插件创建一个基本的项目。在<varname>sample-project</varname>项目根目录的上一层目录运行如下的命令：</para>

      <screen>$ mvn archetype:create -DartifactId=sample-site-skin -DgroupId=com.sonatyp.maven
</screen>

      <para>这会创建一个名为<varname>sample-site-skin</varname>的项目（以及一个目录）。切换当前目录为<varname>sample-site-skin</varname>目录，删除所有源码和测试代码，然后创建一个目录来存储皮肤资源：</para>

      <screen>$ cd sample-site-skin
$ rm -rf src/main/java src/test
$ mkdir src/main/resources
</screen>
    </section>

    <section>
      <title>创建自定义的主题CSS</title>

      <para>接着，为定制皮肤编写自定义的<acronym>CSS</acronym>。Maven站点皮肤的<acronym>CSS</acronym>文件应该位于<filename>src/main/resources/css/maven-theme.css</filename>。不像<filename>site.css</filename>文件位于项目的站点特定源目录那样，<filename>maven-theme.css</filename>会被打包安装到本地Maven仓库的一个<acronym>JAR</acronym>构件中。为了让皮肤JAR文件包含maven-theme.css文件，它需要位于主项目资源目录：<filename>src/main/resources</filename>。</para>

      <para>如同自定义默认站点模板一样，你会想用简单的方法开始定制新的站点<acronym>CSS</acronym>。复制默认Maven皮肤的<acronym>CSS</acronym>到你的皮肤项目中。要获取默认主题文件的副本，访问<varname>maven-default-skin</varname>项目的<filename>src/main/resources/css/maven-theme.css</filename>，将其内容保存到你自己的皮肤文件中。</para>

      <para>现在我们拥有了合适的基础主题，使用<acronym>CSS</acronym>从这个旧的site.css文件开始定制。使用如下内容替换<varname>#navcolumn
      h5</varname> <acronym>CSS</acronym>块：</para>

      <screen>#navcolumn h5 {
  font-size: smaller;
  border: 1px solid #aaaaaa;
  background-color: #bbb;
  margin-top: 7px;
  margin-bottom: 2px;
  padding-top: 2px;
  padding-left: 2px;
  color: #000;
}
</screen>

      <para>在成功定制<filename>maven-theme.css</filename>之后，构建并安装<varname>sample-site-skin</varname>
      <acronym>JAR</acronym>构件至你的本地仓库，运行：</para>

      <screen>$ mvn clean install
</screen>

      <para>在安装完成之后，返回<filename>sample-project</filename>项目目录，如果你已经在本章前面定制了<filename>site.css</filename>，将<filename>site.css</filename>移动为<filename>site.css.bak</filename>，这样它就不再影响Maven
      Site插件的输出：</para>

      <screen>$ mv src/site/resources/css/site.css src/site/resources/css/site.css.bak
</screen>

      <para>要在<varname>sample-project</varname>的站点中使用<varname>sample-site-skin</varname>，你需要在<varname>sample-project</varname>的站点描述符中添加对于<varname>sample-site-skin</varname>构件的引用。在站点描述符中使用如下的skin元素来引用皮肤：</para>

      <para><example>
          <title>在站点描述符中配置自定义站点皮肤</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;skin&gt;
    &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
    &lt;artifactId&gt;sample-site-skin&lt;/artifactId&gt;
  &lt;/skin&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>你可以将Maven站点皮肤想象成一个站点依赖。站点皮肤以构件的形式通过groupId和artifactId被引用。使用站点皮肤允许你在一个单独项目中统一站点定制，并且使得重用自定义<acronym>CSS</acronym>和站点模板，像插件重用构建逻辑一样简单。</para>
    </section>

    <section>
      <title>在皮肤中自定义站点模板</title>

      <para>就像你可以在Maven站点皮肤中自定义<acronym>CSS</acronym>一样，你也可以在其中自定义站点模板。Doxia的站点渲染工具会从皮肤<acronym>JAR</acronym>文件中找一个<filename>META-INF/maven/site.vm</filename>文件。为了包含一个自定义的页面模板，复制模板文件至<varname>sample-site-skin</varname>中正确的位置。将本章前面开发的自定义站点模板复制到<varname>sample-site-skin</varname>中的<filename>src/main/resources/META-INF/maven</filename>位置：</para>

      <screen>$ mv sample-project/src/site/site.vm \
    sample-site-skin/src/main/resources/META-INF/maven
</screen>

      <para>如果你已经在<varname>sample-project</varname>中自定义了站点模板，删除Site插件中指向该模板的配置。Site插件会使用站点皮肤中包含的模板来渲染站点。</para>

      <programlisting language="xml">&lt;plugin&gt;
  &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;templateDirectory&gt;src/site&lt;/templateDirectory&gt;
    &lt;template&gt;site.vm&lt;/template&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
</programlisting>

      <para>Maven站点皮肤应该包含所有它依赖的资源。包括<acronym>CSS</acronym>，图片，以及logo。如果在本章前面你已经自定义了站点模板，且已经将默认的<varname>doxia-site-renderer</varname>资源复制到了<filename>src/site/resources</filename>目录。你需要将这些文件从<varname>sample-project</varname>项目移到新的<varname>sample-site-skin</varname>项目中，使用如下的命令：</para>

      <screen>$ cd ..
$ mkdir -p sample-site-skin/src/main/resources/css
$ mv sample-project/src/site/resources/css/maven-base.css \
    sample-site-skin/src/main/resources/css
$ mkdir -p sample-site-skin/src/main/resources/images
$ mv sample-project/src/site/resources/images/logos \
    sample-site-skin/src/main/resources/images
$ mv sample-project/src/site/resources/images/expanded.gif \
    sample-site-skin/src/main/resources/images
$ mv sample/src/site/resources/images/collapsed.gif \
    sample-site-skin/src/main/resources/images
</screen>

      <para>你已经更改了<varname>sample-site-skin</varname>，因此需要安装该皮肤到本地Maven仓库。在安装好皮肤之后，重新构建<varname>sample-project</varname>
      web站点。你会看到新皮肤的自定义站点模板已经应用到了<varname>sample-project</varname>的web站点上。你会注意到菜单项的颜色可能会有一些不精确，因为你没有为折叠及展开菜单项添加必要的<acronym>CSS</acronym>。为此，如下更改<filename>src/main/resources/css/maven-theme.css</filename>：</para>

      <screen>a:link {
  ...
}
</screen>

      <para>至</para>

      <screen>li.collapsed, li.expanded, a:link {
  ...
}
</screen>

      <para>重新构建皮肤，然后再次生成站点，你会看到菜单项正常显示了。你已经成功的创建了一个Maven主题，它可以用来将自定义的<acronym>CSS</acronym>和模板应用到一组项目中。</para>
    </section>
  </section>

  <section>
    <title>提示与技巧</title>

    <para>本节介绍一些对创建Maven站点很有帮助的提示和技巧。</para>

    <section>
      <title>给HEAD嵌入XHTML</title>

      <para>要给<acronym>HEAD</acronym>元素嵌入<acronym>XHTML</acronym>，为你项目的站点描述符添加一个head元素。下面的例子为<varname>sample-project</varname>项目web站点的所有页面添加了一个信息源链接。</para>

      <para><example>
          <title>给HEAD元素嵌入HTML</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;body&gt;
    &lt;head&gt;
      &lt;link href="http://sample.com/sites/sample-project/feeds/blog"
            type="application/atom+xml" 
            id="auto-discovery" 
            rel="alternate" 
            title="Sample Project Blog" /&gt;
    &lt;/head&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section>
      <title>在你站点logo下添加链接</title>

      <para>如果你工作的项目正由一个组织开发，你会希望能够在项目logo下添加链接。假设你的项目是Apache软件基金会的一部分，你可能想在logo的正下方添加一个指向Apache软件基金会的链接，或者你还想添加一个指向父项目的链接。为了在站点logo下添加链接，直接在站点描述符中的body元素下添加一个links元素。每个links元素下的item元素都会被渲染成logo下的一个链接。下面的例子添加一个指向Apache软件基金会的链接，以及随后一个指向Apache
      Maven项目的链接。</para>

      <para><example>
          <title>在你的站点Logo下添加链接</title>

          <programlisting language="xml">&lt;project name="Hello World"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;links&gt;
      &lt;item name="Apache" href="http://www.apache.org"/&gt;
      &lt;item name="Maven" href="http://maven.apache.org"/&gt;
    &lt;/links&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section>
      <title>为你的站点添加导航链接</title>

      <para>如果你的站点层次结构是一个逻辑层次的一部分，你也许会想要放一系列导航链接，以给用户提供上下文，并让他们能够浏览树状结构中上面的项目，那些项目以子模块的形式包含了当前项目。要配置导航链接，在站点描述符的body元素下添加<sgmltag>breadcrumbs</sgmltag>元素。每个item元素被渲染成一个链接，并且所有<sgmltag>breadcrumbs</sgmltag>元素下的item元素会被有序的渲染。导航链接项会从高层到低层进行罗列。下面的站点描述符中，Codehaus项会看起来包含了Mojo项。</para>

      <para><example>
          <title>配置站点导航链接</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;body&gt;
    ...
    &lt;breadcrumbs&gt;
      &lt;item name="Codehaus" href="http://www.codehaus.org"/&gt;
      &lt;item name="Mojo" href="http://mojo.codehaus.org"/&gt;
    &lt;/breadcrumbs&gt;
    ...
  &lt;/body&gt;
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section>
      <title>添加项目版本</title>

      <para>当你为一个有多个版本的项目编写文档的时候，通常在每个页面列出项目的版本号会很有帮助。为了在web站点中显示你项目的版本，只需在站点描述符中添加一个<sgmltag>version</sgmltag>元素：</para>

      <para><example>
          <title>放置版本信息</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;version position="left"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>这会将版本信息（在sample-project项目中，显示为“Version:
      1.0-SNAPSHOT”）放到站点的左上角，在“上次发布”日期的旁边。项目版本可以放置的位置包括：</para>

      <variablelist>
        <varlistentry>
          <term>左边</term>

          <listitem>
            <para>站点Logo下方栏的左边</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>右边</term>

          <listitem>
            <para>站点Logo下方栏的右边</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>导航顶部</term>

          <listitem>
            <para>菜单的顶部</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>导航底部</term>

          <listitem>
            <para>菜单的底部</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>无</term>

          <listitem>
            <para>完全禁止版本</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>修改发布日期格式和位置</title>

      <para>有一些情况，你可能想要重新格式化或者重新放置项目站点的“上次发布”日期。正如上述的版本提示，你可以使用下列选项之一指定发布日期的位置：</para>

      <variablelist>
        <varlistentry>
          <term>左边</term>

          <listitem>
            <para>站点Logo下方栏的左边</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>右边</term>

          <listitem>
            <para>站点Logo下方栏的右边</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>导航顶部</term>

          <listitem>
            <para>菜单的顶部</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>导航底部</term>

          <listitem>
            <para>菜单的底部</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>无</term>

          <listitem>
            <para>完全禁止发布日期</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><example>
          <title>放置发布日期</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;publishDate position="navigation-bottom"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>

      <para>缺省情况，发布日期会使用格式<varname>MM/dd/yyyy</varname>进行格式化。你可以更改格式，只需使用<classname>java.text.SimpleDateFormat</classname>的JavaDocs（详细信息参考JavaDoc
      <ulink
      url="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</ulink>）中能找到的标准标记。要使用<varname>yyyy-MM-dd</varname>格式化日期，使用如下的<sgmltag>publishDate</sgmltag>元素。</para>

      <para><example>
          <title>配置发布日期格式</title>

          <programlisting language="xml">&lt;project name="Sample Project"&gt;
  ...
  &lt;publishDate position="navigation-bottom" format="yyyy-MM-dd"/&gt;
  ...
&lt;/project&gt;
</programlisting>
        </example></para>
    </section>

    <section>
      <title>使用Doxia宏</title>

      <para>除了高级的文档渲染特性，Doxia同时也提供了一个宏引擎，它允许每种输入格式触发动态内容的注入。一个优秀的例子是snippet宏，它能让一个文档从一个HTTP可访问的源文件抓取代码片段。使用该宏，一小段<acronym>APT</acronym>可以被渲染成<acronym>XHTML</acronym>。下面的<acronym>APT</acronym>代码调用了snippet宏。请注意该代码应该是单独连续的一行，插入一个反斜杠是为了表示换行，以让代码更适合页面。</para>

      <screen>%{snippet|id=modello-model|url=http://svn.apache.org/repos/asf/maven/archetype/trunk/\
maven-archetype/maven-archetype-model/src/main/mdo/archetype.mdo}
</screen>

      <para><example>
          <title>XHTML中Snippet宏的输出</title>

          <programlisting language="xml">&lt;div class="source"&gt;&lt;pre&gt;

&lt;model&gt;
  &lt;id&gt;archetype&lt;/id&gt;
  &lt;name&gt;Archetype&lt;/name&gt;
  &lt;description&gt;&lt;![CDATA[Maven's model for the archetype descriptor.]]&gt;&lt;/description&gt;
  &lt;defaults&gt;
    &lt;default&gt;
      &lt;key&gt;package&lt;/key&gt;
      &lt;value&gt;org.apache.maven.archetype.model&lt;/value&gt;
    &lt;/default&gt;
  &lt;/defaults&gt;
  &lt;classes&gt;
    &lt;class rootElement="true" xml.tagName="archetype"&gt;
      &lt;name&gt;ArchetypeModel&lt;/name&gt;
      &lt;description&gt;Describes the assembly layout and packaging.&lt;/description&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
      &lt;fields&gt;
        &lt;field&gt;
          &lt;name&gt;id&lt;/name&gt;
          &lt;version&gt;1.0.0&lt;/version&gt;
          &lt;required&gt;true&lt;/required&gt;
          &lt;type&gt;String&lt;/type&gt;
        &lt;/field&gt;
        ...
      &lt;/fields&gt;
    &lt;/class&gt;
  &lt;/classes&gt;
&lt;/model&gt;

&lt;/pre&gt;&lt;/div&gt;
</programlisting>
        </example></para>

      <warning>
        <para><acronym>在APT</acronym>源文档中，绝对不要缩进Doxia宏。这么做会让<acronym>APT</acronym>解析器完全的忽略该宏。</para>
      </warning>

      <para>要了解更多如何在你代码中定义snippet，以及snippet宏的信息，参考Maven站点上Snippet宏的指南：<ulink
      url="http://maven.apache.org/guides/mini/guide-snippet-macro.html"
      userlevel="">http://maven.apache.org/guides/mini/guide-snippet-macro.html</ulink>。</para>
    </section>
  </section>
</chapter>
