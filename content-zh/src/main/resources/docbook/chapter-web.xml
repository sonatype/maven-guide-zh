<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="web">
  <title>一个简单的Web应用</title>

  <section id="web-intro">
    <title>介绍</title>

    <para>本章我们使用 Maven Archetype 插件创建一个简单的 web 应用程序。 我们将会在一个名为 Jetty 的 Servlet
    容器中运行这个 web 应用程序，同时添加一些依赖，编写一个简单的 Servlet，并且生成一个 <acronym>WAR</acronym>
    文件。 本章最后，你将能够开始使用 Maven 来提高你开发 web 应用程序的速度。</para>

    <section>
      <title>下载本章样例</title>

      <para>本章的样例是通过 Maven Archetype 插件生成的。
      虽然没有样例源码你也应该能够理解这个开发过程，但还是推荐你下载样例源码作为参考。
      本章的样例项目包含在本书的样例代码中，你可以从两个地方下载，<ulink
      url="http://www.sonatype.com/book/mvn-examples-1.0.zip">http://www.sonatype.com/book/mvn-examples-1.0.zip</ulink>
      或者 <ulink
      url="http://www.sonatype.com/book/mvn-examples-1.0.tar.gz">http://www.sonatype.com/book/mvn-examples-1.0.tar.gz</ulink>
      。解开存档文件至任意目录，然后到 <filename>ch05/</filename> 目录。 在
      <filename>ch05/</filename> 目录你会看到一个名为
      <filename>simple-webapp/</filename> 的目录，它包含了本章开发出来的 Maven
      项目。如果你想要在浏览器里看样例代码，访问 <ulink
      url="http://www.sonatype.com/book/examples-1.0">http://www.sonatype.com/book/examples-1.0</ulink>
      ，然后点击 <filename>ch05/</filename> 目录。</para>
    </section>
  </section>

  <section>
    <title>定义这个简单的Web应用</title>

    <para>我们已经有意的使本章关注于一个简单 Web 应用（<acronym>POWA</acronym>）—— 一个 servlet 和一个
    <acronym>JSP</acronym> 页面。 在接下来的二十多页中，我们不会告诉你如何开发你的 Struts
    2，Tapesty，Wicket，<acronym>JSF</acronym>，或者 Waffle 应用，我们也不会涉及到集成诸如
    Plexus，Guice 或者 Spring Framework 之类的 IoC 容器。 本章的目标是展示给你看开发 web 应用的时候 Maven
    提供的基本设备，不多，也不少。 本书的后面，我们将会看一下开发两个 web 应用，一个使用了 Hibernate， Velocity 和
    Spring Framework，另外一个使用了 Plexus。</para>

    <!--TODO: We need a reference to a chapter that has a more interesting web application example.-->
  </section>

  <section>
    <title>创建这个简单的Web应用</title>

    <para>创建你的 web 应用程序项目，运行 <command>mvn archetype:create</command> ，加上参数
    <varname>artifactId</varname> 和 <varname>groupId</varname>。 指定
    <varname>archetypeArtifactId</varname> 为
    <varname>maven-archetype-webapp</varname>。 如此便创建了恰到好处的目录结构和 Maven
    <acronym>POM</acronym>。</para>

    <screen>~/examples$ <command>mvn archetype:create -DgroupId=org.sonatype.mavenbook.ch05 \
                                                             -DartifactId=simple-webapp \
                                                             -DpackageName=org.sonatype.mavenbook \
                                                             -DarchetypeArtifactId=maven-archetype-webapp</command>
[INFO] [archetype:create]
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating Archetype: maven-archetype-webapp:RELEASE
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.sonatype.mavenbook.ch05
[INFO] Parameter: packageName, Value: org.sonatype.mavenbook
[INFO] Parameter: basedir, Value: ~/examples
[INFO] Parameter: package, Value: org.sonatype.mavenbook
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: artifactId, Value: simple-webapp
[INFO] ********************* End of debug info from resources from generated POM *******
[INFO] Archetype created in dir: ~/examples/simple-webapp </screen>

    <para>在 Maven Archetype 插件创建好了项目之后，切换目录至 <filename>simple-web</filename>
    后看一下 <filename>pom.xml</filename> 。 你会看到如下的 <acronym>XML</acronym>
    文档：</para>

    <example>
      <title>simple-web 项目的初始 <acronym>POM</acronym></title>

      <programlisting language="xml">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.ch05&lt;/groupId&gt;
  &lt;artifactId&gt;simple-webapp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;simple-webapp Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>注意 <sgmltag>packaging</sgmltag> 元素包含的值是 <literal>war</literal>
    。这种打包类型配置让 Maven 以 <acronym>WAR</acronym> 文件的形式生成一个 web 应用。一个打包类型为
    <literal>war</literal> 的项目，将会在 <filename>target/</filename> 目录创建一个
    <acronym>WAR</acronym> 文件，这个文件的默认名称是
    <filename>${artifactId}-${version}.war</filename> 。对于这个项目， 默认的
    <acronym>WAR</acronym> 文件是
    <filename>target/simple-webapp-1.0-SNAPSHOT.war</filename> 。在这个
    <literal>simple-webapp</literal> 项目中，我们已经通过在项目的构建配置中加入
    <sgmltag>finalName</sgmltag> 元素来自定义这个生成的 <acronym>WAR</acronym> 文件的名称。根据
    <literal>simple-webapp</literal> 的 <sgmltag>finalName</sgmltag>
    ，<literal>package</literal> 阶段生成的 <acronym>WAR</acronym> 文件为
    <filename>target/simple-webapp.war</filename> 。</para>
  </section>

  <section>
    <title>配置Jetty插件</title>

    <para>在你已经编译，测试并且打包了你的 web 应用之后，你会想要将它部署到一个 servlet 容器中，然后测试一下由 Maven
    Archetype 插件创建的 <filename>index.jsp</filename> 。通常情况下，你需要下载 Jetty 或者
    Apache Tomcat，解压分发包，复制你的应用程序 <acronym>WAR</acronym> 文件至
    <filename>webapps/</filename> 目录，然后启动你的容器。 现在，实现同样的目的，你不再需要做这些事情。
    取而代之的是，你可以使用 Maven Jetty 插件在 Maven 中运行你的 web 应用。为此，你需要在项目的
    <filename>pom.xml</filename> 中配置 Maven Jetty 插件。
    在你项目的构建配置中添加如下插件元素：</para>

    <example>
      <title>配置 Jetty 插件</title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;build&gt;
    &lt;finalName&gt;simple-webapp&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  [...]
&lt;/project&gt;</programlisting>
    </example>

    <para>在项目的 <filename>pom.xml</filename>中 配置好 Maven Jetty 插件之后，你就可以调用 Jetty
    插件的 Run 目标在 Jetty Servlet 容器中启动你的 web 应用。如下运行 <command>mvn
    jetty:run</command> ：</para>

    <screen>~/examples$ <command>mvn jetty:run</command>
...
[INFO] [jetty:run]
[INFO] Configuring Jetty for project: simple-webapp Maven Webapp
[INFO] Webapp source directory = \
       /Users/tobrien/svnw/sonatype/examples/simple-webapp/src/main/webapp
[INFO] web.xml file = \
       /Users/tobrien/svnw/sonatype/examples/simple-webapp/src/main/webapp/WEB-INF/web.xml
[INFO] Classes = /Users/tobrien/svnw/sonatype/examples/simple-webapp/target/classes
2007-11-17 22:11:50.532::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /simple-webapp
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] Webapp directory = \
       /Users/tobrien/svnw/sonatype/examples/simple-webapp/src/main/webapp
[INFO] Starting jetty 6.1.6rc1 ...
2007-11-17 22:11:50.673::INFO:  jetty-6.1.6rc1
2007-11-17 22:11:50.846::INFO:  No Transaction manager found - if your webapp requires one,\
       please configure one.
2007-11-17 22:11:51.057::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>当 Maven 启动了 Jetty Servlet 容器之后，在浏览器中载入 URL <ulink
    url="http://localhost:8080/simple-webapp/">http://localhost:8080/simple-webapp/</ulink>
    。 Archetype 生成的简单页面 <filename>index.jsp</filename> 没什么价值；它包含了一个文本为“Hello
    World!”的二级标题。 Maven 认为 web 应用程序的文档根目录为
    <filename>src/main/webapp</filename> 。这个目录就是存放
    <filename>index.jsp</filename> 的目录 。 <filename>index.jsp </filename>的内容为
    <xref linkend="web-example-index" />：</para>

    <example id="web-example-index">
      <title>src/main/webapp/index.jsp 的内容</title>

      <programlisting language="xml">&lt;html&gt;
  &lt;body&gt;
    &lt;h2&gt;Hello World!&lt;/h2&gt;
  &lt;/body&gt;
&lt;/html&gt;
</programlisting>
    </example>

    <para>在 <filename>src/main/webapp/WEB-INF</filename> 目录中我们会找到可能是最小的 web
    应用程序描述符 <filename>web.xml</filename>。</para>

    <example>
      <title>src/main/webapp/WEB-INF/web.xml 的内容</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
&lt;/web-app&gt;</programlisting>
    </example>
  </section>

  <section>
    <title>添加一个简单的Servlet</title>

    <para>一个只有一个单独的 JSP 页面而没有任何配置好的 servlet 的 web 应用程序基本是没用的。 让我们为这个应用添加一个简单的
    servlet ，同时为 <filename>pom.xml</filename> 和 <filename>web.xml</filename>
    做些改动以支持这个变化。 首先，我们需要在目录 <filename>src/main/java</filename> 下创建一个名为
    <package>org.sonatype.mavenbook.web</package> 的新的包。</para>

    <screen>$ <command>mkdir -p src/main/java/org/sonatype/mavenbook/web</command>
$ <command>cd src/main/java/org/sonatype/mavenbook/web</command></screen>

    <para>包创建好之后，切换目录至
    <filename>src/main/java/org/sonatype/mavenbook/web</filename> ，创建一个名为
    <filename>SimpleServlet.java</filename> 的 servlet 类，代码如下：</para>

    <example>
      <title>SimpleServlet 类</title>

      <programlisting language="java">package org.sonatype.mavenbook.web;

import java.io.*;
import javax.servlet.*;                                                         
import javax.servlet.http.*;

public class SimpleServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws ServletException, IOException {
    
        PrintWriter out = response.getWriter();
        out.println( "SimpleServlet Executed" );
        out.flush();
        out.close();
    }
}
</programlisting>
    </example>

    <para>我们的 SimpleServlet 仅此而已，一个往响应 <classname>Writer</classname> 打印一条简单信息的
    servlet 。为了把这个 servlet 添加到你的 web 应用，并且使其与请求路径匹配，需要添加如下的
    <sgmltag>servlet</sgmltag> 和 <sgmltag>servlet-mapping</sgmltag> 元素至你项目的
    <filename>web.xml</filename> 文件。 文件 <filename>web.xml</filename> 可以在目录
    <filename>src/main/webapp/WEB-INF</filename> 中找到。</para>

    <example>
      <title>匹配 Simple Servlet</title>

      <programlisting language="xml">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mavenbook.web.SimpleServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;simple&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/simple&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting>
    </example>

    <para>一切文件就绪，准备测试这个 servlet 。 <filename>src/main/java</filename> 下的类，以及
    web.xml 已经被更新了。在启动 Jetty 插件之前，运行 <command>mvn compile</command>
    以编译你的项目：</para>

    <screen>~/examples$ <command>mvn compile</command>
...
[INFO] [compiler:compile]
[INFO] Compiling 1 source file to ~/examples/ch05/simple-webapp/target/classes
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[4,0] \
  package javax.servlet does not exist

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[5,0] \
  package javax.servlet.http does not exist

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[7,35] \
  cannot find symbol
  symbol: class HttpServlet
  public class SimpleServlet extends HttpServlet {

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[8,22] \
  cannot find symbol
  symbol  : class HttpServletRequest
  location: class org.sonatype.mavenbook.web.SimpleServlet

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[9,22] \
  cannot find symbol
  symbol  : class HttpServletResponse
  location: class org.sonatype.mavenbook.web.SimpleServlet

~/ch05/simple-webapp/src/main/java/org/sonatype/mavenbook/web/SimpleServlet.java:[10,15] \
  cannot find symbol
  symbol  : class ServletException
  location: class org.sonatype.mavenbook.web.SimpleServlet
</screen>

    <para>编译失败了，因为你的 Maven 项目没有对 Servlet <acronym>API</acronym> 的依赖。
    在下一节，我们会为你项目的 <acronym>POM</acronym> 添加 Servlet <acronym>API</acronym>
    。</para>
  </section>

  <section>
    <title>添加J2EE依赖</title>

    <para>为了编写一个 servlet ，我们需要添加 Servlet <acronym>API</acronym> 作为项目依赖。
    Servlet 规格说明是一个 <acronym>JAR</acronym> 文件，它能从 Sun Microsystems 的站点下载到
    <ulink
    url="http://java.sun.com/products/servlet/download.html">http://java.sun.com/products/servlet/download.html</ulink>
    。<acronym>JAR</acronym> 文件下载好之后你需要把它安装到位于
    <filename>~/.m2/repository</filename> 的 Maven 本地仓库。你必须为所有 Sun Microsystems
    维护的 <acronym>J2EE</acronym> <acronym>API</acronym> 重复同样的过程，包括
    <acronym>JNDI</acronym>， <acronym>JDBC</acronym>， Servlet，
    <acronym>JSP</acronym>， <acronym>JTA</acronym>， 以及其它。
    如果你不想这么做因为觉得这样太无聊了，其实不只有你这么认为。 幸运的是，有一种更简单的方法来下载所有这些类库并安装到本地仓库 —— Apache
    Geronimo 的独立的开源实现。</para>

    <para>很多年以来，获取 Servlet 规格说明 <acronym>JAR</acronym> 文件的唯一方式是从 Sun
    Microsystems 下载。 你必须到 Sun 的 web 站点，同意并且点击它的许可证协议，这样才能访问 Servlet
    <acronym>JAR</acronym>。这是必须的，因为 Sun 的规格说明 <acronym>JAR</acronym>
    文件并没有使用一个允许再次分发的许可证。 很多年来编写一个 Servlet 或者使用 <acronym>JDBC</acronym>
    之前你必须手工下载 Sun 的构件。 这很乏味并且令人恼火，直到 Apache Geronimo 项目创建了很多通过 Sun
    认证的企业级规格说明实现。 这些规格说明 <acronym>JAR</acronym> 是按照 Apache 软件许可证版本 2.0
    发布的，该许可证允许对源代码和二进制文件进行免费的再次分发。 现在，对你的程序来说，从 Sun Microsystems 下载的 Servlet
    <acronym>API</acronym> <acronym>JAR</acronym> 和从 Apache Geronimo 项目下载的
    <acronym>JAR</acronym> 没什么大的差别。 它们同样都通过了 Sun Microsystems
    的严格的一个测试兼容性工具箱(<acronym>TCK</acronym>)。</para>

    <para>添加像 <acronym>JSP</acronym> <acronym>API</acronym> 或者 Servlet
    <acronym>API</acronym> 这样的依赖现在很简单明了了，不再需要你从 web 站点手工下载
    <acronym>JAR</acronym> 文件然后再安装到本地仓库。 关键是你必须知道去哪里找，使用什么
    <varname>groupId</varname>， <varname>artifactId</varname>， 和
    <varname>version</varname> 来引用恰当的 Apache Geronimo 实现。给
    <filename>pom.xml</filename> 添加如下的依赖元素以添加对 Servlet 规格说明
    <acronym>API</acronym> 的依赖。.</para>

    <example>
      <title>添加 Servlet 2.4 规格说明作为依赖</title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;dependencies&gt;
    [...]
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-servlet_2.4_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1.1&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  [...]
&lt;/project&gt;
</programlisting>
    </example>

    <para>所有 Apache Geronimo 规格说明的实现的 <varname>groupId</varname> 都是
    <package>org.apache.geronimo.specs</package> 。这个
    <varname>artifactId</varname> 包含了你熟悉的规格说明的版本号；例如，如果你要引入 Servlet 2.3
    规格说明，你将使用的 <varname>artifactId</varname> 是
    <literal>geronimo-servlet_2.3_spec</literal> ，如果你想要引入 Servlet 2.4
    规格说明，那么你的 <varname>artifactId</varname> 将会是
    <literal>geronimo-servlet_2.4_spec</literal> 。你必须看一下 Maven 的公共仓库来决定使用什么版本。
    最好使用某个规格说明实现的最新版本。 如果你在寻找某个特定的 Sun 规格说明对应的 Apache Geronimo
    项目，我们已经在附录归纳了一个可用规格说明的列表。</para>

    <para>这里还有必要指出的是我们的这个依赖使用了 <literal>provided</literal> 范围。这个范围告诉 Maven jar
    文件已经由容器“提供”了，因此不再需要包含在 war 中。</para>

    <para>如果你对在这个简单 web 应用编写自定义 <acronym>JSP</acronym> 标签感兴趣，你将需要添加对
    <acronym>JSP</acronym> 2.0 规格说明的依赖。 使用以下配置来加入这个依赖。</para>

    <example>
      <title>添加 JSP 2.0 规格说明作为依赖</title>

      <programlisting language="xml">&lt;project&gt;
  [...]
  &lt;dependencies&gt;
    [...]
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;
      &lt;artifactId&gt;geronimo-jsp_2.0_spec&lt;/artifactId&gt;
      &lt;version&gt;1.1&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  [...]
&lt;/project&gt;
</programlisting>
    </example>

    <para>在添加好这个 Servlet 规格说明依赖之后，运行 <command>mvn clean install</command>
    ，然后运行 <command>mvn jetty:run</command> 。</para>

    <screen>[tobrien@t1 simple-webapp]$ <command>mvn clean install</command>
...
[tobrien@t1 simple-webapp]$ <command>mvn jetty:run</command>
[INFO] [jetty:run]
...
2007-12-14 16:18:31.305::INFO:  jetty-6.1.6rc1
2007-12-14 16:18:31.453::INFO:  No Transaction manager found - if your webapp requires one,\
           please configure one.
2007-12-14 16:18:32.745::INFO:  Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

    <para>到此为止，你应该能够获取 SimpleServlet 的输出。 在命令行，你可以使用 curl 在标准输出打印 servlet
    的输出。</para>

    <screen>~/examples$ <command>curl http://localhost:8080/simple-webapp/simple</command>
SimpleServlet Executed
</screen>
  </section>

  <section>
    <title>小结</title>

    <para>阅读完本章之后，你应该能够启动一个简单的 web 应用程序。 本章并没有详细描述用很多不同的方式来创建一个完整的 web
    引用，其它章节对那些包含很多流行 web 框架和技术的项目提供了更全面的介绍。</para>
  </section>
</chapter>
