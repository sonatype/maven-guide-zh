<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="repository-manager">
  <title>仓库管理器</title>

  <section>
    <title>简介</title>

    <para>仓库管理器有两个服务目的：首先它的角色是一个高度可配置的介于你的组织与公开Maven仓库之间的代理，其次它为你的组织提供了一个可部署你组织内部生成的构件的地方。</para>

    <para>代理Maven仓库有很多好处。对于一开始使用Maven的情况来说，通过为所有的来自中央Maven仓库的构件安装一个本地的缓存，你将加速组织内部的所有构建。如果有开发人员想要下载
    Spring Framework 的2.5版本，并且你在使用Nexus，那些依赖（以及依赖的依赖）只需要从远程仓库下载一次。如果有一个高速的
    Internet
    网络连接，这看起来没什么大不了，但是如果你一直要求你的开发人员去下载几百兆的第三方依赖，那么真正节省的时间将会是Maven检查依赖新版本以及下载依赖的时间。通过本地仓库提供Maven依赖服务可以节省数百的HTTP请求，在大型的多项目构建中，这样可以为一次构件节省几分钟的时间。</para>

    <para>除了简单的时间和带宽的节省，仓库管理器为组织提供了一种控制Maven下载的机制。你可以详细的设置从公开仓库包含或排除特定的构件。能够控制从核心Maven仓库的下载对于很多组织来说是经常是一个必要前提，它们需要维护一个组织中使用依赖的严格控制。一个想要标准化某个如Hibernate或者Spring依赖版本的组织可以通过在仓库管理器中仅仅提供一个特殊版本的构件来加强这种标准。还有一些组织可能关心确保所有外部的依赖拥有和组织的法律规范相容的许可证。如果一个企业生产了一个分发应用程序，它们可能想要确定没有人不小心添加了一个涉及GPL许可证的依赖。仓库管理器为那些需要确信总体架构和政策实施的组织提供了这一层次的控制。</para>

    <para>除了控制对远程仓库的访问以外，仓库管理器也为Maven的全面使用提供了一些很至关重要的东西。除非你希望你组织的每一个成员下载并构建一个单独的内部项目，否则你会希望为开发人员和部门之间提供一种共享内部项目构件的快照版本和发布版本的机制。Nexus为你的组织提供了这样的部署目标。在你安装了Nexus之后，你可以开始使用Maven让它部署快照版和发布版至一个由Nexus管理的定制仓库。</para>

    <section>
      <title>Nexus历史</title>

      <para>Tamas Cservenak 在2005年12月开始为Proximity工作，当时他正想办法将它自己的系统和由Hungarian
      <acronym>ISP</acronym>提供的慢得难以置信的<acronym>ADSL</acronym>连接隔离开。Proximity以一个简单web应用的形式启动，用来为有网络连接问题的小型组织代理构件。为Maven构件创建一个对中央核心仓库的本地的命令驱动的缓存，能让组织访问来自中央核心仓库的构件，而且它同时也能确保这些构件不会通过很慢的<acronym>ADSL</acronym>连接来下载，要知道很多开发人员在使用这个连接。在2007年，Sonatype请求Tamas帮助创建一个类似的名为Nexus的产品。Nexus目前可以被认为是Proximity逻辑上的下一个步伐。</para>

      <para>Nexus目前有一个活动的开发团队包括Tamas Cservenak，Max Powers，Dmitry Platonoff
      和Brian Fox。Nexus的关于索引的部分代码也同时在m2eclipse中被使用，这些代码目前由Eugene
      Kuleshov开发。</para>
    </section>
  </section>

  <section>
    <title>安装Nexus</title>

    <section>
      <title>从Sonatype下载Nexus</title>

      <para>你可以从<ulink
      url="http://nexus.sonatype.org">http://nexus.sonatype.org</ulink>找到关于Nexus的信息。要下载Nexus，访问<ulink
      url="http://nexus.sonatype.org/downloads/">http://nexus.sonatype.org/downloads/</ulink>。点击下载链接，下载适用于你平台的存档文件。Nexus目前有<acronym>ZIP</acronym>和Gzip归档的<acronym>TAR</acronym>两种可用形式。</para>
    </section>

    <section>
      <title>安装Nexus</title>

      <para>安装Nexus很简单，打开Nexus归档文件至一个目录。如果你正在本地工作站上安装Nexus，以测试它的运行，你可以将其安装至你的用户目录，或者随便什么你喜欢的地方；Nexus没有任何硬编码的目录，它能在任意目录运行。如果你下载了一个<acronym>ZIP</acronym>归档文件，运行：</para>

      <screen>$ <command>unzip nexus-1.0.0-beta-3-bundle.zip</command></screen>

      <para>如果你下载了GZip归档的<acronym>TAR</acronym>文件，运行：</para>

      <screen>$ <command>tar xvzf nexus-1.0.0-beta-3-bundle.tgz</command></screen>

      <para>如果你正在一个服务器上安装Nexus，你可能想要使用的目录不是你的用户目录。在Unix机器上，这可能是<filename>/usr/local/nexus-1.0.0-beta-3</filename>和一个指向Nexus目录的符号链接<filename>/usr/local/nexus</filename>。使用一个通用的符号链接来指向Nexus的某个特定版本是一个普遍的实践，它能让你更容易的将Nexus更新至最新的版本。</para>

      <screen>$ <command>sudo cp nexus-1.0.0-beta-3-bundle.tgz /usr/local</command>
$ <command>cd /usr/local</command>
$ <command>sudo tar xvzf nexus-1.0.0-beta-3-bundle.tgz</command>
$ <command>ln -s nexus-1.0.0-beta-3 nexus</command></screen>

      <para>虽然对于Nexus的运行来说这不是必要的，你可能想要设置一个环境变量<varname>NEXUS_HOME</varname>，指向Nexus的安装目录。本章通过<varname>${NEXUS_HOME}</varname>的形式来引用这个位置。</para>
    </section>

    <section>
      <title>运行Nexus</title>

      <para>当你启动Nexus，就是启动一个web服务器，它的默认地址是<varname>localhost:8081</varname>。Nexus在一个名为Jetty的servlet容器中运行，它使用一个名为<ulink
      url="http://wrapper.tanukisoftware.org/doc/english/introduction.html">Tanuki
      Java Service
      Wrapper</ulink>的本地服务包裹器启动。这个服务包裹器可以被配置成以Windows服务或Unix守护线程的形式运行Nexus。要启动Nexus，你需要为你的平台找到合适的启动脚本。要查看可用平台的列表，查看<filename>${NEXUS_HOME}/bin/jsw</filename>目录的内容。</para>

      <para>下面的例子展示了使用Mac
      OSX的脚本启动Nexus。首先我们列出<filename>${NEXUS_HOME}/bin/jsw</filename>的内容以查看可用的平台，然后我们用<command>chmod</command>命令使这个bin目录的内容可执行。Mac
      OSX包裹器通过调用<command>app
      start</command>启动，然后我们tail在<filename>${NEXUS_HOME}/container/logs</filename>中的<filename>wrapper.log</filename>。Nexus会初始化自己然后打印出一条信息说明它正在监听<varname>localhost:8081</varname>。</para>

      <screen>$ <command>cd Nexus</command>
$ <command>ls ./bin/jsw/</command>
aix-ppc-32/          linux-ppc-64/        solaris-sparc-32/
aix-ppc-64/          linux-x86-32/        solaris-sparc-64/
hpux-parisc-32/      linux-x86-64/        solaris-x86-32/
hpux-parisc-64/      macosx-universal-32/ windows-x86-32/
$ <command>chmod -R a+x bin</command>
$ <command>./container/bin/jsw/macosx-universal-32/app start</command>
Nexus Repository Manager...
$ <command>tail -f container/logs/wrapper.log</command> 
INFO  ... [ServletContainer:default] - Started SelectChannelConnector@0.0.0.0:8081
</screen>

      <para>到目前为止，Nexus已经开始运行并监听端口8081。要使用Nexus，启动一个web浏览器然后输入URL：<ulink
      url="http://localhost:8081/nexus">http://localhost:8081/nexus</ulink>。点击web页面右上角的“Log
      In”链接，你应该看到如下的登陆对话框。</para>

      <para><emphasis>默认的NEXUS用户名和密码是"admin" 和 "admin123"。</emphasis></para>

      <figure>
        <title>Nexus登陆窗口(默认 用户名/密码 是 admin/admin123)</title>

        <screenshot>
          <screeninfo>这是Nexus的初始屏幕。默认的管理员登陆用户名是“admin”，默认的密码是“admin123”</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_nexus-login.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>
    </section>

    <section id="sect-repoman-post-install">
      <title>安装后检查单</title>

      <para>Nexus带有默认的密码和仓库索引设置，它们都需要更改以满足你的安装需要（以及安全）。安装完并运行了Nexus后，你需要确认你完成了下列任务：</para>

      <variablelist>
        <varlistentry>
          <term>更改管理员密码和Email地址</term>

          <listitem>
            <para>默认的管理密码是<varname>admin123</varname>。对一个全新的Nexus安装，你首先要做的是更改这个密码。要更改默认的管理员登陆名"admin"及密码"admin123"，在浏览窗口的左边导航菜单中的Security部分点击Change
            Password。</para>

            <!--Put in instructions for email address-->
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>配置SMTP设置</term>

          <listitem>
            <para>Nexus可以发送用来用户名和密码的email，要开启这个特性，你需要用SMTP主机和端口配置Nexus，以及相关的Nexus用来连接邮件服务器的认证参数。为此，载入如<xref
            linkend="sect-repoman-server-conf" />中的服务器配置对话框。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>开启远程索引下载</term>

          <listitem>
            <para>Nexus带有三个重要的代理仓库，有中央Maven仓库，Apache快照仓库，和Codehaus快照仓库。它们中的每一个仓库都包含了数千（或数万）的构件，下载每个仓库的所有内容是不切实际的。处于这个原因，大部分仓库维护了一个编录了整个内容的Lucene索引，以提供快速和有效的搜索。Nexus使用这些远程索引搜索构件，但是默认设置我们关闭了索引下载。要下载远程索引，</para>

            <orderedlist>
              <listitem>
                <para>点击Administration菜单下面的Repositories，更改三个代理仓库的Download
                Remote Indexes为true。你需要为此载入如<xref lang=""
                linkend="sect-manage-repo" />中的对话框。</para>
              </listitem>

              <listitem>
                <para>在每个代理仓库上右击然后选择Re-index。这会触发Nexus下载远程的索引文件。</para>
              </listitem>
            </orderedlist>

            <para>Nexus下载整个索引可能需要好几分钟，但是一旦你下载好之后，你就能够搜索Maven仓库的所有内容了。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>Sonatype想要确信没有创建一个会在默认情况下对中央仓库造成大量拥挤的产品。虽然大部分用户会想要开启远程索引下载，我们还是不想使之成为默认设置，当数百万用户下载一个新版本的Nexus继而不断的下载这个21MB的中央索引的时候，会制造对我们自己的拒绝服务攻击。如果你想要Nexus返回全部的搜索结果，你就必须显式的开启远程索引下载。</para>
      </note>
    </section>

    <section>
      <title>为Redhat/Fedora/CentOS设置启动脚本</title>

      <para>你可以将Nexus配置成自动启动，通过将<filename>app</filename>脚本拷贝到<filename>/etc/init.d</filename>目录。在一个Redhat变种的Linux系统上（Redhat,
      Fedora, 或者 CentOS），以root用户执行下列操作：</para>

      <orderedlist>
        <listitem>
          <para>复制<filename>${NEXUS_HOME}/bin/jsw/linux-ppc-64/app</filename>，或<filename>${NEXUS_HOME}/bin/jsw/linux-x86-32/app</filename>，或<filename>${NEXUS_HOME}/bin/jsw/linux-x86-64/app</filename>至<filename>/etc/init.d/nexus</filename>。</para>
        </listitem>

        <listitem>
          <para>使<filename>/etc/init.d/nexus</filename>脚本可运行 —— <command>chmod
          755 /etc/init.d/nexus</command>。</para>
        </listitem>

        <listitem>
          <para>编辑该脚本，更改下列变量。</para>

          <itemizedlist>
            <listitem>
              <para>更改 <varname>APP_NAME</varname> 为 "nexus"</para>
            </listitem>

            <listitem>
              <para>更改 <varname>APP_LONG_NAME</varname> 为 "Sonatype
              Nexus"</para>
            </listitem>

            <listitem>
              <para>添加一个变量 <varname>NEXUS_HOME</varname> 指向你的 Nexus
              安装目录</para>
            </listitem>

            <listitem>
              <para>添加一个变量 <varname>PLATFORM</varname> 内容包含
              <varname>linux-x86-32</varname>，
              <varname>linux-x86-64</varname>， 或
              <varname>linux-ppc-64</varname></para>
            </listitem>

            <listitem>
              <para>更改 <varname>WRAPPER_CMD</varname> 为
              <filename>${NEXUS_HOME}/bin/jsw/${PLATFORM}/wrapper</filename></para>
            </listitem>

            <listitem>
              <para>更改 <varname>WRAPPER_CONF</varname> 为
              <filename>${NEXUS_HOME}/conf/wrapper.conf</filename></para>
            </listitem>

            <listitem>
              <para>更改 <varname>PIDDIR</varname> 为
              <filename>/var/run</filename>.</para>
            </listitem>

            <listitem>
              <para>添加一个 <varname>JAVA_HOME</varname> 变量指向你的本地 Java 安装</para>
            </listitem>

            <listitem>
              <para>添加 <filename>${JAVA_HOME}/bin</filename> 至
              <varname>PATH</varname></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>(可选) 设置 RUN_AS_USER 为 "nexus". 如果你这么做，你需要：</para>

          <itemizedlist>
            <listitem>
              <para>创建一个 nexus 用户</para>
            </listitem>

            <listitem>
              <para>更改你的 nexus 安装目录的 Owner 和 Group 为 nexus</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>

      <para>最后你应该有一个文件<filename>/etc/init.d/nexus</filename>，它拥有如下的一些列配置属性（假设你在<filename>/usr/local/nexus</filename>安装Nexus，你在<filename>/usr/java/latest</filename>安装了Java）：</para>

      <programlisting>JAVA_HOME=/usr/java/latest
PATH=${PATH}:${JAVA_HOME}/bin
APP_NAME="nexus"
APP_LONG_NAME="Sonatype Nexus"
NEXUS_HOME=/usr/local/nexus
PLATFORM=linux-x86-64
WRAPPER_CMD="${NEXUS_HOME}/bin/jsw/${PLATFORM}/wrapper"
WRAPPER_CONF="${NEXUS_HOME}/conf/wrapper.conf"
PRIORITY=
PIDDIR="/var/run"
#RUN_AS_USER=nexus
</programlisting>

      <para>这个脚本有一个适当的<command>chkconfig</command>指令，因此要添加Nexus为一个服务，你要做的是运行如下的命令：</para>

      <screen>$ <command>cd /etc/init.d</command>
$ <command>chkconfig --add nexus</command>
$ <command>chkconfig --levels 345 nexus on</command>
$ <command>service nexus start</command>
Starting Sonatype Nexus...
$ <command>tail -f /usr/local/nexus/logs/wrapper.log</command></screen>

      <para>第二个命令添加nexus为一个服务，可以由<command>service</command>命令启动和停止，可以由<command>chkconfig</command>命令管理。<command>chkconfig</command>管理<filename>/etc/rc[0-6].d</filename>中的符号链接，当操作系统重启或者在运行级别中转换时，它们控制服务的启动和停止。第三个命令添加nexus至运行级别3，4，和5
      。service命令启动Nexus，最后的命令追踪<filename>wrapper.log</filename>以验证Nexus成功启动。如果Nexus成功启动了你应该看到一个信息告诉你Nexus正在端口8001监听<acronym>HTTP</acronym>连接。</para>
    </section>

    <section>
      <title>升级Nexus版本</title>

      <para>升级一个已安装的Nexus版本十分容易。每个Nexus版本有两个可用的归档文件可下载。完整的归档文件包含Nexus应用程序，Nexus启动脚本，以及用来保存仓库索引和远程仓库本地缓存的工作目录。如果你大量的使用Nexus，这个工作目录会包含数G的构件，你不会希望在每次升级Nexus的时候必须重新创建这个仓库。升级下载文件被创建成为用户提供一个方便的形式升级Nexus，它会保存Nexus数据；升级下载文件只包含Nexus应用程序代码。第一次你安装Nexus的时候，你下载完全的Nexus分发包，当你想要升级你的Nexus安装，同时保留你的仓库数据的时候，你只要下载升级分发包。</para>

      <para>要升级Nexus，只要下载“upgrade”分发包，而非“bundle”分发包。升级分发包的内容存储在一个包含nexus版本号（如<filename>nexus-1.0.0-beta-3</filename>）的文件夹中。这个文件夹可以解开至<filename>$NEXUS_HOME/runtime/apps</filename>，不用覆盖当前安装版本的内容。</para>

      <screen>$ <command>cd $NEXUS_HOME/runtime/apps</command>
$ <command>unzip nexus-1.0.0-beta-3-upgrade.zip</command></screen>

      <para>如果你下载了GZip归档的<acronym>TAR</acronym>文件，运行：</para>

      <screen>$ <command>cd $NEXUS_HOME/runtime/apps</command>
$ <command>tar xvzf nexus-1.0.0-beta-3-upgrade.tgz</command></screen>

      <para>当升级归档文件解压至<filename>$NEXUS_HOME/runtime/apps</filename>后，你必须从之前的Nexus版本复制配置文件至新安装的版本。从<filename>$NEXUS_HOME/runtime/apps/nexus/conf/nexus.xml</filename>复制<filename>nexus.xml</filename>至<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-3/conf</filename>。你应该也复制所有你自定义的日志配置文件<filename>log4j.properties</filename>和<filename>jul-logging.properties</filename>。在你从当前的Nexus版本复制了配置文件至新版本的Nexus后，停止Nexus服务器。</para>

      <para>现在，你需要重命名<filename>$NEXUS_HOME/runtime/apps/nexus</filename>目录为一个反映它旧版本号的名称。比如，在这个例子中<filename>$NEXUS_HOME/runtime/apps/nexus</filename>将成为<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-3</filename>。然后，将你新版本改为<filename>$NEXUS_HOME/runtime/apps/nexus</filename>。在Unix系统上，你需要创建一个符号链接<filename>$NEXUS_HOME/runtime/apps/nexus</filename>指向<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-2</filename>。在Windows系统上，你可能需要复制<filename>$NEXUS_HOME/runtime/apps/nexus-1.0.0-beta-2</filename>至<filename>$NEXUS_HOME/runtime/apps/nexus</filename>。在你用新版本的Nexus交换了旧版本的Nexus后，你应该能使用启动脚本启动Nexus。Nexus启动之后，检查<filename>$NEXUS_HOME/logs/wrapper.log</filename>。Nexus初始化之后，它会打印出Nexus版本号。</para>
    </section>
  </section>

  <section>
    <title>使用Nexus</title>

    <para>Nexus为那些只需要搜索，浏览构件，以及查阅系统RSS源的用户提供了匿名访问。匿名访问级别更改了导航菜单，以及当你在一个仓库上右击时可用的选项。这种只读访问显示了如<xref
    linkend="fig-repoman-anonymous-interface" />的用户界面。</para>

    <figure id="fig-repoman-anonymous-interface">
      <title>匿名用户的Nexus界面</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figs/web/repository-manager_public-interface.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>浏览仓库</title>

      <para>Nexus最直接的用途之一就是浏览Maven仓库的结构。如果你点击Views菜单下的Browse
      Repositories菜单项。<xref
      linkend="fig-nexus-browse-repo" />中的上面一半给你显示了带有仓库类型和仓库状态的组列表和仓库列表。</para>

      <figure id="fig-nexus-browse-repo">
        <title>浏览一个Nexus仓库</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_browse-repositories.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>当你浏览一个仓库的时候，你可以在任意一个文件上右击然后直接下载到你本地。这能让你手工获取某个特定的构件，或者在浏览器中检查一个<acronym>POM</acronym>文件。</para>
    </section>

    <section>
      <title>浏览组</title>

      <para>Nexus包含排序好的仓库组，它们能让你通过一个单独的<acronym>URL</acronym>来暴露一系列的仓库。通常情况下，一个组织会指向两个默认的Nexus组：Public
      Repositories组和Public Snapshot
      Repositories组。很多最终用户不需要知道哪些构件来自哪个特定的仓库，他们只需要能够浏览公共仓库组就可以了。为了支持这个用例，Maven允许你浏览一个Nexus组的内容，它就像是一归并而来的树状的仓库。<xref
      linkend="fig-nexus-browse-group" />显示了这个浏览界面，其中一个Nexus组被选中以浏览。对用户体验来说，浏览一个Nexus组和浏览一个Nexus仓库没任何区别。</para>

      <figure id="fig-nexus-browse-group">
        <title>浏览一个Nexus组</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_browse-group.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>搜索构件</title>

      <para>在左边的导航区域，紧靠放大镜有一个构件搜索输入框。要通过groupId或者artifactId搜索一个构件，输入一些文本然后点击放大镜。输入字段"maven"然后点击放大镜会产生如<xref
      linkend="fig-nexus-search" />的搜索结果。</para>

      <figure id="fig-nexus-search">
        <title>关键词为"maven"的构件搜索结果</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_artifact-search.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>在你找出你在要找的构件之后，你可以点击Download链接来下载这个构件。Nexus每次为你显示50条结果，并且为你浏览其它搜索结果在底部提供了链接。如果你更喜欢看到所有匹配构件的列表，你可以在搜索结果面板底部的下拉菜单中选择Fetch
      All。</para>

      <para>除了通过一个groupId或者一个artifactId搜索，Nexus还有一个功能能让你通过校验和来搜索一个构件。</para>

      <warning>
        <para>让我来猜一下？你安装了Nexus，使用了搜索框，输入了一个构件的group的名字，按下搜索，然后什么都没看见。没有结果。Nexus默认不会去获取远程仓库索引，你需要为那三个Nexus自带的仓库激活远程索引的下载。没有这些索引，没有没东西可以搜索。你可以在<xref
        linkend="sect-repoman-post-install" />中查找激活索引下载的指令。</para>
      </warning>
    </section>

    <section>
      <title>浏览系统RSS源</title>

      <para>Nexus提供了一些捕捉系统事件的RSS源，你可以通过点击View菜单下的System Feeds来浏览它们。如<xref
      linkend="fig-repoman-system-feeds" />中的面板。你可以使用这些简单的界面来浏览最近Nexus中发生的关于构件部署，构件缓存，存储变化的报告。</para>

      <figure id="fig-repoman-system-feeds">
        <title>浏览Nexus系统信息源</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_system-feed.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>如果你正在一个很大的组织工作，很多开发团队往同样一个Nexus实例部署构件，这些信息源就非常有用。有了这样的准备，所有组织开发人员可以为新部署的构件订阅<acronym>RSS</acronym>信息源，以确保当一个新的发布版提交到Nexus后所有的人都知道。将系统事件暴露成<acronym>RSS</acronym>信息源也将大门向其他人开启，包括一些对该信息更富创意的使用，如将Nexus与外部的自动测试系统想连。要访问某个特定信息源的<acronym>RSS</acronym>，在System
      Feeds观察面板中选择一个信息源然后点击Subscribe按钮。Nexus会在你浏览器中载入这个<acronym>RSS</acronym>信息源，然后你可以在你最喜欢的<acronym>RSS</acronym>阅读器中订阅这个信息源。</para>

      <para>在系统信息源视图中有6个可用的信息源，每一个信息源都有一个类似于下面的<acronym>URL</acronym>：</para>

      <screen>http://localhost:8081/nexus/service/local/feeds/recentChanges</screen>

      <para>其中<varname>recentChanges</varname>将会被你试图阅读的信息源标识所替换。可能的系统信息源包括：</para>

      <table>
        <title>可用的系统信息源</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>信息源标识符</entry>

              <entry>描述</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>brokenArtifacts</varname></entry>

              <entry>校验和不匹配，找不到校验和，不可用的POM</entry>
            </row>

            <row>
              <entry><varname>recentCacheOrDeployments</varname></entry>

              <entry>所有仓库中有新的构件（从远程缓存的或者部署上去的）</entry>
            </row>

            <row>
              <entry><varname>recentlyCached</varname></entry>

              <entry>所有仓库中有新的缓存构件</entry>
            </row>

            <row>
              <entry><varname>recentlyDeployed</varname></entry>

              <entry>所有仓库中有新的部署的构件</entry>
            </row>

            <row>
              <entry><varname>recentChanges</varname></entry>

              <entry>所有缓存，部署，或者删除动作</entry>
            </row>

            <row>
              <entry><varname>systemRepositoryStatusChanges</varname></entry>

              <entry>自动或者用户发起的变更（服务失效和阻塞的代理）</entry>
            </row>

            <row>
              <entry><varname>systemChanges</varname></entry>

              <entry>启动Nexus，更改配置，重新编制索引，以及属性重建</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>浏览日志文件和配置</title>

      <para>日志和配置文件只有在管理员用户的Views菜单中可见。点击该选项会看到如<xref
      linkend="fig-nexus-logs" />中的对话框。在这个屏幕你可以通过点击Download按钮旁边的下拉选择菜单来查看一下的日志和配置文件。</para>

      <variablelist>
        <varlistentry>
          <term><filename>nexus.log</filename></term>

          <listitem>
            <para>把它想成是一个Nexus的总体的应用程序日志。除非你是管理员用户，否则你可能不会对这个日志的信息有什么兴趣。如果你正试图调试一个错误，或者你有Nexus中未发现的bug。你会使用这个日志查看器来诊断Nexus的问题。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>nexus-rest-0.log</filename></term>

          <listitem>
            <para>核心的Nexus服务实际上是一堆<acronym>REST</acronym>服务，你正使用的<acronym>UI</acronym>只是和这些<acronym>REST</acronym>服务交互以配置和查看Nexus的组及仓库。这个日志文件反映了由Nexus
            <acronym>UI</acronym>和Nexus
            <acronym>REST</acronym>服务交互所生成的活动。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>nexus.xml</filename></term>

          <listitem>
            <para>这个XML文件包含了大部分你所使用的Nexus实例的配置数据。它被存储在<filename>${NEXUS_HOME}/runtime/apps/nexus/conf/nexus.xml</filename>。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-nexus-logs">
        <title>浏览Nexus日志和配置文件</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_log-file.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>更改你的密码</title>

      <para>如果你拥有适当的安全权限，你还会在浏览器的左边看到一个可以更改你密码的选项。要更改你的密码，点击change
      password，提供你现在的密码，然后输入一个新密码。当你点击Change Password后，你的Nexus密码就被更改了。</para>

      <figure>
        <title>更改你的Nexus密码</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/repository-manager_change-password.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section id="sect-conf-maven-nexus">
    <title>配置Maven使用Nexus</title>

    <para>要使用Nexus，你需要配置Maven去检查Nexus而非公共的仓库。为此，你需要编辑在你的<filename>~/.m2/settings.xml</filename>文件中的mirror配置。首先，我们会演示如何配置Maven去检查你的Nexus安装而非直接从中央Maven仓库获取构件。在我们覆盖了中央仓库并演示了Nexus可以工作之后，我们会转回来，提供一个更实际的，包含发布版和快照版的配置集合。</para>

    <section id="sect-simple-maven-nexus">
      <title>使用Nexus中央代理仓库</title>

      <para>要配置Maven去查阅Nexus而非中央Maven仓库，在你的<filename>~/.m2/settings.xml</filename>文件中添加如<xref
      linkend="ex-override-central" />的mirror配置。</para>

      <example id="ex-override-central">
        <title>为Nexus配置Maven Settings (~/.m2/settings.xml)</title>

        <programlisting language="xml">&lt;?xml version="1.0"?&gt;
&lt;settings&gt;
  ...
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;Nexus&lt;/id&gt;
      &lt;name&gt;Nexus Public Mirror&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  ...
&lt;/settings&gt;
</programlisting>
      </example>

      <para>在你将Nexus配置成所有仓库的镜像之后，Maven现在会从本地的Nexus安装查阅，而非去外面查阅中央Maven仓库。如果对Nexus有一个构件请求，本地的Nexus安装会提供这个构件。如果Nexus没有这个构件，Nexus会从远程仓库获取这个构件，然后添加至远程仓库的本地镜像。</para>

      <para>要测试Nexus如何工作的，从你的本地Maven仓库中删除一个目录，然后运行Maven构建。如果你删除了<filename>~/.m2/repository/org</filename>，你会删除一大堆的依赖（包括Maven
      插件）。下次你运行Maven的时候，你应该看到如下的信息：</para>

      <screen>$ <command>mvn clean install</command>
...
Downloading: http://localhost:8081/nexus/content/groups/public/...
3K downloaded
</screen>

      <para>这个输出应该能让你相信Maven正和你本地的Nexus通讯，而非向外面的中央Maven仓库获取构件。在你基于本地的Nexus运行过一些构建之后，你就可以浏览缓存在你本地Nexus中的内容。登陆Nexus然后点击导航菜单的左边的构件搜索。在搜索框中输入"maven"，你应该能看到一些像下面的内容。</para>
    </section>

    <section>
      <title>使用Nexus作为快照仓库</title>

      <para><xref
      linkend="sect-simple-maven-nexus" />中的Maven配置能让你使用Nexus公共组，这个组从4个由Nexus管理的仓库解析构件，但是它不让你查阅<varname>public-snapshots</varname>组，该组包括了Apache和Codehaus的快照版。要配置Maven让它为发布版和插件都使用Nexus，你必须配置Maven，通过往你的Maven文件<filename>~/.m2/settings.xml</filename>中添加如下的镜像配置，使其查阅Nexus的组。</para>

      <example id="ex-maven-nexus-snap">
        <title>配置Maven使其为发布版和快照版使用Nexus</title>

        <programlisting language="xml">&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This is used to direct the public snapshots repo in the 
          profile below over to a different nexus group --&gt;
      &lt;id&gt;nexus-public-snapshots&lt;/id&gt;
      &lt;mirrorOf&gt;public-snapshots&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public-snapshots&lt;/url&gt;
    &lt;/mirror&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;development&lt;/id&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
    &lt;profile&gt;
      &lt;!--this profile will allow snapshots to be searched when activated--&gt;
      &lt;id&gt;public-snapshots&lt;/id&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;public-snapshots&lt;/id&gt;
          &lt;url&gt;http://public-snapshots&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;public-snapshots&lt;/id&gt;
          &lt;url&gt;http://public-snapshots&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;development&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;</programlisting>

        <para>在<xref
        linkend="ex-maven-nexus-snap" />中我们定义了两个profile：<varname>development</varname>和<varname>public-snapshots</varname>。<varname>development</varname>
        profile被配置成从central仓库下载构件，通过一个假的<acronym>URL</acronym>
        <varname>http://central</varname>。<varname>public-snapshots</varname>被配置成从public-snapshot仓库下载构件，通过一个假的<acronym>URL</acronym>
        <varname>http://public-snapshots</varname>。这些假的<acronym>URL</acronym>被同一<filename>settings.xml</filename>文件中的两个mirror配置重写。第一个镜像被配置成覆盖public-snapshots仓库，而使用<varname>public-snapshots</varname>
        Nexus组。第二个镜像覆盖所有其它的仓库，而使用<varname>public</varname>
        Nexus组。有了这些配置，所有的构建都会包含<varname>public</varname>
        Nexus组，如果你想包含<varname>public-snapshots</varname>组，你必须添加public-snapshots这个Profile，通过在命令行使用如下的
        -P 标志。</para>

        <screen>$ mvn -Ppublic-snapshots clean install</screen>
      </example>
    </section>

    <section>
      <title>为缺少的依赖添加仓库</title>

      <para>如果你已经将你的Maven
      <filename>settings.xml</filename>配置成使用Nexus作为所有公共仓库和所有公共快照仓库的镜像，你可能会遇到一些项目不能够从你的本地Nexus获取需要的构件。这很常见，因为你经常会构建一些在<filename>pom.xml</filename>中自定义一组<varname>repositories</varname>和<varname>snapshotRepositories</varname>的项目。如果你正在构建开源项目，或者往你的配置中添加了自定义的第三方Maven仓库，那么这种情况就会发生。</para>

      <para>作为一个例子，让我们试试从我们签出的源代码构件Apache Shindig。什么是Apache
      Shindig?对该例来说这不重要；我们需要的是一个能很容易签出和构建的样例项目。如果你实在很想知道，Shindig是在Apache
      Incubator中的一个围绕Google的OpenSocial
      API的项目。Shindig目标是提供一个允许人们运行OpenSocial小工具的容器。它给我们提供了一个有趣的样例工程，因为它有一些没有被加入到中央Maven仓库的组件，于是依赖于一些自定义的Maven仓库，使用Shindig我们可以向你展示当Nexus没有你要的构件的时候会发生什么，以及你能够使用怎样的步骤来给Nexus添加仓库。</para>

      <para>下面的样例假设你已经安装了Subversion，并且你正在命令行运行Subversion。我们使用Subversion从Apache
      Incubator签出Apache Shindig然后尝试构建它。为此，执行下面的命令：</para>

      <screen>$ <command>svn co http://svn.apache.org/repos/asf/incubator/shindig/trunk shindig</command>
... Subversion will checkout the trunk of Apache Shindig ...
$ <command>cd shindig</command>
$ <command>mvn install</command>
... Maven will build Shindig ...
Downloading: http://localhost:8081/nexus/content/groups/public/caja/caja/r820/caja-r820.pom
Downloading: http://localhost:8081/nexus/content/groups/public/caja/caja/r820/caja-r820.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) caja:caja:jar:r820

  Try downloading the file manually from the project website.

...
----------
1 required artifact is missing.

for artifact: 
  org.apache.shindig:gadgets:war:1-SNAPSHOT

from the specified remote repositories:
  oauth (http://oauth.googlecode.com/svn/code/maven),
  central (http://central),
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),
  caja (http://google-caja.googlecode.com/svn/maven)
</screen>

      <para>这个构建失败了因为它下载不到一个构件。这个构件有一个group标识符为<varname>caja</varname>，artifactId是<varname>caja</varname>，版本是<varname>r820</varname>。这是一个存在于自定义仓库<ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>中的一个构件。Maven没能够下载到这个构件是因为你的<filename>settings.xml</filename>被配置成指引所有的镜像至位于我们Nexus安装的<varname>public</varname>和<varname>public-snapshots</varname>组。即使Apache
      Shindig的<filename>pom.xml</filename>定义了一个仓库并且将其指向了<ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>，Nexus不会从一个它不知道的仓库中去获取构件。事实上，关于这次构建有两个仓库Nexus不知道：<varname>caja</varname>和<varname>oauth</varname>。<ulink
      url="http://code.google.com/p/google-caja/">Caja</ulink>和<ulink
      url="http://code.google.com/p/oauth/">OAuth</ulink>是两个仍然处于开发中的类库。两个项目都被“发布”了，而且Shindig所依赖的版本当然不是快照版，但是这些项目没有被发布到中央Maven仓库。在我们能构建这个项目之前，我们需要想办法让Nexus知道这些仓库。</para>

      <para>有两种方法可以解决这个问题。首先，你可以更改你的以<filename>settings.xml</filename>覆盖特定的仓库定义符。你可以更改<filename>settings.xml</filename>中的<sgmltag>mirrorOf</sgmltag>元素为"central"，而非让Nexus
      public组
      <sgmltag>mirrorOf</sgmltag>所有的仓库。如果你这么做了，Maven就会试图直接从<varname>oauth</varname>和<varname>caja</varname>仓库下载依赖。这行得通，因为Maven只会为那些匹配<filename>settings.xml</filename>中<sgmltag>mirrorOf</sgmltag>元素的仓库去查阅Nexus。如果Maven看到一个仓库定义符<varname>caja</varname>或者<varname>oauth</varname>，而且没有在你的<filename>settings.xml</filename>中看到一个镜像，它会直接去连接这个仓库。</para>

      <para>第二种方法，更有趣的选择是添加这些仓库至Nexus，并且添加这些仓库至public组。</para>
    </section>

    <section>
      <title>添加一个新的仓库</title>

      <para>要添加caja仓库，以管理员登陆Nexus，在左边导航菜单Configuration部分中点击Repositories链接。点击这个链接后会看到一个窗口列出了所有Nexus所知道的仓库。之后你想要创建一个新的代理仓库。为此，点击在仓库列表正上方的Add链接。点击单词Add右边的朝下的箭头，会看到一个下拉菜单，带有选项：Hosted，Proxy，和Vitual。既然你要创建一个代理仓库，点击Proxy。之后，你会看到一个如<xref
      linkend="fig-add-repo" />的页面。填充那些必填字段，Repository ID为"caja"，Repository
      Name为"Google Caja"。设置Repository Policy为"Release"，以及Remote Storage
      Location为<ulink
      url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>。</para>

      <figure id="fig-add-repo">
        <title>添加一个Nexus仓库</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_add-repository.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>在你填写完这个页面之后，点击Save按钮。Nexus就会接受这个caja代理仓库的配置。为oauth仓库重复同样的工作。创建一个仓库，Repository
      ID为oauth，选择Release policy，Remote Storage Location为<ulink
      url="http://oauth.googlecode.com/svn/code/maven">http://oauth.googlecode.com/svn/code/maven</ulink>。</para>
    </section>

    <section>
      <title>添加一个仓库至一个组</title>

      <para>下一步你需要做的是添加这些新的仓库至public
      Nexus组。为此，点击左边导航菜单中Configuration部分的Groups链接。当你看到组管理页面后，点击public
      repositories 组，你应该能看到如<xref linkend="fig-add-to-group" />的页面。</para>

      <figure id="fig-add-to-group">
        <title>添加新的仓库至一个Nexus组</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_add-to-group.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>Nexus使用了一个十分有趣的，名为<ulink
      url="http://extjs.com/">ExtJS</ulink>的Javascript小工具类库。ExtJS提供了许多有趣的UI小工具，能为用户提供丰富的交互体验。要添加这两个新的仓库至<varname>public</varname>
      Nexus组，在可用仓库列表中找到仓库，点击你想要添加的仓库然后拖拉进Ordered Group
      Repositories。一旦仓库在Ordered Group
      Repositories列表中，你可以点击并拖拉列表中的仓库，以改变为匹配构件进行搜索的仓库的顺序。在Google Caja和Google
      OAuth项目仓库被添加到public Nexus组之后，你应该能够构建Apache
      Shindig并观察到Maven从各自的仓库下载Caja和OAuth。</para>
    </section>
  </section>

  <section>
    <title>配置Nexus</title>

    <para>本节展示的很多配置页面只对管理员可用。Nexus允许管理员用户自定义仓库列表，创建仓库组，自定义服务器设置，以及创建Maven用来包含或排除某个仓库构件的路线或者“规则”。</para>

    <section id="sect-repoman-server-conf" label="">
      <title>定制服务器配置</title>

      <para>在一个实际的Nexus安装中，你可能会想要自定义管理员密码，而非使用“admin123”，你可能会想要复写Nexus用来存储仓库数据的默认目录。为此，以管理员用户登陆然后点击左边导航菜单Administration下面的Server。服务器配置界面如<xref
      linkend="fig-nexus-server-config" />显示。</para>

      <figure id="fig-nexus-server-config">
        <title>Nexus服务器配置</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_server-settings.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>该页面能让你更改：</para>

      <variablelist>
        <varlistentry>
          <term>管理员密码</term>

          <listitem>
            <para>默认的管理员密码是<varname>admin123</varname>。如果你填写这个字段并点击了Save按钮，你及更改了这个Nexus安装的管理员密码。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>工作目录</term>

          <listitem>
            <para>在File
            Settings组下面，你可以自定义工作目录。如果你的Nexus安装将要作为很大的仓库的镜像，而且你想要将你的工作目录放到另外一个硬盘分区，你可能会想要自定义工作目录。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>日志目录</term>

          <listitem>
            <para>你可以改变Nexus寻找日志的位置。在一个Unix机器上，一个通常的实践是将日志文件放到<filename>/var/log</filename>。如果你遵循这个实践，你可以使用适当的权限来创建一个<filename>/var/log/nexus</filename>目录。注意这个设置并不会更改Nexus记日志的目录，它仅仅是告诉Nexus去哪里寻找日志。要更改写日志的位置，你需要修改在你Nexus安装的<filename>runtime/apps/nexus/conf</filename>目录下<filename>jul-logging.properties</filename>的和<filename>log4j.properties</filename>文件。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>User Agent</term>

          <listitem>
            <para>这是Nexus用来生成<acronym>HTTP</acronym>请求的标识符。如果Nexus需要用一个<acronym>HTTP</acronym>代理，而且这个代理只有当User
            Agent设置成某个特定值才能工作，你就要更改这个设置。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>额外的<acronym>URL参数</acronym></term>

          <listitem>
            <para>这是一列放在对远程仓库的<acronym>GET</acronym>请求后面的附加参数。你可以用它来添加对请求的定义信息。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>请求超时</term>

          <listitem>
            <para>这是当Nexus和外部，远程的仓库交互时等待一个请求成功的时间。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>请求重试次数</term>

          <listitem>
            <para>当遇到一个失败的<acronym>HTTP</acronym>请求时，Nexus会重试的次数。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>代理主机和代理端口</term>

          <listitem>
            <para>如果你的组织需要使用一个<acronym>HTTP</acronym>代理服务器，你可以在这里提供代理主机和代理端口。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>代理认证</term>

          <listitem>
            <para>这一部分配置能让你提供代理认证信息，如用户名和密码，或者用来访问<acronym>HTTP</acronym>代理的密钥。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>管理仓库</title>

      <para>要管理Nexus提供的仓库，以管理员用户登陆然后点击左边导航菜单Administration下面的Repositories。Nexus提供了三种不同的仓库。</para>

      <variablelist>
        <varlistentry>
          <term>代理仓库</term>

          <listitem>
            <para>一个代理仓库是对远程仓库的一个代理。默认情况下，Nexus自带了如下配置的代理仓库：</para>

            <variablelist>
              <varlistentry>
                <term>Apache Snapshots</term>

                <listitem>
                  <para>这个仓库包含了来自于Apache软件基金会的快照版本。http://people.apache.org/repo/m2-snapshot-repository</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Codehaus Snapshots</term>

                <listitem>
                  <para>这个仓库包含了来自于Codehaus的快照版本。
                  http://snapshots.repository.codehaus.org/</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Central Maven Repository</term>

                <listitem>
                  <para>这是中央Maven仓库（发布版本）。
                  http://repo1.maven.org/maven2/</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>宿主仓库</term>

          <listitem>
            <para>一个宿主仓库是由Nexus托管的仓库。Maven自带了如下配置的宿主仓库。</para>

            <variablelist>
              <varlistentry>
                <term>3rd Party</term>

                <listitem>
                  <para>这个宿主仓库应该用来存储在公共Maven仓库中找不到的第三方依赖。这种依赖的样例有：你组织使用的，商业的，私有的类库如Oracle
                  JDBC驱动。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Releases</term>

                <listitem>
                  <para>这个宿主仓库是你组织公布内部发布版本的地方。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Snapshots</term>

                <listitem>
                  <para>这个宿主仓库是你组织发布内部快照版本的地方。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>虚拟仓库</term>

          <listitem>
            <para>一个虚拟仓库作为Maven 1的适配器存在。Nexus自带了一个central-m1虚拟仓库。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-repo-config">
        <title>代理仓库的配置页面</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_repository-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para><xref linkend="fig-repo-config" />
      展示了Nexus中代理仓库的配置页面。在这个页面中，你可以管理一个外部仓库的设置。本页面中，你可以配置：</para>

      <variablelist>
        <varlistentry>
          <term>仓库ID</term>

          <listitem>
            <para>仓库ID是将会被用在Nexus
            URL中的标识符。例如，中央代理仓库有一个ID为"central"，这就意味着Maven可以直接在http://localhost:8081/nexus/content/repositories/central访问这个仓库。在一个给定的Nexus安装中，仓库ID必须是唯一的。ID是必需的。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>仓库名称</term>

          <listitem>
            <para>仓库的显示名称。名称是必需的。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>仓库类型</term>

          <listitem>
            <para>仓库类型（代理，宿主，或者虚拟）。你不能改变仓库的类型，在你创建一个仓库的时候它就被指定了。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>仓库策略</term>

          <listitem>
            <para>如果一个代理仓库的策略是release，那么它只会访问远程仓库的发布版本构件。如果一个代理仓库的策略是snapshot，它只会下载远程仓库的快照版本构件。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>默认存储位置</term>

          <listitem>
            <para>它不可编辑的，显示出来只是为了参考。这是仓库本地缓存内容的默认存储位置。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>覆写存储位置</term>

          <listitem>
            <para>你可以选择为某个特定的仓库覆写存储位置。如果你关心存储空间，或者想要将某个特定仓库（如中央仓库）的内容放到一个不同的位置，你就可以覆写存储位置。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>远程仓库访问</term>

          <listitem>
            <para>这一部分告诉Nexus去哪里寻找远程仓库，以及如何与这个被代理的仓库交互。</para>

            <variablelist>
              <varlistentry>
                <term>远程存储位置</term>

                <listitem>
                  <para>这是远程Maven仓库的URL。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>下载远程索引（本图未显示）</term>

                <listitem>
                  <para>这个字段控制下载远程索引。目前只有中央仓库在<ulink
                  url="http://repo1.maven.org/maven2/.index">http://repo1.maven.org/maven2/.index</ulink>有一个索引。如果开启它，Nexus会下载这个索引，并使用它用来搜索，以及为任何要求索引的客户（如m2eclipse）服务。新的代理仓库的默认值是开启的，但是Nexus自带的所有仓库的这个默认值是关闭的。要改变Nexus自带的代理仓库设置，更改此选项，保存至仓库，然后给仓库重新编制索引。在这之后，构件搜索会返回中央Maven仓库中可用的每一个构件。<xref
                  linkend="sect-manage-repo" />详细描述了为仓库重新编制索引的过程。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>校验和策略</term>

                <listitem>
                  <para>为一个远程仓库设置校验和策略。这个选项默认设置成<varname>Warn</varname>。该设置可能的值包括：</para>

                  <itemizedlist>
                    <listitem>
                      <para><varname>Ignore</varname> - 完全忽略校验和</para>
                    </listitem>

                    <listitem>
                      <para><varname>Warn</varname> -
                      如果校验和不正确，在日志中打印一个警告</para>
                    </listitem>

                    <listitem>
                      <para><varname>StrictIfExists</varname> -
                      如果计算出来的校验和与仓库中的校验和不一致，那就拒绝缓存这个构件。只有校验和文件存在的时候才进行检查。</para>
                    </listitem>

                    <listitem>
                      <para><varname>Strict</varname> -
                      如果计算出来的校验和与仓库中的校验和不一致，或者如果构件没有校验和文件，就拒绝缓存这个构件。</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>认证</term>

                <listitem>
                  <para>这一部分允许你为一个远程仓库设置用户名，密码，私钥，密钥口令，NT LAN HOST，以及NT LAN
                  Manager Domain。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>访问设置</term>

          <listitem>
            <para>这一部分为一个仓库配置访问设置。</para>

            <variablelist>
              <varlistentry>
                <term>允许部署</term>

                <listitem>
                  <para>如果允许部署设置成true，Nexus会允许Maven部署构件至这个仓库。允许部署只有对于宿主仓库有意义。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>允许文件浏览</term>

                <listitem>
                  <para>如果设置成true，用户可以通过web浏览器来浏览这个仓库的内容。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>包含在搜索范围中</term>

                <listitem>
                  <para>如果设置成true，当你在Nexus中执行构件搜索的时候，该仓库会被搜索。
                  如果设置成false，在搜索时该仓库的内容会被排除。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>过期失效设置</term>

          <listitem>
            <para>Nexus为构件和元数据维护一份本地的缓存，你可以为代理仓库配置过期失效参数。过期失效设置有：</para>

            <variablelist>
              <varlistentry>
                <term>未找到缓存TTL</term>

                <listitem>
                  <para>如果Nexus找不到一个构件，它会在一个给定的时间内缓存这个结果。换句话说，如果Nexus不能在远程仓库中找到一个构件，它不会重复的尝试去解析这个构件，除非超过了这个未找到缓存TTL时间。默认值是1140分钟（或者24小时）。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>构件最大年龄</term>

                <listitem>
                  <para>在Nexus从远程仓库获取一个新版本的构件前，告诉它构件的最大年龄是多少。带有release策略的仓库的默认设置是-1，带有snapshot策略的仓库的默认值是1140。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>元数据最大年龄</term>

                <listitem>
                  <para>Nexus从远程仓库获取元数据。只有在超过了元数据最大年龄之后，它才会去获取元数据的更新。该设置的默认值是1140分钟（或者24小时）。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>HTTP请求设置</term>

          <listitem>
            <para>这一部分能让你更改对于远程仓库的HTTP请求的属性。该部分中你可以配置请求的User
            Agent，为请求添加参数，设置超时和重试行为。这一部分涉及的是由Nexus对远程被代理Maven仓库的HTTP请求。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>HTTP代理设置</term>

          <listitem>
            <para>该部分能让你为从Nexus到远程仓库的请求配置HTTP代理。你可以配置一个代理主机，端口和认证设置，以告诉Nexus为所有对远程仓库的请求使用HTTP代理。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>管理组</title>

      <para>组是Nexus一个强大的特性，它允许你在一个单独的URL中组合多个仓库。Nexus自带了两个组：public和public-snapshots。public组中组合了三个宿主仓库：3rd
      Party, Releases, 和Snapshots，还有中央Maven仓库。而public-snapshots组中组合了Apache
      Snapshots和Codehaus Snapshots仓库。在<xref
      linkend="sect-conf-maven-nexus" />中我们通过<filename>settings.xml</filename>配置Maven从Nexus管理的public组中寻找构件。<xref
      linkend="fig-group-config" />显示了Nexus中的组配置页面，在该图中你可以看到public组的内容。</para>

      <figure id="fig-group-config">
        <title>Nexus中的组配置页面</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_group-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>注意在图中有序组仓库中列出的仓库的顺序是很重要的。当Nexus在一组仓库中搜索一个构件的时候，它会返回第一个匹配的结果。要更改列表中仓库的顺序，在有序组仓库选择列表中点击并拖拉仓库即可。</para>
    </section>

    <section>
      <title>管理路由</title>

      <para>Nexus
      路由就像是你可以应用到Nexus组上的过滤器，当Nexus尝试在一个Nexus组中寻找构件的时候，路由允许你在一个特定的构件搜索中包含或者排除一些仓库。有很多不同的场景中你可能需要配置路由，最平常的是当你想要确信你正从一个特定组的特定的仓库中获取构件。特别是当你想要确信你正从宿主Releases及Snapshots仓库中获取你自己组织的构件的时候，路由功能很有用。当你正尝试从一个Nexus组中解析一个构件的时候，Nexus路由十分适用；当Nexus从一组仓库中解析一个构件的时候，使用路由允许你更改Nexus将查阅的仓库。</para>

      <figure id="fig-route-config">
        <title>Nexus中的路由配置页面</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/web/repository-manager_route-config.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para><xref
      linkend="fig-route-config" />显示了路由配置页面。在路由上点击会看到一个页面，能让你配置路由的属性。路由的可用配置选项是：</para>

      <variablelist>
        <varlistentry>
          <term>URL模式</term>

          <listitem>
            <para>这是Nexus用来匹配请求的模式。如果这个模式与请求表达式匹配，Nexus就会在特定的构件查询中包含或者排除所列出的仓库。在<xref
            linkend="fig-route-config" />中的两个模式是：</para>

            <variablelist>
              <varlistentry>
                <term>.*/(com|org)/somecompany/.*</term>

                <listitem>
                  <para>这个模式会匹配所有包含"/com/somecompany/"或者"/org/somecompany"的路径。圆括弧中的表达式匹配com或者org，"*"匹配一个或多个字符。你可以使用一个像这样的路由来匹配你自己组织的构件，并且将这样的请求对应到宿主的Nexus
                  Releases及Snapshots仓库。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>.*/org/some-oss/.*</term>

                <listitem>
                  <para>这个模式用作一个排除路由。它匹配所有包含"/org/some-oss/"的路径。这个特殊的排除路由为所有与该路径匹配的构件排除宿主的Releases和Snapshots仓库。当Nexus尝试解析与该路劲匹配的构件时，它会排除Releases和Snapshots仓库。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>路由类型</term>

          <listitem>
            <para>路由类型可以是“包含”或者“排除”。一个包含路由类型定义了一组仓库，当URL模式匹配的时候这些仓库将被搜索。同样的情况下，一个排除路由定义的仓库则将不会被搜索。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>有序路由仓库</term>

          <listitem>
            <para>这是一个Nexus用来搜索以寻找某个特殊构件的一个有序仓库列表。Nexus从上至下搜索；当它找某个构件的时候，会返回第一个匹配的结果。当它寻找元数据的时候，同一组中所有的仓库会被检查，并且最后返回一个归并的结果。归并的时候，前面的仓库拥有较高的优先权。当一个项目正在寻找<varname>LATEST</varname>或者<varname>RELEASE</varname>版本的时候，这可能会影响结果。在一个Nexus组中，你应该在快照版仓库前定义发布版仓库，否则<varname>LATEST</varname>可能会错误的解析成一个快照版本。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>在该图中你你能看到两个Nexus默认带有的假路由。第一个路由是一个包含路由，它是一个自定义路由的例子，一个组织可能用来确信内部生成的构件是从Releases和Snapshots仓库解析的。如果你组织的groupId都由com.somecompany开头，并且你们将内部生成的构件部署到了Releases和Snapshots仓库，该路由让Nexus不浪费时间去从公共的Maven仓库，如中央Maven仓库或者Apache
      Snapshots仓库，去解析构件。</para>

      <para>第二个假路由是一个排除路由。当请求路径包含"/org/some-oss"的时候，路由会排除Releases和Snapshots仓库。如果我们使用"apache"或者"codehaus"替换"some-oss"，这个例子就可能更有意义了。如果这个模式是"/org/apache"，该规则告诉Nexus，当试图解析这些依赖的时候，排除内部的Releases和Snapshots仓库。换句话说，不要浪费时间从你组织的内部仓库中去寻找Apache依赖。</para>

      <para>如果两个路由有冲突在怎么办？Nexus会在它处理排除路由之前处理包含路由。记住Nexus路由只会在当搜索一个组的时候影响Nexus解析构件。当Nexus开始从一个Nexus组中解析一个构件，它开始于组中的一个仓库列表。如果有匹配的包含路由，Nexus就会使用组中仓库和包含路由中仓库的交集。在Nexus组中定义的顺序不会受包含路由的影响。Nexus之后就会在这个新的组中应用排除路由。最后在这个结果列表中搜索匹配构件。</para>

      <para>总结来说，路由还有很多Nexus的设计者们未预期到的创新可能性，但是，如果你开始信赖冲突或者重叠路由，我们还是建议你小心。保守使用路由，使用教程中的URL模式，随着Nexus的发展，将会有更多的特性允许更细类度的规则以让你阻止特定构件和特定构件版本的请求。记住路由只能用在Nexus组中，当从某个特定仓库中请求一个构件的时候，路由不会被用到。</para>
    </section>

    <section>
      <title>网络配置</title>

      <para>默认情况下，Nexus监听端口8081。你可以更改这个端口，通过更改<filename>${NEXUS_HOME}/conf/plexus.properties</filename>的值，如<xref
      linkend="ex-plexus-props" />。为此，停止Nexus，更改文件中<varname>applicationPort</varname>的值，然后重启Nexus。在这之后，你应该能够在<filename>${NEXUS_HOME}/logs/wrapper.log</filename>中看到一条日志记录，告诉你Nexus在监听更改过的端口。</para>

      <example id="ex-plexus-props">
        <title>${NEXUS_HOME}/conf/plexus.properties的内容</title>

        <programlisting>applicationPort=8081
runtime=${basedir}/runtime
apps=${runtime}/apps
work=${runtime}/work
webapp=${runtime}/apps/nexus/webapp
nexus.configuration=${runtime}/apps/nexus/conf/nexus.xml</programlisting>
      </example>
    </section>
  </section>

  <section id="sect-manage-repo">
    <title>维护仓库</title>

    <para>在你设置了一系列仓库并且将这些仓库组织成组之后，用户就能够通过点击左边菜单Views部分的Repositories链接，在Neuxs
    UI上看到一个仓库的列表。Nexus会显示一个仓库列表。这个列表会显示远程仓库的状态；如果要测试一下，可以编辑你的一个仓库，让它拥有一个垃圾远程存储位置URL，你会在仓库管理页面上注意到该仓库的状态变化了。点击一个仓库会显示一个树状视图，以让用户能够浏览仓库的内容。</para>

    <para>在一个仓库上右击，会看到一系列能用到仓库上的动作。每个仓库上可用的动作有：</para>

    <variablelist>
      <varlistentry>
        <term>查看</term>

        <listitem>
          <para>载入一个仓库的树状视图。该视图能让你深化到特定的目录以查看仓库的内容。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>清空缓存</term>

        <listitem>
          <para>为仓库清空缓存。它促使Maven去远程仓库检查更新或者快照版本。它也会重置未找到缓存。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>重新编制索引</term>

        <listitem>
          <para>促使Maven为一个仓库重新编制索引。Nexus会重新创建它用来搜索构件请求的索引。如果仓库已被配置了下载远程索引，这一选项促使Nexus从远程仓库下载远程索引。注意如果你开启了远程索引下载，可能需要花一些时间从远程仓库下载索引。当构件搜索结果开始显示没有缓存或请求过的构件，你会知道远程仓库已经更新了。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>阻塞代理/允许代理</term>

        <listitem>
          <para>这可以封锁对远程仓库的请求。如果代理被阻塞了，Nexus就不会连接到远程仓库去请求更新。要重新开启远程访问，在仓库上右击然后选择允许代理。当你想要控制代理仓库提供的内容的时候，该选项十分有用。如果你想维护从远程仓库下载内容的严格控制，你可以先基于Nexus运行你组织的构建，然后阻塞所有的代理仓库。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>服务失效/服务生效</term>

        <listitem>
          <para>该选项允许你让一个仓库失效，使之不可用。Nexus就会拒绝所有对失效仓库的服务。在你将一个仓库置为不可用之后，你可以通过在一个仓库上右击，选择“服务生效”，来回到可用状态。</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>部署构件至Nexus</title>

    <para>不同的组织有不同的理由将构件部署至内部仓库。在有数百（或数千）开发人员的大型组织内，一个内部Maven仓库可以是不同部门之间共享发布版和开发快照版本的有效手段。大部分使用Maven的组织最终都会开始将发布版本和构件部署到一个共享的内部仓库。使用Nexus，可以很容易的部署构件至一个宿主仓库。</para>

    <para>要部署构件至Nexus，在<sgmltag>distributionManagement</sgmltag>中提供仓库<acronym>URL</acronym>，然后运行<command>mvn
    deploy</command>。Maven会通过一个简单的<acronym>HTTP</acronym>
    PUT将项目<acronym>POM</acronym>和构件推入至你的Nexus安装。最初版本的Nexus没有为宿主仓库提供任何的安全措施。如果你为宿主仓库开启了部署功能，任何人可以连接并部署构件至这个仓库。如果你的Nexus安装能够从公共Internet访问，你绝对会想要将这些仓库的部署功能关闭，或者将你的Nexus安装放到一个如Apache
    <acronym>HTTPD</acronym>的web服务器背后。</para>

    <para>你项目的<acronym>POM</acronym>不再需要额外的wagon扩展。Nexus可以和Maven内置的<varname>wagon-http-lightweight</varname>一起工作。</para>

    <section>
      <title>部署发布版</title>

      <para>要部署一个发布版构件至Nexus，你需要配置你项目<acronym>POM</acronym>中<sgmltag>distributionManagement</sgmltag>部分的<sgmltag>repository</sgmltag>。<xref
      linkend="fig-deploy-release" />显示了一个发布版部署仓库的样例，这个发布版本仓库的地址是<ulink
      url="http://localhost:8081/nexus/content/repositories/releases">http://localhost:8081/nexus/content/repositories/releases</ulink>。</para>

      <example id="fig-deploy-release">
        <title>为部署配置发布版本仓库</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    ...
    &lt;repository&gt;
      &lt;id&gt;releases&lt;/id&gt;
      &lt;name&gt;Internal Releases&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases&lt;/url&gt;
    &lt;/repository&gt;
    ...
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>你可以使用你Nexus安装的主机和端口来替换<varname>localhost:8081</varname>。你的项目有了这个配置之后，你就可以通过执行<command>mvn
      deploy</command>命令部署构件。</para>

      <screen>$ <command>mvn deploy</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Sample Project
[INFO] ------------------------------------------------------------------------
[INFO] Building Sample Project
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ~/svnw/sample/pom.xml to ~/.m2/repository/sample/sample\
                                            /1.0/sample-1.0.pom
[INFO] [deploy:deploy]
altDeploymentRepository = null
[INFO] Retrieving previous build number from snapshots
Uploading: http://localhost:8081/nexus/content/repositories/releases/\
           sample/sample/1.0/sample-1.0.pom
24K uploaded
</screen>

      <para>注意Nexus可以支持多个宿主仓库；你不需要坚持在默认的<varname>releases</varname>和<varname>snapshots</varname>仓库上。你可以为不同的部门创建不同的宿主仓库，然后将多个仓库组合成一个单独的Nexus组。</para>
    </section>

    <section>
      <title>部署快照版</title>

      <para>要部署快照版本构件至Nexus，你需要配置你项目<acronym>POM</acronym>的<sgmltag>distributionManagement</sgmltag>部分的<sgmltag>snapshotRepository</sgmltag>。<xref
      linkend="fig-deploy-snapshot" />显示了快照版本部署仓库的样例，该<varname>snapshots</varname>仓库配置的地址是<ulink
      url="http://localhost:8081/nexus/content/repositories/snapshots">http://localhost:8081/nexus/content/repositories/snapshots</ulink>。</para>

      <example id="fig-deploy-snapshot">
        <title>为部署配置快照版本仓库</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    ...
    &lt;snapshotRepository&gt;
      &lt;id&gt;Snapshots&lt;/id&gt;
      &lt;name&gt;Internal Snapshots&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    ...
  &lt;/distributionManagement&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>你可以使用你Nexus安装的主机和端口来替换<varname>localhost:8081</varname>。你的项目有了这个配置之后，你就可以通过执行<command>mvn
      deploy</command>命令部署构件。如果你项目的版本是快照版本（如1.0-SNAPSHOT）Maven就会将其部署至<sgmltag>snapshotRepository</sgmltag>：</para>

      <screen>$ <command>mvn deploy</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   Sample Project
[INFO] ------------------------------------------------------------------------
[INFO] Building Sample Project
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ~/svnw/sample/pom.xml to ~/.m2/repository/sample/sample\
                                            /1.0-SNAPSHOT/sample-1.0-20080402.125302.pom
[INFO] [deploy:deploy]
altDeploymentRepository = null
[INFO] Retrieving previous build number from snapshots
Uploading: http://localhost:8081/nexus/content/repositories/releases/\
           sample/sample/1.0-SNAPSHOT/sample-1.0-20080402.125302.pom
24K uploaded
</screen>
    </section>

    <section>
      <title>部署第三方构件</title>

      <para>你的Maven项目可以依赖于一个构件，这个构件不能从中央Maven仓库或任何其它公开Maven仓库找到。有很多原因可能导致这种情形发生：这个构件可能是私有数据库的<acronym>JDBC</acronym>驱动如Oracle，或者你依赖于另一个<acronym>JAR</acronym>，它既不开源也无法免费获得。在这样的情况下，你就需要手动拿来这些构件然后发布到你自己的仓库中。Nexus提供宿主的"third-party"仓库，就是为了这个目的。</para>

      <para>为了阐明发布一个构件至第三方仓库的过程，我们使用一个真实的构件：Oracle
      <acronym>JDBC</acronym>驱动。Oracle发布一个广泛使用的商业数据库产品，该产品带有一个中央Maven仓库没有的<acronym>JDBC</acronym>驱动。虽然中央Maven仓库在<ulink
      url="http://repo1.maven.org/maven2/com/oracle/ojdbc14/10.2.0.3.0/">http://repo1.maven.org/maven2/com/oracle/ojdbc14/10.2.0.3.0/</ulink>维护了一些Oracle
      <acronym>JDBC</acronym>驱动的<acronym>POM</acronym>信息，但这些只是指向Oracle站点的<acronym>POM</acronym>。如果你将下列的依赖添加到你的项目。</para>

      <example>
        <title>Oracle JDBC JAR 依赖</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;com.oracle&lt;/groupId&gt;
      &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;
      &lt;version&gt;10.2.0.3.0&lt;/version&gt;
    &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>用这个依赖运行一个Maven构建，将会产生如下的输出：</para>

      <screen>$ <command>mvn install</command>
...
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) com.oracle:ojdbc14:jar:10.2.0.3.0

  Try downloading the file manually from: 
      http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
               -Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: \
      mvn deploy:deploy-file -DgroupId=com.oracle -DartifactId=ojdbc14 \
                 -Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=/path/to/file \
                 -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) sample:sample:jar:1.0-SNAPSHOT
  	2) com.oracle:ojdbc14:jar:10.2.0.3.0

----------
1 required artifact is missing.
</screen>

      <para>Maven构建失败了因为它不能在Maven仓库中找到Oracle
      <acronym>JDBC</acronym>驱动。要补救这种情况，你将需要发布Oracle
      <acronym>JDBC</acronym>构件至你的Nexus third-party仓库。为此，从<ulink
      url="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html</ulink>下载Oracle
      <acronym>JDBC</acronym>驱动，然后保存至文件<filename>ojdbc.jar</filename>。使用以下命令发布该文件至Nexus：</para>

      <screen>$ <command>mvn deploy:deploy-file -DgroupId=com.oracle -DartifactId=ojdbc14 \</command>
&gt; <command>-Dversion=10.2.0.3.0 -Dpackaging=jar -Dfile=ojdbc.jar \</command>
&gt; <command>-Durl=http://localhost:8081/nexus/content/repositories/thirdparty \</command>
&gt; <command>-DrepositoryId=thirdparty</command>
...
[INFO] [deploy:deploy-file]
Uploading: http://localhost:8081/nexus/content/repositories/thirdparty/\
                  com/oracle/ojdbc14/10.2.0.3.0/ojdbc14-10.2.0.3.0.jar
330K uploaded
[INFO] Retrieving previous metadata from thirdparty
[INFO] Uploading repository metadata for: 'artifact com.oracle:ojdbc14'
[INFO] Retrieving previous metadata from thirdparty
[INFO] Uploading project information for ojdbc14 10.2.0.3.0
</screen>

      <para>在你运行<command>mvn
      deploy:deploy-file</command>之后，该构件会被发布至Nexus的third-party仓库。</para>
    </section>
  </section>
</chapter>
