<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="resource-filtering">
  <title>属性和资源过滤</title>

  <section>
    <title>简介</title>

    <para>本书的自始至终，你都会注意到我们可以在<acronym>POM</acronym>文件中使用属性引用。在多模块项目构建中我们可以使用<varname>${project.groupId}</varname>和<varname>${project.version}</varname>属性引用兄弟依赖，并且<acronym>POM</acronym>中的任意部分都可以由一个前缀为"project."的变量名引用。环境变量和Java系统变量也可以被引用，还包括在你<filename>~/.m2/settings.xml</filename>文件中的值。然而你还没有看到一个所有可能属性值的完整列表，以及如何使用它们帮助你创建可移植性的构建。本章提供了这样的一个列表。</para>

    <para>如果你从来没有在你的<acronym>POM</acronym>中使用属性引用，你也应该知道Maven有一个特性叫做资源过滤，它能让你替换存储在<filename>src/main/resources</filename>目录下资源文件中的属性引用。这个特性可以用来为特定的平台定制构建，将重要的构建变量提取到属性文件中，<acronym>POM</acronym>中，或者profile中。本章介绍资源过滤特性并简单讨论如何用该特性创建可移植的企业级构建。</para>
  </section>

  <section id="sect-properties">
    <title>Maven属性</title>

    <para>你可以在<filename>pom.xml</filename>文件或者资源文件中使用属性，资源文件被会Maven
    Resource插件的过滤特性处理。一个属性永远包含在<varname>${</varname>和<varname>}</varname>中。例如，要引用<varname>project.version</varname>属性，就需要这样写：</para>

    <programlisting language="java">${project.version}</programlisting>

    <para>在任何Maven项目中都有一些隐式的属性，这些隐式的属性是：</para>

    <variablelist>
      <varlistentry>
        <term><varname>project.*</varname></term>

        <listitem>
          <para>Maven的项目对象模型（<acronym>POM</acronym>）。你可以使用该<varname>project.*</varname>前缀来引用任何在Maven
          <acronym>POM</acronym>中的值。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>settings.*</varname></term>

        <listitem>
          <para>Maven
          Settings。你使用该<varname>settings.*</varname>前缀来引用<filename>~/.m2/settings.xml</filename>文件中Maven
          Settings的值。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>env.*</varname></term>

        <listitem>
          <para>环境变量如<varname>PATH</varname>和<varname>M2_HOME</varname>可以使用<varname>env.*</varname>前缀来引用。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>系统属性</term>

        <listitem>
          <para>任何可以通过<methodname>System.getProperty()</methodname>方法获取的属性都可以作为Maven属性被引用。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>除了上述这些隐式属性，Maven <acronym>POM</acronym>，Maven Settings，或者Maven
    Profile可以有一组任意的，用户自定义的属性。下面的小节详细介绍一个Maven项目中各种可用的属性。</para>

    <section>
      <title>Maven项目的属性</title>

      <para>当一个Maven项目属性被引用的时候，属性名就直接引用Maven项目对象模型（<acronym>POM</acronym>）的一个属性。具体的说，你正在引用类<classname>org.apache.maven.model.Model</classname>的一个属性，这个类以隐式项目变量的方式向外暴露。当你使用该隐式变量引用属性的时候，你实际上正在使用简单的点标记来引用<classname>Model</classname>对象的一个bean属性。例如，当你引用<varname>${project.version}</varname>的时候，你实际上是在调用暴露出来的<classname>Model</classname>对象实例的<methodname>getVersion()</methodname>方法。</para>

      <para><acronym>POM</acronym>同样也在所有Maven项目中以<filename>pom.xml</filename>文档的形式展现。任何在Maven
      <acronym>POM</acronym>
      中的东西都可以用属性来引用。关于<acronym>POM</acronym>结构的完整参考可以访问<ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model/maven.html">http://maven.apache.org/ref/2.0.9/maven-model/maven.html</ulink>。下面的列表展示了一些Maven项目中常见的属性引用。</para>

      <variablelist>
        <varlistentry>
          <term><varname>project.groupId</varname> 和
          <varname>project.version</varname></term>

          <listitem>
            <para>大型的，多模块构建的项目通常共享同样的<varname>groupId</varname>和<varname>version</varname>定义符。当你为共享同样<varname>groupId</varname>和<varname>version</varname>的模块声明相互依赖的时候，为它们使用属性引用是一个很好的办法：</para>

            <programlisting language="xml">&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
    &lt;artifactId&gt;sibling-project&lt;/artifactId&gt;
    &lt;version&gt;${project.version}&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.artifactId</varname></term>

          <listitem>
            <para>一个项目的artifactId通常被用作发布包的名称。例如，在一个打包类型为<acronym>WAR</acronym>的项目中，你会想生成一个不带版本定义符的<acronym>WAR</acronym>文件。为此，你就需要在你的<acronym>POM</acronym>中引用<varname>project.artifactId</varname>，如：</para>

            <programlisting language="xml">&lt;build&gt;
  &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
&lt;/build&gt;</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.name</varname> 和
          <varname>project.description</varname></term>

          <listitem>
            <para>项目的name和description对于文档来说是比较常用的属性引用。你只要简单的引用这些属性，而不需要担心你所有的站点文档是否维护了一致的简短描述信息。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>project.build.*</varname></term>

          <listitem>
            <para>如果你试图在Maven中引用输出目录，你绝不应该使用如<filename>target/classes</filename>的字面量，而是应该使用属性来引用这些目录。</para>

            <itemizedlist>
              <listitem>
                <para><varname>project.build.sourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.scriptSourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.testSourceDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.outputDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.testOutputDirectory</varname></para>
              </listitem>

              <listitem>
                <para><varname>project.build.directory</varname></para>
              </listitem>
            </itemizedlist>

            <para><varname>sourceDirectory</varname>，<varname>scriptSourceDirectory</varname>，和<varname>testSourceDirectory</varname>提供了项目源码目录的访问方式。<varname>outputDirectory</varname>和<varname>testOutputDirectory</varname>则能让你访问Maven放置字节码和其它构建输出的目录。<varname>directory</varname>引用的目录就是包含上述两个输出目录的父目录。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>其它项目属性引用</term>

          <listitem>
            <para>在一个<acronym><acronym>POM</acronym></acronym>中有数百的属性可以引用。关于<acronym>POM</acronym>结构的完整参考见<ulink
            url="http://maven.apache.org/ref/2.0.9/maven-model/maven.html">http://maven.apache.org/ref/2.0.9/maven-model/maven.html</ulink>。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>关于Maven
      <classname>Model</classname>对象可用属性的完整列表，可以看一下<varname>maven-model</varname>项目的JavaDoc：<ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model/apidocs/index.html">http://maven.apache.org/ref/2.0.9/maven-model/apidocs/index.html</ulink>。当你载入这JavaDoc之后，看一下<classname>Model</classname>类。根据这个<classname>Model</classname>类的JavaDoc，你应该能够找到你想要引用的<acronym>POM</acronym>属性。如果你想要引用构建的输出目录，可以使用Maven
      Model的JavaDoc，明白该输出目录是通过<methodname>model.getBuild().getOutputDirectory()</methodname>引用的；该方法调用会被翻译成Maven的属性引用<varname>${project.build.outputDirectory}</varname>。</para>

      <para>Maven Model定义了<acronym>POM</acronym>的结构，要了解关于Maven
      Model模块的更多信息，可以访问Maven Model的项目页面：<ulink
      url="http://maven.apache.org/ref/2.0.9/maven-model">http://maven.apache.org/ref/2.0.9/maven-model</ulink>。</para>
    </section>

    <section>
      <title>Maven的Settings属性</title>

      <para>你也可以引用任何Maven本地Settings文件的属性，该文件通常位于<filename>~/.m2/settings.xml</filename>。这个文件包含了用户特定的配置，如本地仓库的位置，以及由某个特定用户配置的服务器，profile，和镜像。</para>

      <para>关于本地Settings文件和对应属性的完整参考可以访问<ulink
      url="http://maven.apache.org/ref/2.0.9/maven-settings/settings.html">http://maven.apache.org/ref/2.0.9/maven-settings/settings.html</ulink>。</para>
    </section>

    <section>
      <title>环境变量属性</title>

      <para>环境变量可以通过env.*前缀引用。以下列表是一些有趣的环境变量：</para>

      <variablelist>
        <varlistentry>
          <term><varname>env.PATH</varname></term>

          <listitem>
            <para>包含了Maven运行的当前<varname>PATH</varname>。该PATH包含了一个用来查找可运行脚本和程序的目录列表，</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.HOME</varname></term>

          <listitem>
            <para>（在*nix系统中）这个变量指向了用户的home目录。但你更应该使用${user.home}，而非这个变量。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.JAVA_HOME</varname></term>

          <listitem>
            <para>指向了Java安装目录。它要么指向<acronym>JDK</acronym>安装目录，要么或者<acronym>JRE</acronym>目录。但你更应该考虑使用${java.home}而非这个属性。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>env.M2_HOME</varname></term>

          <listitem>
            <para>指向了Maven2安装目录。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>虽然他们都是可用的，但如果你有选择，你更应该使用Java系统属性。如果你需要用户的home目录，应该使用<varname>${user.home}</varname>而非<varname>${env.HOME}</varname>。这么做，你最后会有可移植性更好的构建，也更符合Java平台一次编写到处运行的承诺。</para>
    </section>

    <section>
      <title>Java系统属性</title>

      <para>Maven暴露所有来自于<classname>java.lang.System</classname>的属性。任何你能从<methodname>System.getProperty()</methodname>获取的属性都能以Maven属性的形式引用。下面的表格列出了所有可用的系统属性：</para>

      <table>
        <title>Java系统属性</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>系统属性</entry>

              <entry>描述</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><varname>java.version</varname></entry>

              <entry>Java运行环境版本</entry>
            </row>

            <row>
              <entry><varname>java.vendor</varname></entry>

              <entry>Java运行环境供应商</entry>
            </row>

            <row>
              <entry>java.vendor.url</entry>

              <entry>Java供应商URL</entry>
            </row>

            <row>
              <entry><varname>java.home</varname></entry>

              <entry>Java安装目录</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.version</varname></entry>

              <entry>Java虚拟机规格说明版本</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.vendor</varname></entry>

              <entry>Java虚拟机规格说明供应商</entry>
            </row>

            <row>
              <entry><varname>java.vm.specification.name</varname></entry>

              <entry>Java虚拟机规格说明名称</entry>
            </row>

            <row>
              <entry><varname>java.vm.version</varname></entry>

              <entry>Java虚拟机实现版本</entry>
            </row>

            <row>
              <entry><varname>java.vm.vendor</varname></entry>

              <entry>Java虚拟机实现供应商</entry>
            </row>

            <row>
              <entry><varname>java.vm.name</varname></entry>

              <entry>Java虚拟机实现名称</entry>
            </row>

            <row>
              <entry><varname>java.specification.version</varname></entry>

              <entry>Java运行环境规格说明版本</entry>
            </row>

            <row>
              <entry><varname>java.specification.vendor</varname></entry>

              <entry>Java运行环境规格说明供应商</entry>
            </row>

            <row>
              <entry><varname>java.specification.name</varname></entry>

              <entry>Java运行环境规格说明名称</entry>
            </row>

            <row>
              <entry><varname>java.class.version</varname></entry>

              <entry>Java类格式版本号</entry>
            </row>

            <row>
              <entry><varname>java.class.path</varname></entry>

              <entry>Java类路径</entry>
            </row>

            <row>
              <entry><varname>java.ext.dirs</varname></entry>

              <entry>扩展目录的路径</entry>
            </row>

            <row>
              <entry><varname>os.name</varname></entry>

              <entry>操作系统名称</entry>
            </row>

            <row>
              <entry><varname>os.arch</varname></entry>

              <entry>操作系统架构</entry>
            </row>

            <row>
              <entry><varname>os.version</varname></entry>

              <entry>操作系统版本</entry>
            </row>

            <row>
              <entry><varname>file.separator</varname></entry>

              <entry>文件分隔符（UNIX上是"/"，Windows上是"\"）</entry>
            </row>

            <row>
              <entry><varname>path.separator</varname></entry>

              <entry>路径分隔符（UNIX上是":"，Windows上是";"）</entry>
            </row>

            <row>
              <entry><varname>line.separator</varname></entry>

              <entry>行分隔符（在UNIX和Windows上都是"\n"）</entry>
            </row>

            <row>
              <entry><varname>user.name</varname></entry>

              <entry>用户帐户名称</entry>
            </row>

            <row>
              <entry><varname>user.home</varname></entry>

              <entry>用户home目录</entry>
            </row>

            <row>
              <entry><varname>user.dir</varname></entry>

              <entry>用户当前工作目录</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>用户定义的属性</title>

      <para>除了由<acronym>POM</acronym>，Maven
      Settings，环境变量，和Java系统属性提供的隐式变量，你还可以定义自己的专有属性。这类属性可以定义在<acronym>POM</acronym>或者Profile中。而这些在<acronym>POM</acronym>或者Maven
      Profile中设置的属性可以像任何其它Maven属性一样被引用。用户定义的属性可以在<acronym>POM</acronym>中引用，也可以由Maven
      Resource插件用来过滤资源。这里是一个例子，在Maven
      <acronym>POM</acronym>中定义了一些专有的属性。</para>

      <example>
        <title>POM中的用户定义属性</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;arbitrary.property.a&gt;This is some text&lt;/arbitrary.property.a&gt;
    &lt;hibernate.version&gt;3.3.0.ga&lt;/hibernate.version&gt;
  &lt;/properties&gt;
  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
      &lt;artifactId&gt;hibernate&lt;/artifactId&gt;
      &lt;version&gt;${hibernate.version}&lt;/version&gt;
    &lt;/dependency&gt;  
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>上述例子定义了两个属性：<varname>arbitrary.property.a</varname>和<varname>hibernate.version</varname>。<varname>hibernate.version</varname>在依赖声明中被引用。在属性名中使用句号作为分隔符是Maven
      <acronym>POM</acronym>和Profile中的一个标准实践。使用句号作为分隔符没有什么特殊的地方；对Maven来说，“hibernate.version”只是一个用来获取属性值“3.3.0.ga”的一个映射键。下一个例子展示了如何在Maven
      <acronym>POM</acronym>中的一个profile中定义一个属性。</para>

      <example>
        <title>POM的Profile中的用户定义属性</title>

        <programlisting language="xml">&lt;project&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;some-profile&lt;/id&gt;
      &lt;properties&gt;
        &lt;arbitrary.property&gt;This is some text&lt;/arbitrary.property&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/project&gt;</programlisting>
      </example>

      <para>前面的例子展示了在Maven
      <acronym>POM</acronym>的profile中定义一个用户自定义属性的过程。要了解更多的关于用户定义属性和profile的信息，请看<xref
      linkend="profiles" />。</para>
    </section>
  </section>

  <section>
    <title>资源过滤</title>

    <para>你可以使用Maven来对项目资源进行变量替换。在资源过滤被激活的时候，Maven会扫描资源，寻找由<varname>${</varname>
    和<varname>}</varname>包围的Maven属性的引用。一旦它找到这些引用，它就会使用合适的值去替换它们，就像前一节中定义的属性可以在<acronym>POM</acronym>中引用一样。当你需要根据目标部署平台使用不同的配置来参数化一个构建的时候，这就非常有用。</para>

    <para>通常一个在<filename>src/main/resources</filename>目录下的.properties文件或者<acronym>XML</acronym>文档会包含对外部资源的引用，如需要根据目标部署平台进行不同配置的数据库或网络地址。例如，一个从数据库读取数据的系统有一个<acronym>XML</acronym>文档，其包含了数据库的<acronym>JDBC</acronym>
    <acronym>URL</acronym>以及安全凭证。如果你在开发和产品环境使用不同的数据库。你可以选择使用一种技术如JNDI将配置信息从应用程序提取出来至应用服务器，或者你可以创建一个知道如何根据目标平台用不同的值替换变量的构建。</para>

    <para>使用Maven资源过滤，你可以引用Maven属性，并且使用Maven
    Profile来为不同的部署环境定义不同的配置。为了展示这个功能，假设你有一个项目，它使用了Spring Framework来配置来自于<ulink
    url="http://commons.apache.org/dbcp">Commons
    DBCP</ulink>项目的<classname>BasicDataSource</classname>。你的项目可能在<filename>src/main/resources</filename>中包含一个文件<filename>applicationContact.xml</filename>，它含有如<xref
    linkend="ex-filter-spring" />所示的<acronym>XML</acronym>。</para>

    <example id="ex-filter-spring">
      <title>在资源中引用Maven属性</title>

      <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

    &lt;bean id="someDao" class="com.example.SomeDao"&gt;
        &lt;property name="dataSource" ref="dataSource"/&gt;
    &lt;/bean&gt;

    &lt;bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" value="${jdbc.driverClassName}"/&gt;
        &lt;property name="url" value="${jdbc.url}"/&gt;
        &lt;property name="username" value="${jdbc.username}"/&gt;
        &lt;property name="password" value="${jdbc.password}"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</programlisting>
    </example>

    <para>你的程序会在运行的时候读取这个文件，而你的构建将会使用定义在你pom.xml中的值替换如<varname>jdbc.url</varname>和<varname>jdbc.username</varname>这样的属性。默认情况资源过滤是关闭的，那是为了避免非有意的资源过滤。要开启资源过滤，你需要使用<acronym>POM</acronym>中build元素下的resources子元素。<xref
    linkend="ex-filter-pom" />展示了这样一个<acronym>POM</acronym>，它定义了在<xref
    linkend="ex-filter-spring" />中引用的变量，并且为所有位于<filename>src/main/resources</filename>下的资源激活了资源过滤。</para>

    <example id="ex-filter-pom">
      <title>定义变量和激活资源过滤</title>

      <programlisting language="xml">&lt;project&gt;
  ...
  &lt;properties&gt;
    &lt;jdbc.driverClassName&gt;com.mysql.jdbc.Driver&lt;/jdbc.driverClassName&gt;
    &lt;jdbc.url&gt;jdbc:mysql://localhost:3306/development_db&lt;/jdbc.url&gt;
    &lt;jdbc.username&gt;dev_user&lt;/jdbc.username&gt;
    &lt;jdbc.password&gt;s3cr3tw0rd&lt;/jdbc.password&gt;
  &lt;/properties&gt;
  ...
  &lt;build&gt;
    &lt;resources&gt;
      &lt;resource&gt;src/main/resources&lt;/resource&gt;
      &lt;filtering&gt;true&lt;/filtering&gt;
    &lt;/resources&gt;
  &lt;/build&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;production&lt;/id&gt;
      &lt;properties&gt;
        &lt;jdbc.driverClassName&gt;oracle.jdbc.driver.OracleDriver&lt;/jdbc.driverClassName&gt;
        &lt;jdbc.url&gt;jdbc:oracle:thin:@proddb01:1521:PROD&lt;/jdbc.url&gt;
        &lt;jdbc.username&gt;prod_user&lt;/jdbc.username&gt;
        &lt;jdbc.password&gt;s00p3rs3cr3t&lt;/jdbc.password&gt;
      &lt;/properties&gt;
    &lt;/profile&gt;  
  &lt;/profiles&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>四个变量在properties元素中定义，并且我们为<filename>src/main/resources</filename>下的资源开启了资源过滤。资源过滤默认是关闭的，为了激活它你必须为项目中的资源显式的设置<sgmltag>filtering</sgmltag>为<varname>true</varname>。默认关闭资源过滤的目的是为了防止构建中偶然发生的非有意的过滤。如果你使用<xref
    linkend="ex-filter-spring" />中的资源和<xref
    linkend="ex-filter-pom" />中的POM构建一个项目，然后列出target/classes下的资源内容，你会看到那里的资源文件已经被过滤。</para>

    <screen>$ <command>mvn install</command>
...
$ <command>cat target/classes/applicationContext.xml</command>
...
    &lt;bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;
        &lt;property name="url" value="jdbc:mysql://localhost:3306/development_db"/&gt;
        &lt;property name="username" value="dev_user"/&gt;
        &lt;property name="password" value="s3cr3tw0rd"/&gt;
    &lt;/bean&gt;
...</screen>

    <para><xref
    linkend="ex-filter-pom" />中的<acronym>POM</acronym>还在<varname>profiles/profile</varname>元素下定义了一个production
    profile，它使用适合产品环境中的值覆盖了默认的属性。在这个特别的<acronym>POM</acronym>中，数据库连接默认的值是针对于安装在开发者机器上的本地MySQL数据库。而在production
    profile激活时构建这个项目，Maven会使用不同的驱动类，URL，用户名，和密码，配置系统连接到产品环境的Oracle数据库。如果你使用<xref
    linkend="ex-filter-spring" />中的资源和<xref
    linkend="ex-filter-pom" />中的POM，并激活了production
    file，然后构建一个项目，最后列出target/classes中的资源内容，你会看到其包含了使用产品环境值过滤的资源。</para>

    <screen>$ <command>mvn -Pproduction install</command>
...
$ <command>cat target/classes/applicationContext.xml</command>
...
    &lt;bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource"&gt;
        &lt;property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/&gt;
        &lt;property name="url" value="jdbc:oracle:thin:@proddb01:1521:PROD"/&gt;
        &lt;property name="username" value="prod_user"/&gt;
        &lt;property name="password" value="s00p3rs3cr3t"/&gt;
    &lt;/bean&gt;
...</screen>
  </section>
</chapter>
