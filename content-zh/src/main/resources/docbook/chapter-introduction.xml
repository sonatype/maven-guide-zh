<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
  <title>介绍 Apache Maven</title>

  <para>虽然网络上有许多Maven的参考文章，但是没有一篇单独的，编写规范的介绍Maven的文字，它需要是一本细心编排的入门指南和参考手册。
  我们做的，正是试图提供这样的，包含许多使用参考的文字。</para>

  <section id="section-whatIsMaven">
    <title>Maven... 它是什么?</title>

    <para>如何回答这个问题要看你怎么看这个问题。
    绝大部分Maven用户都称Maven是一个"构建工具"：一个用来把源代码构建成可发布的构件的工具。
    构建工程师和项目经理会说Maven是一个更复杂的东西：一个项目管理工具。那么区别是什么？
    像Ant这样的构建工具仅仅是关注预处理，编译，打包，测试和分发。像 Maven 这样的一个项目管理工具提供了构建工具所提供功能的超集。
    除了提供构建的功能，Maven还可以生成报告，生成Web站点，并且帮助推动工作团 队成员间的交流。</para>

    <para>一个更正式的 <ulink url="http://maven.apache.org">Apache Maven</ulink>
    的定义： Maven是一个项目管理工具，它包含了一个项目对象模型 (Project Object
    Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management
    System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。
    当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后 Maven
    可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。</para>

    <para>别让Maven是一个"项目管理"工具的事实吓跑你。如果你只是在找一个构建工具，Maven能做这个工作。
    事实上，本书的一些章节将会涉及使用Maven来构建和分发你的项目。</para>
  </section>

  <section id="section-conventionConfiguration">
    <title>约定优于配置（Convention Over Configuration）</title>

    <para>约定优于配置是一个简单的概念。 系统，类库，框架应该假定合理的默认值，而非要求提供不必要的配置。 流行的框架如 <ulink
    url="http://www.rubyonrails.org/">Ruby on Rails</ulink> 和
    <acronym>EJB3</acronym> 已经开始坚持这些原则，以对像原始的 <acronym>EJB</acronym> 2.1
    规范那样的框架的配置复杂度做出反应。 一个约定优于配置的例子就像 <acronym>EJB3</acronym> 持久化，将一个
    特殊的Bean持久化，你所需要做的只是将这个类标注为 <classname>@Entity</classname> 。
    框架将会假定表名和列名是基于类名和属性名。
    系统也提供了一些钩子，当有需要的时候你可以重写这些名字，但是，在大部分情况下，你会发现使用框架提供的默认值会让你的项目运行的更快。</para>

    <para>Maven通过给项目提供明智的默认行为来融合这个概念。 在没有自定义的情况下，源代码假定是在
    <filename>${basedir}/src/main/java</filename>，资源文件假定是在
    <filename>${basedir}/src/main/resources</filename> 。测试代码假定是在
    <filename>${basedir}/src/test</filename> 。项目假定会产生一个 <acronym>JAR</acronym>
    文件。Maven 假定你想要把编译好的字节码放到 <filename>${basedir}/target/classes</filename>
    并且在 <filename>${basedir}/target</filename> 创建一个可分发的 <acronym>JAR</acronym>
    文件。 虽然这看起来无关紧要，但是想想大部分基于 Ant 的构建必须为每个子项目定义这些目录。 Maven
    对约定优于配置的应用不仅仅是简单的目录位置，Maven 的核心插件使用了一组通用的约定，以用来编译源代码，打包可分发的构件，生成 web
    站点，还有许多其他的过程。 Maven
    的力量来自它的"武断"，它有一个定义好的生命周期和一组知道如何构建和装配软件的通用插件。如果你遵循这些约定，Maven
    只需要几乎为零的工作——仅仅是将你的源代码放到正确的目录，Maven 将会帮你处理剩下的事情。</para>

    <para>使用“遵循约定优于配置”系统的一个副作用是用户可能会觉得他们被强迫使用一种特殊的方法。 当然 Maven
    有一些核心观点不应该被怀疑，但是其实很多默认行为还是可配置的。
    例如项目源码的资源文件的位置可以被自定义，<acronym>JAR</acronym>
    文件的名字可以被自定义，在开发自定义插件的时候，几乎任何行为可以被裁剪以满足你特定的环境需求。 如果你不想遵循约定，Maven
    也会允许你自定义默认值来适应你的需求。</para>
  </section>

  <section>
    <title>一个一般的接口</title>

    <para>在 Maven
    为构建软件提供一个一般的接口之前，每个单独的项目都专门有人来管理一个完全自定义的构建系统。开发人员必须在开发软件之外去学习每个他们要参与的新项目的构建系统的特点。
    在2001年，构建一个项目如 <ulink url="http://turbine.apache.org/">Turbine</ulink>
    和构建另外一个项目如 <ulink url="http://tomcat.apache.org">Tomcat</ulink>
    ，两者方法是完全不同的。如果一个新的进行静态源码分析的源码分析工具面世了，或者如果有人开发了一个新的单元测试框架，每个人都必须放下手头的工作去想办法使这个新东西适应每个项目的自定义构建环境。
    如何运行单元测试？世界上有一千种不同的答案。构建环境由无数无休止的关于工具和构建程序的争论所描述刻画。Maven
    之前的时代是低效率的时代，是“构建工程师”的时代。</para>

    <para>现在，大部分开源开发者已经或者正在使用 Maven
    来管理他们新的软件项目。这种转变不仅仅是开发人员从一种构建工具转移到另外一种构建工具，更是开发人员开始为他们的项目采用一种一般的接口。随着软件系统变得越来越模块化，构建系统变得更复杂，而项目的数量更是如火箭般飞速上升。在
    Maven 之前，当你想要从 Subversion 签出一个项目如 <ulink
    url="http://activemq.apache.org">Apache ActiveMQ</ulink> 或 <ulink
    url="http://servicemix.apache.org">Apache ServiceMix</ulink>
    ，然后从源码进行构建，你需要为每个项目留出一个小时来理解给它的构建系统。这个项目需要构建什么？需要现在什么类库？把类库放哪里？构建中我该运行什么目标？最好的情况下，理解一个新项目的构建需要几分钟，最坏的情况下（例如
    Jakarta 项目的旧的 Servlet API
    实现），一个项目的构建特别的困难，以至于花了几个小时以后，新的贡献者也只能编辑源码和编译项目。现在，你只要签出源码，然后运行：
    <command>mvn install</command> 。虽然 Maven
    有很多优点，包括依赖管理和通过插件重用一般的构建逻辑，但它成功的最核心原因是它定义了构建软件的一般的接口。每当你看到一个使用 Maven 的项目如
    <ulink url="http://wicket.apache.org">Apache Wicket</ulink>
    ，你就可以假设你能签出它的源码然后使用 <command>mvn install</command>
    构建它，没什么好争论的。你知道点火开关在哪里，你知道油门在右边，刹车在左边。</para>
  </section>

  <section>
    <title>基于Maven插件的全局性重用</title>

    <para>Maven 的核心其实不做什么实际的事情，除了解析一些 XML 文档，管理生命周期与插件之外，它什么也不懂。Maven
    被设计成将主要的职责委派给一组 Maven 插件，这些插件可以影响 Maven 生命周期，提供对目标的访问。绝大多数 Maven 的动作发生于
    Maven 插件的目标，如编译源码，打包二进制代码，发布站点和其它构建任务。你从 Apache 下载的 Maven 不知道如何打包
    <acronym>WAR</acronym> 文件，也不知道如何运行单元测试，Maven 大部分的智能是由插件实现的，而插件从 Maven
    仓库获得。事实上，第一次你用全新的 Maven 安装运行诸如 <command>mvn install</command> 命令的时候，它会从中央
    Maven 仓库下载大部分核心 Maven 插件。这不仅仅是一个最小化 Maven
    分发包大小的技巧，这种方式更能让你升级插件以给你项目的构建提高能力。Maven
    从远程仓库获取依赖和插件的这一事实允许了构建逻辑的全局性重用。</para>

    <para>Maven Surefire 插件是负责运行单元测试的插件。从版本 1.0 发展到目前广泛使用的在 JUnit 基础上增加了
    TestNG 测试框架支持的版本。这种发展并没有破坏向后兼容性，如果你使用之前 Surefire 插件编译运行你的 JUnit 3
    单元测试，然后你升级到了最新版本的 Surefire 插件，你的测试仍然能成功运行。但是，我们又获得了新的功能，如果你想使用 TestNG
    运行单元测试，那么感谢 Surefire 插件的维护者，你已经可以使用 TestNG 了。你也能运行支持注解的 JUnit 4 单元测试。不用升级
    Maven 安装或者新装任何软件，你就能获得这些功能。更重要的是，除了 <acronym>POM</acronym>
    中一个插件的版本号，你不需要更改你项目的任何东西。</para>

    <para>这种机制不仅仅适用于 Surefire 插件，项目使用 Compiler 插件进行编译，通过 Jar 插件变成
    <acronym>JAR</acronym> 文件，还有一些插件生成报告，运行 JRuby 和 Groovy
    的代码，以及一些用来向远程服务器发布站点的插件。Maven
    将一般的构建任务抽象成插件，同时这些插件得到了很好的维护以及全局的共享，你不需要从头开始自定义你项目的构建系统然后提供支持。你完全可以从 Maven
    插件获益，这些插件有人维护，可以从远程仓库下载到。这就是基于 Maven 插件的全局性重用。</para>
  </section>

  <section>
    <title>一个“项目”的概念模型</title>

    <para>Maven
    维护了一个项目的模型，你不仅仅需要把源码编译成字节码，你还需要开发软件项目的描述信息，为项目指定一组唯一的坐标。你要描述项目的的属性。项目的许可证是什么？谁开发这个项目，为这个项目做贡献？这个项目依赖于其它什么项目没有？Maven不仅仅是一个“构建工具”，它不仅仅是在类似于
    make 和 Ant
    的工具的基础上的改进，它是包含了一组关于软件项目和软件开发的语义规则的平台。这个基于每一个项目定义的模型实现了如下特征：</para>

    <variablelist>
      <varlistentry>
        <term>依赖管理</term>

        <listitem>
          <para>由于项目是根据一个包含组标识符，构件标识符和版本的唯一的坐标定义的。项目间可以使用这些坐标来声明依赖。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>远程仓库</term>

        <listitem>
          <para>和项目依赖相关的，我们可以使用定义在项目对象模型（<acronym>POM</acronym>）中的坐标来创建 Maven
          构件的仓库。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>全局性构建逻辑重用</term>

        <listitem>
          <para>插件被编写成和项目模型对象（<acronym>POM</acronym>）一起工作，它们没有被设计成操作某一个已知位置的特定文件。一切都被抽象到模型中，插件配置和自定义行为都在模型中进行。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>工具可移植性/集成</term>

        <listitem>
          <para>像 Eclipse，NetBeans，和 InteliJ 这样的工具现在有共同的地方来找到项目的信息。在 Maven
          出现之前，每个 <acronym>IDE</acronym>
          都有不同的方法来存储实际上是自定义项目对象模型（<acronym>POM</acronym>）的信息。Maven
          标准化了这种描述，而虽然每个 <acronym>IDE</acronym>
          仍然继续维护它的自定义项目文件，但这些文件现在可以很容易的由模型生成。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>便于搜索和过滤构件</term>

        <listitem>
          <para>像 Nexus 这样的工具允许你使用存储在 <acronym>POM</acronym>
          中的信息对仓库中的内容进行索引和搜索。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Maven 为软件项目的语义一致性描述的开端提供了一个基础。</para>
  </section>

  <section id="section-mavenAlternativeAnt">
    <title>Maven是Ant的另一种选择么？</title>

    <para>当然，Maven 是 Ant 的另一种选择，但是 <ulink url="http://ant.apache.org">Apache
    Ant</ulink> 继续是一个伟大的，被广泛使用的工具。它已经是多年以来 Java 构建的统治者，而你很容易的在你项目的 Maven 构建中集成
    Ant 构建脚本。这是 Maven 项目一种很常见的使用模式。而另一方面，随着越来越多的开源项目转移到 Maven
    用它作为项目管理平台，开发人员开始意识到 Maven 不仅仅简化了构建管理任务，它也帮助鼓励开发人员的软件项目使用通用的接口。Maven
    不仅仅是一个工具，它更是一个平台，当你只是将 Maven 考虑成 Ant
    的另一种选择的时候，你是在比较苹果和橘子。“Maven”包含了很多构建工具以外的东西。</para>

    <para>有一个核心观点使得所有的关于 Maven 和. Ant， Maven 和 Buildr， Maven 和 Grandle
    的争论变得无关紧要。Maven并不是完全根据你构建系统的机制来定义的，它不是为你构建的不同任务编写脚本，它提倡一组标注，一个一般的接口，一个生命周期，一个标准的仓库格式，一个标准的目录布局，等等。它当然也不太在意
    <acronym>POM</acronym> 的格式正好是 <acronym>XML</acronym> 还是
    <acronym>YAML</acronym> 还是 Ruby。它比这些大得多，Maven 涉及的比构建工具本身多得多。当本书讨论 Maven
    的时候，它也设计到支持 Maven 的软件，系统和标准。Buildr，Ivy，Gradle，所有这些工具都和 Maven
    帮助创建的仓库格式交互，而你可以很容易的使用如 Nexus 这样的工具来支持一个完全由 Buildr 编写的构建。Nexus
    将在本书后面介绍。</para>

    <para>虽然 Maven
    是很多类似工具的另一个选择？但社区需要向前发展，就要看清楚技术是资本经济中不友好的竞争者之间持续的、零和的游戏。这可能是大企业之前相互关联的方式，但是和开源社区的工作方式没太大关系。“谁是胜利者？Ant
    还是 Maven”这个大标题没什么建设性意义。如果你非要我们来回答这个问题，我们会很明确的说作为构建的基本技术，Maven 是 Ant
    的更好选择；同时，Maven 的边界在持续的移动，Maven 的社区也在持续的是试图找到新的方法，使其更通用，互操作性更好，更易协同工作。Maven
    的核心财产是声明性构建，依赖管理，仓库管理，基于插件的高度和重用，但是当前，和开源社区相互协作以降低”企业级构建“的低效率这个目标来比，这些想法的特定实现没那么重要。</para>
  </section>

  <section id="sect-compare-ant-maven">
    <title>比较Maven和Ant</title>

    <para>虽然上一节应该已经让你确信本书的作者没有兴趣挑起 Apache Ant 和 Apache Maven
    之间的争执，但是我们认识到许多组织必须在 Apache Ant 和 Apache Maven
    之间做一个选择。本节我们对比一下这两个工具。</para>

    <para>Ant 在构建过程方面十分优秀，它是一个基于任务和依赖的构建系统。每个任务包含一组由 <acronym>XML</acronym>
    编码的指令。有 <sgmltag>copy</sgmltag> 任务和 <sgmltag>javac</sgmltag> 任务，以及
    <sgmltag>jar</sgmltag> 任务。在你使用 Ant 的时候，你为 Ant
    提供特定的指令以编译和打包你的输出。看下面的例子，一个简单的 <filename>build.xml</filename> 文件：</para>

    <example id="ex-ant-sample">
      <title>一个简单的 Ant build.xml 文件</title>

      <programlisting language="xml">&lt;project name="my-project" default="dist" basedir="."&gt;
    &lt;description&gt;
        simple example build file
    &lt;/description&gt;
  &lt;!-- set global properties for this build --&gt;
  &lt;property name="src" location="src/main/java"/&gt;
  &lt;property name="build" location="target/classes"/&gt;
  &lt;property name="dist"  location="target"/&gt;

  &lt;target name="init"&gt;
    &lt;!-- Create the time stamp --&gt;
    &lt;tstamp/&gt;
    &lt;!-- Create the build directory structure used by compile --&gt;
    &lt;mkdir dir="${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="compile" depends="init"
        description="compile the source " &gt;
    &lt;!-- Compile the java code from ${src} into ${build} --&gt;
    &lt;javac srcdir="${src}" destdir="${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="dist" depends="compile"
        description="generate the distribution" &gt;
    &lt;!-- Create the distribution directory --&gt;
    &lt;mkdir dir="${dist}/lib"/&gt;

    &lt;!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file --&gt;
    &lt;jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="clean"
        description="clean up" &gt;
    &lt;!-- Delete the ${build} and ${dist} directory trees --&gt;
    &lt;delete dir="${build}"/&gt;
    &lt;delete dir="${dist}"/&gt;
  &lt;/target&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>在这个简单的 Ant 例子中，你能看到，你需要明确的告诉 Ant 你想让它做什么。有一个包含
    <varname>javac</varname> 任务的编译目标用来将 <filename>src/main/java</filename>
    的源码编译至 <filename>target/classes</filename> 目录。你必须明确告诉 Ant
    你的源码在哪里，结果字节码你想存储在哪里，如何将这些字节码打包成 <acronym>JAR</acronym> 文件。虽然最近有些进展以帮助 Ant
    减少程序，但一个开发者对 Ant 的感受是用 <acronym>XML</acronym> 编写程序语言。</para>

    <para>用 Maven 样例与之前的 Ant 样例做个比较。在 Maven 中，要从 Java 源码创建一个
    <acronym>JAR</acronym> 文件，你只需要创建一个简单的 <filename>pom.xml</filename>，将你的源码放在
    <filename>${basedir}/src/main/java</filename> ，然后从命令行运行 <command>mvn
    install</command>。下面的样例 Maven <filename>pom.xml</filename> 文件能完成和之前 Ant
    样例所做的同样的事情。</para>

    <example id="ex-maven-sample">
      <title>一个简单的 Maven pom.xml</title>

      <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>这就是你 <filename>pom.xml</filename> 的全部。从命令行运行 <command>mvn
    install</command> 会处理资源文件，编译源代码，运行单元测试，创建一个 <acronym>JAR</acronym> ，然后把这个
    <acronym>JAR</acronym> 安装到本地仓库以为其它项目提供重用性。不用做任何修改，你可以运行 <command>mvn
    site</command> ，然后在 <filename>target/site</filename> 目录找到一个
    <filename>index.html</filename> 文件，这个文件链接了 JavaDoc 和一些关于源代码的报告。</para>

    <para>诚然，这是一个最简单的样例项目。一个只包含源代码并且生成一个 <acronym>JAR</acronym> 的项目。一个遵循 Maven
    的约定，不需要任何依赖和定制的项目。如果我们想要定制行为，我们的 <filename>pom.xml</filename>
    的大小将会增加，在最大的项目中，你能看到一个非常复杂的 Maven <acronym>POM</acronym>
    的集合，它们包含了大量的插件定制和依赖声明。但是，虽然你项目的 <acronym>POM</acronym>
    文件变得增大，它们包含的信息与一个差不多大小的基于 Ant 项目的构建文件的信息是完全不同的。Maven
    <acronym>POM</acronym> 包含声明：“这是一个 <acronym>JAR</acronym> 项目”，“源代码在
    <filename>src/main/java</filename> 目录”。Ant 构建文件包含显式的指令：“这是一个项目”，“源代码在
    <filename>src/main/java</filename> ”，“针对这个目录运行 javac ”，“把结果放到
    <filename>target/classes</filename> ”，“从……创建一个 <acronym>JAR</acronym>
    ”，等等。Ant 必须的过程必须是显式的，而 Maven 有一些“内置”的东西使它知道源代码在哪里，如何处理它们。</para>

    <para>该例中 Ant 和 Maven 的区别是：</para>

    <para><variablelist>
        <varlistentry>
          <term>Apache Ant</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Ant 没有正式的约定如一个一般项目的目录结构，你必须<emphasis>明确的</emphasis>告诉
                  Ant 哪里去找源代码，哪里放置输出。随着时间的推移，非正式的约定出现了，但是它们还没有在产品中模式化。</para>
                </listitem>

                <listitem>
                  <para>Ant 是程序化的，你必须明确的告诉 Ant
                  做什么，什么时候做。你必须告诉它去编译，然后复制，然后压缩。</para>
                </listitem>

                <listitem>
                  <para>Ant 没有生命周期，你必须定义目标和目标之间的依赖。你必须手工为每个目标附上一个任务序列。</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Apache Maven</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Maven 拥有约定，因为你遵循了约定，它已经知道你的源代码在哪里。它把字节码放到
                  <filename>target/classes</filename> ，然后在
                  <filename>target</filename> 生成一个 <acronym>JAR</acronym>
                  文件。</para>
                </listitem>

                <listitem>
                  <para>Maven 是声明式的。你需要做的只是创建一个 <acronym>pom.xml</acronym>
                  文件然后将源代码放到默认的目录。Maven 会帮你处理其它的事情。</para>
                </listitem>

                <listitem>
                  <para>Maven 有一个生命周期，当你运行 <command>mvn install</command>
                  的时候被调用。这条命令告诉 Maven
                  执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven
                  运行了许多默认的插件目标，这些目标完成了像编译和创建一个 <acronym>JAR</acronym>
                  文件这样的工作。</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Maven 以插件的形式为一些一般的项目任务提供了内置的智能。如果你想要编写运行单元测试，你需要做的只是编写测试然后放到
    <filename>${basedir}/src/test/java</filename> ，添加一个对于 TestNG 或者 JUnit
    的测试范围依赖，然后运行 <command>mvn test</command> 。如果你想要部署一个 web 应用而非
    <acronym>JAR</acronym> ，你需要做的是改变你的项目类型为 war ，然后把你文档根目录置为
    <filename>${basedir}/src/main/webapp</filename> 。当然，你可以用 Ant
    做这些事情，但是你将需要从零开始写这些指令。使用 Ant ，你首先需要确定 JUnit <acronym>JAR</acronym>
    文件应该放在哪里，然后你需要创建一个包含这个 JUnit <acronym>JAR</acronym> 文件的 classpath ，然后告诉
    Ant 它应该从哪里去找测试源代码，编写一个目标来编译测试源代码为字节码，使用 JUnit 来执行单元测试。</para>

    <para>没有诸如 antlibs 和 lvy 等技术的支持（即使有了这些支持技术），Ant
    给人感觉是自定义的程序化构建。项目中一组高效的坚持约定的 Maven <acronym>POM</acronym> ，相对于 Ant
    的配置文件，只有很少的 <acronym>XML</acronym> 。Maven 的另一个优点是它依靠广泛公用的 Maven 插件。所有人使用
    Maven Surefire 插件来运行单元测试，如果有人添加了一些针对新的测试框架的支持，你可以仅仅通过在你项目的
    <acronym>POM</acronym> 中升级某个特定插件的版本来获得新的功能。</para>

    <para>使用 Maven 还是 Ant 的决定不是非此即彼的，Ant
    在复杂的构建中还有它的位置。如果你目前的构建包含一些高度自定义的过程，或者你已经写了一些 Ant
    脚本通过一种明确的方法完成一个明确的过程，而这种过程不适合 Maven 标准，你仍然可以在 Maven 中用这些脚本。作为一个 Maven
    的核心插件， Ant 还是可用的。自定义的插件可以用 Ant 来实现，Maven 项目可以配置成在生命周期中运行 Ant 的脚本。</para>
  </section>

  <section id="section-introSummary">
    <title>总结</title>

    <para>我们刻意的使这篇介绍保持得简短。 我们略述了一些Maven定义的要点，它们合起来是什么，它是基于什么改进的，同时介绍了其它构建工具。
    下一章将深入一个简单的项目，看 Maven 如何能够通过最小数量的配置来执行典型的任务。</para>
  </section>
</chapter>
