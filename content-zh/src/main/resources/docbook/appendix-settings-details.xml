<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix id="settings-details">
  <title>附录: Settings细节</title>

  <section id="appendix-settings-details">
    <title>简介</title>

    <para><filename>settings.xml</filename>文件中的settings元素包含了很多子元素，它们定义的值被用来配置Maven的执行情况。该settings文件的设置会被应用到很多个项目上，因此这里的设置不应该和任何一个特定的项目绑定，并且该设置的内容也不应该分发给它人。该文件定义的值包括本地仓库地址，候选的远程仓库仓库服务器，以及一些认证信息。<filename>settings.xml</filename>文件可位于两个地方：</para>

    <itemizedlist>
      <listitem>
        <para>Maven安装目录:
        <filename>$M2_HOME/conf/settings.xml</filename></para>
      </listitem>

      <listitem>
        <para>用户特定的Settings文件: <filename>~/.m2/settings.xml</filename></para>
      </listitem>
    </itemizedlist>

    <para>这里是settings元素下最顶层元素的概览：</para>

    <para><example>
        <title>settings.xml中顶层元素的概览</title>

        <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository/&gt;
  &lt;interactiveMode/&gt;
  &lt;usePluginRegistry/&gt;
  &lt;offline/&gt;
  &lt;pluginGroups/&gt;
  &lt;servers/&gt;
  &lt;mirrors/&gt;
  &lt;proxies/&gt;
  &lt;profiles/&gt;
  &lt;activeProfiles/&gt;
&lt;/settings&gt;
</programlisting>
      </example></para>
  </section>

  <section>
    <title>Settings细节</title>

    <section>
      <title>简单值</title>

      <para>一半顶层settings元素是简单值，它们表示的一系列值可以配置Maven的核心行为：</para>

      <para><example>
          <title>settings.xml中的简单顶层元素</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  &lt;localRepository&gt;${user.dir}/.m2/repository&lt;/localRepository&gt;
  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;
  &lt;usePluginRegistry&gt;false&lt;/usePluginRegistry&gt;
  &lt;offline&gt;false&lt;/offline&gt;
  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.codehaus.mojo&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>这些简单顶层元素是：</para>

      <variablelist>
        <varlistentry>
          <term>localRepository</term>

          <listitem>
            <para>该值表示构建系统本地仓库的路径。其默认值为<filename>${user.dir}/.m2/repository</filename>。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>interactiveMode</term>

          <listitem>
            <para>如果Maven需要和用户交互以获得输入，则设置成<varname>true</varname>，反之则应为<varname>false</varname>。默认为<varname>true</varname>。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>usePluginRegistry</term>

          <listitem>
            <para>如果需要让Maven使用文件<filename>${user.dir}/.m2/plugin-registry.xml</filename>来管理插件版本，则设为<varname>true</varname>。默认为<varname>false</varname>。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>offline</term>

          <listitem>
            <para>如果构建系统需要在离线模式下运行，则为<varname>true</varname>，默认为<varname>false</varname>。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pluginGroups</term>

          <listitem>
            <para>该元素包含一个<sgmltag>pluginGroup</sgmltag>元素列表，每个子元素包含了一个<sgmltag>groupId</sgmltag>。当我们使用某个插件，并且没有在命令行为其提供<sgmltag>groupId</sgmltag>的时候，Maven就会使用该列表。默认情况下该列表包含了<varname>org.apache.maven.plugins</varname>。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>服务器（Servers）</title>

      <para><acronym>POM</acronym>中的<sgmltag>distributionManagement</sgmltag>元素定义了部署的仓库。然而，一些设置如安全证书不应该和<filename>pom.xml</filename>一起分发。这种类型的信息应该存在于构建服务器上的<filename>settings.xml</filename>文件中。</para>

      <para><example>
          <title>settings.xml中的Server配置</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;server001&lt;/id&gt;
      &lt;username&gt;my_login&lt;/username&gt;
      &lt;password&gt;my_password&lt;/password&gt;
      &lt;privateKey&gt;${usr.home}/.ssh/id_dsa&lt;/privateKey&gt;
      &lt;passphrase&gt;some_passphrase&lt;/passphrase&gt;
      &lt;filePermissions&gt;664&lt;/filePermissions&gt;
      &lt;directoryPermissions&gt;775&lt;/directoryPermissions&gt;
      &lt;configuration&gt;&lt;/configuration&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>server下的元素包括：</para>

      <variablelist>
        <varlistentry>
          <term>id</term>

          <listitem>
            <para>这是server的<sgmltag>id</sgmltag>（注意不是用户登陆的<sgmltag>id</sgmltag>），该<sgmltag>id</sgmltag>与<sgmltag>distributionManagement</sgmltag>中repository元素的<sgmltag>id</sgmltag>相匹配。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>username, password</term>

          <listitem>
            <para>这对元素表示服务器认证所需要的登录名和密码。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>privateKey, passphrase</term>

          <listitem>
            <para>和前两个元素类似，这一对元素指定了一个私钥的路径（默认是<filename>${user.home}/.ssh/id_dsa</filename>）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在<filename>settings.xml</filename>文件以纯文本的形式声明。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>filePermissions, directoryPermissions</term>

          <listitem>
            <para>如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了*nix文件系统的权限，如664，或者775。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>镜像（Mirrors）</title>

      <para><example>
          <title>settings.xml中的Mirror配置</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;planetmirror.com&lt;/id&gt;
      &lt;name&gt;PlanetMirror Australia&lt;/name&gt;
      &lt;url&gt;http://downloads.planetmirror.com/pub/maven2&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id, name</term>

            <listitem>
              <para>该镜像的唯一定义符。id用来区分不同的mirror元素。</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>url</term>

            <listitem>
              <para>该镜像的<acronym>URL</acronym>。构建系统会优先考虑使用该<acronym>URL</acronym>，而非使用默认的服务器<acronym>URL</acronym>。</para>
            </listitem>
          </varlistentry>
        </variablelist><variablelist>
          <varlistentry>
            <term>mirrorOf</term>

            <listitem>
              <para>被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（<ulink
              url="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</ulink>）的镜像，就需要将该元素设置成central。这必须和中央仓库的id
              central完全一致。</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section>
      <title>代理（Proxies）</title>

      <para><example>
          <title>settings.xml中的proxy配置</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;myproxy&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;http&lt;/protocol&gt;
      &lt;host&gt;proxy.somewhere.com&lt;/host&gt;
      &lt;port&gt;8080&lt;/port&gt;
      &lt;username&gt;proxyuser&lt;/username&gt;
      &lt;password&gt;somepassword&lt;/password&gt;
      &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;/nonProxyHosts&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>id</term>

            <listitem>
              <para>该代理的唯一定义符，用来区分不同的proxy元素。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>active</term>

            <listitem>
              <para><varname>true</varname>则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>protocol, host, port</term>

            <listitem>
              <para>该代理的<varname>protocol://host:port</varname>，（协议://主机名:端口），分隔成离散的元素以方便配置。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>username, password</term>

            <listitem>
              <para>这一对元素表示代理服务器认证的登录名和密码。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>nonProxyHosts</term>

            <listitem>
              <para>这里定义一个不该被代理的主机名列表。该列表的分隔符由代理服务器指定；上述的例子中使用了竖线分隔符，使用逗号分隔也很常见。</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section>
      <title>Profiles</title>

      <para><filename>settings.xml</filename>中的<sgmltag>profile</sgmltag>元素是<filename>pom.xml</filename>中<sgmltag>profile</sgmltag>元素的裁剪版本。它包含了<sgmltag>activation</sgmltag>,
      <sgmltag>repositories</sgmltag>, <sgmltag>pluginRepositories</sgmltag> 和
      <sgmltag>properties</sgmltag>元素。这里的profile元素只包含这四个子元素是因为这里只关心构建系统这个整体（这正是<filename>settings.xml</filename>文件的角色定位），而非单独的项目对象模型设置。</para>

      <para>如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。</para>
    </section>

    <section>
      <title>激活（Activation）</title>

      <para>Activation是profile的开启钥匙。如<acronym>POM</acronym>中的profile一样，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。</para>

      <para><example>
          <title>在settings.xml中定义Activation参数</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;test&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;
        &lt;jdk&gt;1.5&lt;/jdk&gt;
        &lt;os&gt;
          &lt;name&gt;Windows XP&lt;/name&gt;
          &lt;family&gt;Windows&lt;/family&gt;
          &lt;arch&gt;x86&lt;/arch&gt;
          &lt;version&gt;5.1.2600&lt;/version&gt;
        &lt;/os&gt;
        &lt;property&gt;
          &lt;name&gt;mavenVersion&lt;/name&gt;
          &lt;value&gt;2.0.3&lt;/value&gt;
        &lt;/property&gt;
        &lt;file&gt;
          &lt;exists&gt;${basedir}/file2.properties&lt;/exists&gt;
          &lt;missing&gt;${basedir}/file1.properties&lt;/missing&gt;
        &lt;/file&gt;
      &lt;/activation&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>当所有指定的条件符合的时候，profile机会被激活，虽然大部分情况我们不会需要所有的条件。</para>

      <variablelist>
        <varlistentry>
          <term>jdk</term>

          <listitem>
            <para>activation通过其jdk元素，提供了一个内置的，Java-核心的检查器。如果我们运行的一个jdk版本号，这里所配置的值能作为前缀与之匹配，激活就会发生。在上述的例子中，1.5.0_06就能够匹配。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>os</term>

          <listitem>
            <para><sgmltag>os</sgmltag>元素可以定义一些操作系统相关的属性，如上例。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>property</term>

          <listitem>
            <para>如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>file</term>

          <listitem>
            <para>最后，通过提供一个文件名，通过检测该文件的存在或不存在来激活profile。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><sgmltag>activation</sgmltag>元素并不是激活profile的唯一方式。<filename>settings.xml</filename>文件中的<sgmltag>activeProfile</sgmltag>元素可以包含profile的id。profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活（如，-P
      test）。</para>

      <para>要了解在某个特定的构建中哪些profile会激活，可以使用maven-help-plugin。</para>

      <screen>mvn help:active-profiles
</screen>
    </section>

    <section>
      <title>属性（Properties）</title>

      <para>Maven属性和Ant中的属性一样，可以用来存放一些值。这些值可以在POM中的任何地方使用标记${X}来使用，这里X是指属性的名称。属性有五种不同的形式，并且都能在settings.xml文件中访问。</para>

      <orderedlist>
        <listitem>
          <para><varname>env.X</varname>:
          在一个变量前加上"env."的前缀，会返回一个shell环境变量。例如，<varname>${env.PATH}</varname>指代了<varname>$path</varname>环境变量（在Windows上是<varname>%PATH%</varname>）。</para>
        </listitem>

        <listitem>
          <para><varname>project.x</varname>：这个点（.）标记的路径，指代了POM中对应的元素值。</para>
        </listitem>

        <listitem>
          <para><varname>settings.x</varname>:
          这个点（.）标记的路径，指代了settings.xml中对应元素的值。</para>
        </listitem>

        <listitem>
          <para>Java System Properties:
          所有可通过<methodname>java.lang.System.getProperties()</methodname>访问的属性都能在POM中使用该形式访问，如<varname>${java.home}</varname>。</para>
        </listitem>

        <listitem>
          <para><varname>x</varname>:
          在&lt;properties/&gt;元素中，或者外部文件中设置，以<varname>${someVar}</varname>的形式使用。</para>
        </listitem>
      </orderedlist>

      <para><example>
          <title>在settings.xml中设置${user.install} 属性</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;properties&gt;
        &lt;user.install&gt;${user.dir}/our-project&lt;/user.install&gt;
      &lt;/properties&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para>如果该profile激活，属性<varname>${user.install}</varname>就可以在POM中被访问。</para>
    </section>

    <section>
      <title>仓库（Repositories）</title>

      <para>仓库是Maven用来填充构建系统本地仓库所使用的一组远程项目。而Maven是从本地仓库中使用其插件和依赖。不同的远程仓库可能含有不同的项目，而在某个激活的profile下，可能定义了一些仓库来搜索需要的发布版或快照版构件。</para>

      <para><example>
          <title>settings.xml中的仓库配置</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        ...
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
  ...
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><variablelist>
          <varlistentry>
            <term>releases, snapshots</term>

            <listitem>
              <para>这里配置了两种构件，发布版（Release）和快照版（Snapshot）的策略。有了这两组配置，POM就可以在每个单独的仓库中，为每种类型类型的构件采取不同的策略。例如，可能有人会决定只为开发的目的开启对快照版本下载的支持。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>enabled</term>

            <listitem>
              <para><varname>true</varname>或者<varname>false</varname>表示该仓库是否为某种类型构件（发布版或者快照版）开启。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>updatePolicy</term>

            <listitem>
              <para>该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>checksumPolicy</term>

            <listitem>
              <para>当Maven将构件部署到仓库中时，它也会部署对应的校验和文件。当没有校验和文件，或者该文件不正确时，你的选项有ignore（忽略），fail（失败），或者warn（警告）。</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>layout</term>

            <listitem>
              <para>在上面的仓库描述中，它们都遵循一个共同的布局。大部分情况都是这样。Maven
              2为其仓库提供了一个默认的布局；然而，Maven
              1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section>
      <title>插件仓库</title>

      <para>仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储大部分构件类型。另外一种构件类型是插件。Maven插件是一种特殊类型的构件。由于这个原因，插件仓库独立于其它仓库。<sgmltag>pluginRepositories</sgmltag>元素的结构和<sgmltag>repositories</sgmltag>元素的结构类似。每个<sgmltag>pluginRepository</sgmltag>元素指定一个Maven可以用来寻找新插件的远程地址。</para>
    </section>

    <section>
      <title>激活的Profile</title>

      <para><example>
          <title>在settings.xml中设置激活profile</title>

          <programlisting language="xml">&lt;settings xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
  ...
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;env-test&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;
</programlisting>
        </example></para>

      <para><filename>settings.xml</filename>中最后一需要理解的配置是<sgmltag>activeProfiles</sgmltag>元素。该元素包含了一组<sgmltag>activeProfile</sgmltag>元素，每个<sgmltag>activeProfile</sgmltag>都含有一个profile
      id。任何在<sgmltag>activeProfile</sgmltag>中定义的profile
      id，不论环境设置如何，其对应的profile都会被激活。如果没有匹配的profile，则什么都不会发生。例如，<varname>env-test</varname>是一个<sgmltag>activeProfile</sgmltag>，则在<filename>pom.xml</filename>（或者<filename>profile.xml</filename>）中对应id的profile会被激活。如果运行过程中找不到这样一个profile，Maven则会像往常一样运行。</para>
    </section>
  </section>
</appendix>
