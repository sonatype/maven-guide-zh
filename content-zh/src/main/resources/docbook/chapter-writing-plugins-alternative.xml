<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="writing-plugins-alternative">
  <title>使用可选语言编写插件</title>

  <para>你可以使用Java编写Mojo，你也可以使用其它可选的语言。Maven支持了很多语言来编写插件，本章介绍如何使用三种语言：Groovy,
  Ant, 及Ruby，来编写插件。</para>

  <section>
    <title>使用Ant编写插件</title>

    <para>Ant从某种意义上来说不是一种语言，它是一种构建工具，能让你通过一组归类成构建目标的任务来描述一个构建。Ant允许你声明不同构建目标之间的依赖；比如，使用Ant你实际上是在创建自己的生命周期。一个Ant的build.xml可能会有一个install目标，它依赖于一个test目标，而后者又依赖于compile目标。Ant可以说是Maven的前辈，它是一个普遍的过程式构建工具，在Maven引入高度可重用的构建插件及全局生命周期之前，Ant几乎被所有项目使用。</para>

    <para>虽然Maven比Ant进步了，但是在描述构建过程的某些部分的时候，Ant仍然十分有用。当你需要执行一些文件操作，XSLT转换，或者其它你能可能想到的操作的时候，Ant提供的一组任务便十分简洁有效。关于Ant任务有一个很大的类库，包括了几乎所有功能，运行JUnit测试，转换XML，使用SCP复制文件至远程服务器，等等。关于所有可用的Ant任务列表可以从这里查到：<ulink
    url="http://ant.apache.org/manual/tasksoverview.html">Apache Ant
    手册</ulink>。你可以使用这些任务作为一个低级别的构建自定义语言，你也可以不用Java而是使用Ant编写一个Maven插件，你可以给一个Ant构建目标的Mojo传入参数。</para>
  </section>

  <section>
    <title>创建一个Ant插件</title>

    <para>要使用Ant创建一个Maven插件，你需要有一个pom.xml和一个使用Ant实现的Mojo。一开始，创建一个名为firstant-maven-plugin的项目目录。在该目录创建如下的pom.xml。</para>

    <example>
      <title>一个Ant Maven插件的POM</title>

      <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;firstant-maven-plugin&lt;/artifactId&gt;
  &lt;name&gt;Example Ant Mojo - firstant-maven-plugin&lt;/name&gt;
  &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-script-ant&lt;/artifactId&gt;
      &lt;version&gt;2.0.6&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
            &lt;artifactId&gt;maven-plugin-tools-ant&lt;/artifactId&gt;
            &lt;version&gt;2.0.5&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>紧接着，你需要创建你的Ant Mojo。一个Ant
    Mojo包括两个部分：XML文件中的Ant任务，以及一个提供Mojo描述符信息的文件。Ant插件工具会到<filename>${basedir}/src/main/scripts</filename>目录下寻找这些文件。在这里创建一个文件名为echo.build.xml，包含如下的Ant
    XML。</para>

    <example>
      <title>Echo Ant Mojo</title>

      <programlisting language="xml">&lt;project&gt;
  &lt;target name="echotarget"&gt;
    &lt;echo&gt;${message}&lt;/echo&gt;
  &lt;/target&gt;
&lt;/project&gt;
</programlisting>
    </example>

    <para>另外创建一个文件描述这个Echo Ant
    Mojo，同样的在<filename>${basedir}/src/main/scripts</filename>目录下，名为echo.mojos.xml。</para>

    <example>
      <title>Echo Ant Mojo描述符</title>

      <programlisting language="xml">&lt;pluginMetadata&gt;
  &lt;mojos&gt;
    &lt;mojo&gt;
      &lt;goal&gt;echo&lt;/goal&gt;
      &lt;call&gt;echotarget&lt;/call&gt;
      &lt;description&gt;Echos a Message&lt;/description&gt;
      &lt;parameters&gt;
        &lt;parameter&gt;
          &lt;name&gt;message&lt;/name&gt;
          &lt;property&gt;message&lt;/property&gt;
          &lt;required&gt;false&lt;/required&gt;
          &lt;expression&gt;${message}&lt;/expression&gt;
          &lt;type&gt;java.lang.Object&lt;/type&gt;
          &lt;defaultValue&gt;Hello Maven World&lt;/defaultValue&gt;
          &lt;description&gt;Prints a message&lt;/description&gt;
        &lt;/parameter&gt;
      &lt;/parameters&gt;
    &lt;/mojo&gt;
  &lt;/mojos&gt;
&lt;/pluginMetadata&gt;</programlisting>
    </example>

    <para>这个echo.mojos.xml文件为该插件配置Mojo描述符。它提供了一个名为"echo"的目标名称，它在call元素中告诉Maven调用哪个Ant任务。除了配置描述信息，该XML还使用表达式${message}配置了message参数，并且为此提供了一个缺省值"Hello
    Maven World"。</para>

    <para>如果你在~/.m2/settings.xml中配置你的插件组包含了org.sonatype.mavenbook.plugins，你就可以通过执行如下的命令安装这个Ant插件：</para>

    <screen>$ <command>mvn install</command>
[INFO] ------------------------------------------------------------------------
[INFO] Building Example Ant Mojo - firstant-maven-plugin
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [plugin:descriptor]
[INFO] Using 3 extractors.
[INFO] Applying extractor for language: java
[INFO] Extractor for language: java found 0 mojo descriptors.
[INFO] Applying extractor for language: bsh
[INFO] Extractor for language: bsh found 0 mojo descriptors.
[INFO] Applying extractor for language: ant
[INFO] Extractor for language: ant found 1 mojo descriptors.
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>注意plugin:descriptor目标发现了一个Ant Mojo描述符。要运行这个目标，你可以执行如下的命令：</para>

    <screen>$ <command>mvn firstant:echo</command>
...
[INFO] [firstant:echo]

echotarget:
     [echo] Hello Maven World
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

    <para>echo目标执行后打印了默认的message参数的值。如果你习惯了Apache
    Ant构建脚本，你会注意到Ant打印了所执行目标的名称，并且在echo任务的输出上加了一个日志前缀。</para>
  </section>

  <section>
    <title>使用JRuby编写插件</title>

    <para>Ruby是一种面向对象脚本语言，它为元编程（meta-programming）和反射提供了丰富的基础设施。Ruby对于closure和block的使用造就了一种既紧凑又不失强大的编程风格。虽然Ruby自1993年就出现了，但大部分人了解到Ruby是在基于Ruby的web框架，Ruby
    on Rails流行之后。JRuby是用Java编写的Ruby解析器。要了解更多的关于Ruby语言的信息，可参考<ulink
    url="http://www.ruby-lang.org/">http://www.ruby-lang.org/</ulink>，而关于JRuby，可参考<ulink
    url="http://jruby.codehaus.org/">http://jruby.codehaus.org/</ulink>。</para>

    <section>
      <title>创建一个JRuby插件</title>

      <para>要使用JRuby创建一个Maven插件，你需要一个pom.xml和一个Ruby实现的Mojo。一开始，创建一个名为firstruby-maven-plugin的项目目录，在该目录中创建如下的pom.xml。</para>

      <example>
        <title>一个JRuby Maven插件的POM</title>

        <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;firstruby-maven-plugin&lt;/artifactId&gt;
  &lt;name&gt;Example Ruby Mojo - firstruby-maven-plugin&lt;/name&gt;
  &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
      &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.0-beta-4&lt;/version&gt;
      &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.0-beta-4&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
      </example>

      <para>紧接着，你需要创建一个由Ruby实现的Mojo。Maven会到<filename>${basedir}/src/main/scripts</filename>目录寻找Ruby
      Mojo。创建如下的<filename>${basedir}/src/main/scripts/echo.rb</filename>文件：</para>

      <example>
        <title>Echo Ruby Mojo</title>

        <programlisting># Prints a message
# @goal "echo"
# @phase "validate"
class Echo &lt; Mojo

  # @parameter type="java.lang.String" default-value="Hello Maven World" expression="${message}"
  def message
  end

  def execute
    info $message
  end

end

run_mojo Echo
</programlisting>
      </example>

      <para>这个Echo类必须扩展Mojo类，它必须重写execute()方法。在<filename>echo.rb</filename>文件最后，你将需要使用"run_mojo
      Echo"运行这个mojo。要安装该插件，运行mvn install：</para>

      <screen>$ <command>mvn install</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Example Ruby Mojo - firstruby-maven-plugin
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
...
[INFO] [plugin:descriptor]
...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Extractor for language: jruby found 1 mojo descriptors.
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

      <para>在构建过程中，你会看到Maven
      Plugin插件的descriptor目标应用了JRuby萃取器(extractor)创建了一个plugin.xml文件，该文件萃取了所有Echo类的注解。如果你已经配置你默认的插件组包含了org.sonatype.plugins，你就可以使用如下的命令运行该目标：</para>

      <screen>$ <command>mvn firstruby:echo</command>
...
[INFO] [firstruby:echo]
[INFO] Hello Maven World
...</screen>
    </section>

    <section>
      <title>Ruby Mojo实现</title>

      <para>Ruby
      Mojo在源文件中使用注释进行注解。一个单独的注解如@parameter可以接受很多属性，而多个属性都必须在同一行中指定。注解属性之间不能有换行符。类和参数都可以被注解。关于参数可以使用四种注解：@parameter,
      @required, @readonly, 和@deprecated。@parameter注解接受如下的属性：</para>

      <variablelist>
        <varlistentry>
          <term>alias</term>

          <listitem>
            <para>参数的别名。可以同样用来填充该参数的可选的名称。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>default-value</term>

          <listitem>
            <para>如果参数被提供的值或者参数表达式的结果是null，就使用该缺省值。在echo.rb中，我们指定了缺省值为"Hello
            Maven World"。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>expression</term>

          <listitem>
            <para>指定一个表达式，可以用来解析Maven属性或者系统属性。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>type</term>

          <listitem>
            <para>该参数的完全限定的Java类型。如果没有指定，默认值为java.lang.String。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>除了@parameter注解，参数还可以使用如下的注解：</para>

      <variablelist>
        <varlistentry>
          <term>@required "&lt;true|false&gt;"</term>

          <listitem>
            <para>标记一个参数是否为必须的。默认值是false。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@readonly "&lt;true|false&gt;"</term>

          <listitem>
            <para>标记参数为只读。如果为true，你就无法从命令行覆盖默认值或者默认表达式的值。这里，默认值为false。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@deprecated "&lt;true|false&gt;"</term>

          <listitem>
            <para>标记该参数是废弃的。默认为false。</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>将所有这些内容放在一起，一个echo.rb中完全注解的message参数看起来就会成为这个样子：</para>

      <programlisting># @parameter type="java.lang.String" default-value="Hello Maven World" expression="${message}"
# @readonly true
# @required false
# @deprecated false
def message
end
</programlisting>

      <para>Ruby的Mojo类可以使用如下的注解：</para>

      <variablelist>
        <varlistentry>
          <term>@goal</term>

          <listitem>
            <para>指定目标的名称。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@phase</term>

          <listitem>
            <para>该目标绑定的默认的阶段。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@requiresDependencyResolution</term>

          <listitem>
            <para>如果Mojo需要依赖在运行之前被解析，则为true。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@aggregator</term>

          <listitem>
            <para>标记该mojo为聚合。</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@execute</term>

          <listitem>
            <para>支持在运行Mojo之前执行一个目标或者生命周期阶段。@execute注解接受如下的属性；</para>

            <variablelist>
              <varlistentry>
                <term>goal</term>

                <listitem>
                  <para>要执行的目标的名称。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>phase</term>

                <listitem>
                  <para>要执行的生命周期阶段的名称。</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>lifecycle</term>

                <listitem>
                  <para>生命周期的名称（如果不是默认的话）。</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>举一个注解Mojo类的例子，代码如下：</para>

      <programlisting># Completes some build task
# @goal custom-goal
# @phase install
# @requiresDependencyResolution false
# @execute phase=compile
class CustomMojo &lt; Mojo
   ...
end</programlisting>

      <para>Mojo参数可以引用Java类和Maven属性。下面的例子展示了如何从Ruby
      Mojo访问MavenProject对象。</para>

      <example>
        <title>从Ruby Mojo中引用MavenProject对象</title>

        <programlisting># This is a mojo description
# @goal test
# @phase validate
class Test &lt; Mojo
  # @parameter type="java.lang.String" default-value="nothing" alias="a_string"
  def prop
  end  

  # @parameter type="org.apache.maven.project.MavenProject" expression="${project}"
  # @required true  
  def project
  end  

  def execute    
    info "The following String was passed to prop: '#{$prop}'"    
    info "My project artifact is: #{$project.artifactId}"  
  end
end

run_mojo Test
</programlisting>

        <para>在前面的例子中，我们可以使用标准的Ruby语法访问Project类的属性。如果你将test.rb放到firstruby-maven-plugin的<filename>src/main/scripts</filename>目录，然后install这个插件，接着运行它，你会看到如下的输出：</para>

        <screen>$ <command>mvn install</command>
...
[INFO] [plugin:descriptor]
[INFO] Using 3 extractors.
[INFO] Applying extractor for language: java
...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Ruby Mojo File: /test.rb
[INFO] Extractor for language: jruby found 2 mojo descriptors.
...
$ <command>mvn firstruby:test</command>
...
[INFO] [firstruby:test]
[INFO] The following String was passed to prop: 'nothing'
[INFO] My project artifact is: firstruby-maven-plugin
</screen>
      </example>
    </section>

    <section>
      <title>Ruby Mojo中使用日志</title>

      <para>要在Ruby Mojo中使用日志，调用info(), debug(), 和error()方法，并传入日志信息参数。</para>

      <programlisting># Tests Logging
# @goal logtest
# @phase validate
class LogTest &lt; Mojo

  def execute
    info "Prints an INFO message"
    error "Prints an ERROR message"
    debug "Prints to the Console"
  end

end

run_mojo LogTest
</programlisting>
    </section>

    <section>
      <title>Raise一个MojoError</title>

      <para>如果在一个Ruby Mojo中有一个未发现的错误，你就需要raise一个MojoError。<xref
      linkend="ex-raise-ruby-error" />展示了如何raise一个MojoError。例子中的mojo首先打印了一条日志信息，然后raise一个MojoError。</para>

      <example id="ex-raise-ruby-error">
        <title>在Ruby Mojo中raise一个MojoError</title>

        <programlisting># Prints a Message
# @goal error
# @phase validate
class Error &lt; Mojo

  # @parameter type="java.lang.String" default-value="Hello Maven World" expression="${message}"
  # @required true
  # @readonly false
  # @deprecated false
  def message
  end

  def execute
    info $message
    raise MojoError.new( "This Mojo Raised a MojoError" )
  end

end

run_mojo Error
</programlisting>
      </example>

      <para>运行该Mojo，会产生如下的输出：</para>

      <screen>$ mvn firstruby:error
...
INFO] [firstruby:error]
[INFO] Hello Maven World
[ERROR] This Mojo Raised a MojoError
</screen>
    </section>

    <section>
      <title>在JRuby中引用Plexus组件</title>

      <para>Ruby
      Mojo可以依赖于一个Plexus组件。为此，你需要使用@parameter注解的expression参数，在这里为Plexus指定role和hint。下面的例子中，Ruby
      Mojo依赖于Archiver组件，Maven会据此从Plexus获取该组件。</para>

      <example>
        <title>在Ruby Mojo中依赖于一个Plexus组件</title>

        <programlisting># This mojo tests plexus integration
# @goal testplexus
# @phase validate
class TestPlexus &lt; Mojo

  # @parameter type="org.codehaus.plexus.archiver.Archiver" \
expression="${component.org.codehaus.plexus.archiver.Archiver#zip}"
  def archiver
  end

  def execute
    info $archiver
  end
end

run_mojo TestPlexus
</programlisting>
      </example>

      <para>请注意Ruby
      Mojo注解的属性不能跨越多行。如果你要运行该目标，你会看到Maven将根据role：org.codehaus.plexus.archiver.Archiver和hit：zip尝试从Plexus获取一个组件。</para>
    </section>
  </section>

  <section>
    <title>使用Groovy编写插件</title>

    <para>Groovy是一个基于Java虚拟机的动态语言，它最终也被编译成Java字节码。Groovy是Codehaus社区的项目。如果你十分熟悉Java，Groovy就会是一种很自然的脚本语言。Groovy使用了Java的很多特性，同时进行了略微的裁剪，并加入了一些新特性，如闭包(closure)，鸭子类型判断(duck-typing)，和正则表达式。要了解更多的关于Groovy的信息，可以访问Groovy的站点：<ulink
    url="http://groovy.codehaus.org">http://groovy.codehaus.org</ulink>。</para>

    <section>
      <title>创建一个Groovy插件</title>

      <para>要使用Groovy创建一个Maven插件，你只需要两个文件：一个pom.xml和一个用Groovy实现的Mojo。首先，创建一个名为firstgroovy-maven-plugin的项目目录，然后在该目录下创建如下的pom.xml文件：</para>

      <example>
        <title>Groovy Maven插件的POM</title>

        <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;firstgroovy-maven-plugin&lt;/artifactId&gt;
  &lt;name&gt;Example Groovy Mojo - firstgroovy-maven-plugin&lt;/name&gt;
  &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.mojo.groovy&lt;/groupId&gt;
      &lt;artifactId&gt;groovy-mojo-support&lt;/artifactId&gt;
      &lt;version&gt;1.0-beta-3&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3&lt;/version&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo.groovy&lt;/groupId&gt;
        &lt;artifactId&gt;groovy-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.0-beta-3&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;generateStubs&lt;/goal&gt;
              &lt;goal&gt;compile&lt;/goal&gt;
              &lt;goal&gt;generateTestStubs&lt;/goal&gt;
              &lt;goal&gt;testCompile&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>这个POM到底是怎么回事呢？首先，注意这个POM的打包类型是maven-plugin，这是因为我们要创建一个打包为Maven插件的项目。接着，注意该项目依赖于groupId为org.codehaus.mojo.groovy，artifactId为groovy-maven-plugin的构件。</para>

      <para>接着在项目的<filename>src/main/groovy</filename>目录，创建一个名为EchoMojo.groovy的文件，其包含如下的EchoMojo类：</para>

      <example>
        <title>Echo Groovy Mojo</title>

        <programlisting language="java">package org.sonatype.mavenbook.plugins

import org.codehaus.mojo.groovy.GroovyMojo

/**
 * Example goal which echos a message
 *
 * @goal echo
 */
class EchoMojo extends GroovyMojo {

    /**
     * Message to print
     *
     * @parameter expression="${echo.message}"
     *            default-value="Hello Maven World"
     */
    String message

    void execute() {
      log.info( message )
    }
}</programlisting>
      </example>
    </section>
  </section>
</chapter>
